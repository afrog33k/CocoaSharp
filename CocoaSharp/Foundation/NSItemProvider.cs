using ObjectiveC;using System;using SharpSwift.Attributes;using System.Collections.Generic;namespace Foundation{    /// <summary>    /// The NSItemProvider class defines an object that represents a high-level abstraction for data objects that can be found in an NSExtensionItem object’s attachments property, such as text, images, and URLs. An extension uses an NSItemProvider object to query the host app for available item formats, load items of specific types, and support efficient item previewing.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/Foundation/Reference/NSItemProvider_Class/index.html#//apple_ref/occ/cl/NSItemProvider"/>    [iOSVersion(8)]    public class NSItemProvider : NSObject//, AnyObject, NSCopying, NSObjectProtocol    {        /// <summary>        /// Returns an item provider initialized with the contents of the specified file and an appropriate load handler.        /// </summary>        /// <param name="contentsOfURL">The URL of the file in the extension object’s attachments property.</param>        [iOSVersion(8)]        [Export("convenience init")]        public NSItemProvider(NSURL contentsOfURL) { }                /// <summary>        /// Returns an item provider initialized with a load handler appropriate for the specified item.        /// </summary>        /// <param name="item">An NSItemProvider object or nil.</param>        /// <param name="typeIdentifier">A string that represents the UTI of the item.</param>        [iOSVersion(8)]        public NSItemProvider(NSSecureCoding item, string typeIdentifier) { }                /// <summary>        /// Returns a Boolean value that indicates whether the item provider has at least one item that conforms to the specified type.        /// </summary>        /// <param name="typeIdentifier">The UTI that specifies the desired item type.</param>        [iOSVersion(8)]        [Export("hasItemConformingToTypeIdentifier")]        public bool HasItemConformingToTypeIdentifier(string typeIdentifier) { return default(bool); }                /// <summary>        /// Loads the item whose type most closely matches the specified type identifier.        /// </summary>        /// <param name="typeIdentifier">A string that represents the desired UTI.</param>        /// <param name="options">A dictionary of keys and values that provide information about the item, such as the size of an image. (See NSItemProviderPreferredImageSizeKey for a key you can use.)</param>        /// <param name="completionHandler">A completion handler block that uses the form specified by NSItemProviderCompletionHandler.</param>        [iOSVersion(8)]        [Export("loadItemForTypeIdentifier")]        public void LoadItemForTypeIdentifier(string typeIdentifier, Dictionary<NSObject, AnyObject> options, NSItemProviderCompletionHandler completionHandler) {  }                /// <summary>        /// Sets the load handler block to use for the specified type identifier.        /// </summary>        /// <param name="typeIdentifier">A string that represents the desired UTI.</param>        /// <param name="loadHandler">A completion handler block that uses the form specified by NSItemProviderLoadHandler.</param>        [iOSVersion(8)]        [Export("registerItemForTypeIdentifier")]        public void RegisterItemForTypeIdentifier(string typeIdentifier, NSItemProviderLoadHandler loadHandler) {  }                /// <summary>        /// Loads the preview image for the specified item.        /// </summary>        /// <param name="options">A dictionary of keys and values that provide information about the item, such as the size of an image. (See NSItemProviderPreferredImageSizeKey for a key you can use.)</param>        /// <param name="completionHandler">A completion handler block that uses the form specified by NSItemProviderCompletionHandler.</param>        [iOSVersion(8)]        [Export("loadPreviewImageWithOptions")]        public void LoadPreviewImageWithOptions(Dictionary<NSObject, AnyObject> options, NSItemProviderCompletionHandler completionHandler) {  }                /// <summary>        /// Returns an array of registered type identifiers for this item provider. (read-only)        /// </summary>        [iOSVersion(8)]        [Export("registeredTypeIdentifiers")]        public AnyObject[] RegisteredTypeIdentifiers { get; private set; }                /// <summary>        /// The custom preview image handler block to use with this item provider.        /// </summary>        [iOSVersion(8)]        [Export("previewImageHandler")]        public NSItemProviderLoadHandler PreviewImageHandler { get; set; }    }    /// <summary>    /// A block to be called when an item provider loads an item from an extension object’s attachments property.    /// </summary>    [iOSVersion(8)]    public struct NSItemProviderCompletionHandler    {        static public implicit operator NSItemProviderCompletionHandler(Action<NSSecureCoding, NSError> value)        {            return default(NSItemProviderCompletionHandler);        }        static public implicit operator Action<NSSecureCoding, NSError>(NSItemProviderCompletionHandler value)        {            return default(Action<NSSecureCoding, NSError>);        }    }    /// <summary>    /// A block to be called when an item of a specific type is being loaded from an extension object’s attachments property.    /// </summary>    [iOSVersion(8)]    public struct NSItemProviderLoadHandler    {        static public implicit operator NSItemProviderLoadHandler(Action<NSSecureCoding, NSError> value)        {            return default(NSItemProviderLoadHandler);        }        static public implicit operator Action<NSSecureCoding, NSError>(NSItemProviderLoadHandler value)        {            return default(Action<NSSecureCoding, NSError>);        }    }}