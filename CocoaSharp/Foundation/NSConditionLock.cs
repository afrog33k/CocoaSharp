using ObjectiveC;using System;using SwiftSharp.Attributes;using System.Collections.Generic;namespace Foundation{    /// <summary>    /// The NSConditionLock class defines objects whose locks can be associated with specific, user-defined conditions. Using an NSConditionLock object, you can ensure that a thread can acquire a lock only if a certain condition is met. Once it has acquired the lock and executed the critical section of code, the thread can relinquish the lock and set the associated condition to something new. The conditions themselves are arbitrary: you define them as needed for your application.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSConditionLock_Class/index.html#//apple_ref/occ/cl/NSConditionLock"/>    [iOSVersion(2)]    public class NSConditionLock : NSObject//, AnyObject, NSLocking, NSObjectProtocol    {        /// <summary>        /// Initializes a newly allocated NSConditionLock object and sets its condition.        /// </summary>        /// <param name="condition">The user-defined condition for the lock. The value of condition is user-defined; see the class description for more information.</param>        [iOSVersion(2)]        public NSConditionLock(int condition) { }                /// <summary>        /// Attempts to acquire a lock before a specified moment in time.        /// </summary>        /// <param name="limit">The date by which the lock must be acquired or the attempt will time out.</param>        [iOSVersion(2)]        [Export("lockBeforeDate")]        public bool LockBeforeDate(NSDate limit) { return default(bool); }                /// <summary>        /// Attempts to acquire a lock.        /// </summary>        /// <param name="condition">The condition to match on.</param>        [iOSVersion(2)]        [Export("lockWhenCondition")]        public void LockWhenCondition(int condition) {  }                /// <summary>        /// Attempts to acquire a lock before a specified moment in time.        /// </summary>        /// <param name="condition">The condition to match on.</param>        /// <param name="beforeDate">The date by which the lock must be acquired or the attempt will time out.</param>        [iOSVersion(2)]        [Export("lockWhenCondition")]        public bool LockWhenCondition(int condition, NSDate beforeDate) { return default(bool); }                /// <summary>        /// Attempts to acquire a lock without regard to the receiver’s condition.        /// </summary>        [iOSVersion(2)]        [Export("tryLock")]        public bool TryLock() { return default(bool); }                /// <summary>        /// Attempts to acquire a lock if the receiver’s condition is equal to the specified condition.        /// </summary>        /// <param name="condition"></param>        [iOSVersion(2)]        [Export("tryLockWhenCondition")]        public bool TryLockWhenCondition(int condition) { return default(bool); }                /// <summary>        /// Relinquishes the lock and sets the receiver’s condition.        /// </summary>        /// <param name="condition">The user-defined condition for the lock. The value of condition is user-defined; see the class description for more information.</param>        [iOSVersion(2)]        [Export("unlockWithCondition")]        public void UnlockWithCondition(int condition) {  }                /// <summary>        /// The condition associated with the receiver. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("condition")]        public int Condition { get; private set; }                /// <summary>        /// The name associated with the receiver.        /// </summary>        [iOSVersion(2)]        [Export("name")]        public string Name { get; set; }    }}