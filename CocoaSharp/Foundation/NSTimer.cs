using ObjectiveC;using System;using SharpSwift.Attributes;using System.Collections.Generic;namespace Foundation{    /// <summary>    /// You use the NSTimer class to create timer objects or, more simply, timers. A timer waits until a certain time interval has elapsed and then fires, sending a specified message to a target object. For example, you could create an NSTimer object that sends a message to a window, telling it to update itself after a certain time interval.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSTimer_Class/index.html#//apple_ref/occ/cl/NSTimer"/>    [iOSVersion(2)]    [Export("")]    public class NSTimer : NSObject//, AnyObject, CVarArgType, Equatable, Hashable, NSObjectProtocol, Printable    {        public NSTimer() { }        /// <summary>        /// Creates and returns a new NSTimer object and schedules it on the current run loop in the default mode.        /// </summary>        /// <param name="seconds">The number of seconds between firings of the timer. If seconds is less than or equal to 0.0, this method chooses the nonnegative value of 0.1 milliseconds instead.</param>        /// <param name="invocation">The invocation to use when the timer fires. The invocation object maintains a strong reference to its arguments until the timer is invalidated.</param>        /// <param name="repeats">If true, the timer will repeatedly reschedule itself until invalidated. If false, the timer will be invalidated after it fires.</param>        [iOSVersion(2)]        [Export("scheduledTimerWithTimeInterval")]        public static NSTimer ScheduledTimerWithTimeInterval(NSTimeInterval seconds, NSInvocation invocation, bool repeats) { return default(NSTimer); }                /// <summary>        /// Creates and returns a new NSTimer object and schedules it on the current run loop in the default mode.        /// </summary>        /// <param name="seconds">The number of seconds between firings of the timer. If seconds is less than or equal to 0.0, this method chooses the nonnegative value of 0.1 milliseconds instead.</param>        /// <param name="target">The object to which to send the message specified by aSelector when the timer fires. The timer maintains a strong reference to target until it (the timer) is invalidated.</param>        /// <param name="selector">The message to send to target when the timer fires.        ///   The selector should have the following signature: timerFireMethod: (including a colon to indicate that the method takes an argument). The timer passes itself as the argument, thus the method would adopt the following pattern:        ///           - (void)timerFireMethod:(NSTimer *)timer</param>        /// <param name="userInfo">The user info for the timer. The timer maintains a strong reference to this object until it (the timer) is invalidated. This parameter may be nil.</param>        /// <param name="repeats">If true, the timer will repeatedly reschedule itself until invalidated. If false, the timer will be invalidated after it fires.</param>        [iOSVersion(2)]        [Export("scheduledTimerWithTimeInterval")]        public static NSTimer ScheduledTimerWithTimeInterval(NSTimeInterval seconds, AnyObject target, Selector selector, [Optional] AnyObject userInfo, bool repeats) { return default(NSTimer); }                /// <summary>        /// Creates and returns a new NSTimer object initialized with the specified invocation object.        /// </summary>        /// <param name="timeInterval">The number of seconds between firings of the timer. If seconds is less than or equal to 0.0, this method chooses the nonnegative value of 0.1 milliseconds instead</param>        /// <param name="invocation">The invocation to use when the timer fires. The timer instructs the invocation object to maintain a strong reference to its arguments.</param>        /// <param name="repeats">If true, the timer will repeatedly reschedule itself until invalidated. If false, the timer will be invalidated after it fires.</param>        [iOSVersion(2)]        public NSTimer(NSTimeInterval timeInterval, NSInvocation invocation, bool repeats) { }                /// <summary>        /// Creates and returns a new NSTimer object initialized with the specified object and selector.        /// </summary>        /// <param name="timeInterval">The number of seconds between firings of the timer. If seconds is less than or equal to 0.0, this method chooses the nonnegative value of 0.1 milliseconds instead.</param>        /// <param name="target">The object to which to send the message specified by aSelector when the timer fires. The timer maintains a strong reference to this object until it (the timer) is invalidated.</param>        /// <param name="selector">The message to send to target when the timer fires.        ///   The selector should have the following signature: timerFireMethod: (including a colon to indicate that the method takes an argument). The timer passes itself as the argument, thus the method would adopt the following pattern:        ///           - (void)timerFireMethod:(NSTimer *)timer</param>        /// <param name="userInfo">Custom user info for the timer.        ///   The timer maintains a strong reference to this object until it (the timer) is invalidated. This parameter may be nil.</param>        /// <param name="repeats">If true, the timer will repeatedly reschedule itself until invalidated. If false, the timer will be invalidated after it fires.</param>        [iOSVersion(2)]        public NSTimer(NSTimeInterval timeInterval, AnyObject target, Selector selector, [Optional] AnyObject userInfo, bool repeats) { }                /// <summary>        /// Initializes a new NSTimer object using the specified object and selector.        /// </summary>        /// <param name="fireDate">The time at which the timer should first fire.</param>        /// <param name="interval">For a repeating timer, this parameter contains the number of seconds between firings of the timer. If seconds is less than or equal to 0.0, this method chooses the nonnegative value of 0.1 milliseconds instead.</param>        /// <param name="target">The object to which to send the message specified by aSelector when the timer fires. The timer maintains a strong reference to this object until it (the timer) is invalidated.</param>        /// <param name="selector">The message to send to target when the timer fires.        ///   The selector should have the following signature: timerFireMethod: (including a colon to indicate that the method takes an argument). The timer passes itself as the argument, thus the method would adopt the following pattern:        ///           - (void)timerFireMethod:(NSTimer *)timer</param>        /// <param name="userInfo">Custom user info for the timer. The timer maintains a strong reference to this object until it (the timer) is invalidated. This parameter may be nil.</param>        /// <param name="repeats">If true, the timer will repeatedly reschedule itself until invalidated. If false, the timer will be invalidated after it fires.</param>        [iOSVersion(2)]        public NSTimer(NSDate fireDate, NSTimeInterval interval, AnyObject target, Selector selector, [Optional] AnyObject userInfo, bool repeats) { }                /// <summary>        /// Causes the receiver’s message to be sent to its target.        /// </summary>        [iOSVersion(2)]        [Export("fire")]        public virtual void Fire() {  }                /// <summary>        /// Stops the receiver from ever firing again and requests its removal from its run loop.        /// </summary>        [iOSVersion(2)]        [Export("invalidate")]        public virtual void Invalidate() {  }                /// <summary>        /// A Boolean value that indicates whether the receiver is currently valid. (read-only)        /// </summary>        [iOSVersion(8)]        [Export("valid")]        public bool Valid { get; private set; }                /// <summary>        /// The date at which the timer will fire.        /// </summary>        [iOSVersion(2)]        [Export("fireDate")]        public NSDate FireDate { get; set; }                /// <summary>        /// The timer’s time interval. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("timeInterval")]        public NSTimeInterval TimeInterval { get; private set; }                /// <summary>        /// The receiver&#39;s userInfo object. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("userInfo")]        [Optional]        public AnyObject UserInfo { get; private set; }                /// <summary>        /// The amount of time after the scheduled fire date that the timer may fire.        /// </summary>        [iOSVersion(7)]        [Export("tolerance")]        public NSTimeInterval Tolerance { get; set; }    }}