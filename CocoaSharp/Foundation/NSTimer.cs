using ObjectiveC;using System;using SwiftSharp.Attributes;namespace Foundation{	//https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSTimer_Class/index.html#//apple_ref/occ/cl/NSTimer	/// <summary>	/// You use the NSTimer class to create timer objects or, more simply, timers. A timer waits until a certain time interval has elapsed and then fires, sending a specified message to a target object. For example, you could create an NSTimer object that sends a message to a window, telling it to update itself after a certain time interval.	/// </summary>	[iOSVersion(2)]	public class NSTimer : NSObject	{		/// <summary>		/// Creates and returns a new NSTimer object and schedules it on the current run loop in the default mode.		/// </summary>		/// <param name="seconds">The number of seconds between firings of the timer. If seconds is less than or equal to 0.0, this method chooses the nonnegative value of 0.1 milliseconds instead.</param>		/// <param name="invocation">The invocation to use when the timer fires. The invocation object maintains a strong reference to its arguments until the timer is invalidated.</param>		/// <param name="repeats">If true, the timer will repeatedly reschedule itself until invalidated. If false, the timer will be invalidated after it fires.</param>		/// <returns>A new NSTimer object, configured according to the specified parameters.</returns>		[iOSVersion(2)]		[Export("scheduledTimerWithTimeinterval")]		public static NSTimer ScheduledTimerWithTimeinterval(NSTimeinterval seconds, NSInvocation invocation, bool repeats) { return null; }				/// <summary>		/// Creates and returns a new NSTimer object and schedules it on the current run loop in the default mode.		/// </summary>		/// <param name="seconds">The number of seconds between firings of the timer. If seconds is less than or equal to 0.0, this method chooses the nonnegative value of 0.1 milliseconds instead.</param>		/// <param name="target">The object to which to send the message specified by aSelector when the timer fires. The timer maintains a strong reference to target until it (the timer) is invalidated.</param>		/// <param name="selector">The message to send to target when the timer fires.   The selector should have the following signature: timerFireMethod: (including a colon to indicate that the method takes an argument). The timer passes itself as the argument, thus the method would adopt the following pattern:                Swift         func timerFireMethod(timer: NSTimer) { }                   Objective-C         - (void)timerFireMethod:(NSTimer *)timer</param>		/// <param name="userInfo">The user info for the timer. The timer maintains a strong reference to this object until it (the timer) is invalidated. This parameter may be nil.</param>		/// <param name="repeats">If true, the timer will repeatedly reschedule itself until invalidated. If false, the timer will be invalidated after it fires.</param>		/// <returns>A new NSTimer object, configured according to the specified parameters.</returns>		[iOSVersion(2)]		[Export("scheduledTimerWithTimeinterval")]		public static NSTimer ScheduledTimerWithTimeinterval(NSTimeinterval seconds, AnyObject target, Selector selector, AnyObject userInfo, bool repeats) { return null; }				/// <summary>		/// Creates and returns a new NSTimer object initialized with the specified invocation object.		/// </summary>		/// <param name="timeinterval">The number of seconds between firings of the timer. If seconds is less than or equal to 0.0, this method chooses the nonnegative value of 0.1 milliseconds instead</param>		/// <param name="invocation">The invocation to use when the timer fires. The timer instructs the invocation object to maintain a strong reference to its arguments.</param>		/// <param name="repeats">If true, the timer will repeatedly reschedule itself until invalidated. If false, the timer will be invalidated after it fires.</param>		/// <returns>A new NSTimer object, configured according to the specified parameters.</returns>		[iOSVersion(2)]		public NSTimer Init(NSTimeinterval timeinterval, NSInvocation invocation, bool repeats) { }				/// <summary>		/// Creates and returns a new NSTimer object initialized with the specified object and selector.		/// </summary>		/// <param name="timeinterval">The number of seconds between firings of the timer. If seconds is less than or equal to 0.0, this method chooses the nonnegative value of 0.1 milliseconds instead.</param>		/// <param name="target">The object to which to send the message specified by aSelector when the timer fires. The timer maintains a strong reference to this object until it (the timer) is invalidated.</param>		/// <param name="selector">The message to send to target when the timer fires.   The selector should have the following signature: timerFireMethod: (including a colon to indicate that the method takes an argument). The timer passes itself as the argument, thus the method would adopt the following pattern:                Swift         func timerFireMethod(timer: NSTimer) { }                   Objective-C         - (void)timerFireMethod:(NSTimer *)timer</param>		/// <param name="userInfo">Custom user info for the timer.   The timer maintains a strong reference to this object until it (the timer) is invalidated. This parameter may be nil.</param>		/// <param name="repeats">If true, the timer will repeatedly reschedule itself until invalidated. If false, the timer will be invalidated after it fires.</param>		/// <returns>A new NSTimer object, configured according to the specified parameters.</returns>		[iOSVersion(2)]		public NSTimer Init(NSTimeinterval timeinterval, AnyObject target, Selector selector, AnyObject userInfo, bool repeats) { }				/// <summary>		/// Initializes a new NSTimer object using the specified object and selector.		/// </summary>		/// <param name="fireDate">The time at which the timer should first fire.</param>		/// <param name="interval">For a repeating timer, this parameter contains the number of seconds between firings of the timer. If seconds is less than or equal to 0.0, this method chooses the nonnegative value of 0.1 milliseconds instead.</param>		/// <param name="target">The object to which to send the message specified by aSelector when the timer fires. The timer maintains a strong reference to this object until it (the timer) is invalidated.</param>		/// <param name="selector">The message to send to target when the timer fires.   The selector should have the following signature: timerFireMethod: (including a colon to indicate that the method takes an argument). The timer passes itself as the argument, thus the method would adopt the following pattern:                Swift         func timerFireMethod(timer: NSTimer) { }                   Objective-C         - (void)timerFireMethod:(NSTimer *)timer</param>		/// <param name="userInfo">Custom user info for the timer. The timer maintains a strong reference to this object until it (the timer) is invalidated. This parameter may be nil.</param>		/// <param name="repeats">If true, the timer will repeatedly reschedule itself until invalidated. If false, the timer will be invalidated after it fires.</param>		/// <returns>The receiver, initialized such that, when added to a run loop, it will fire at date and then, if repeats is true, every seconds after that.</returns>		[iOSVersion(2)]		public NSTimer(NSDate fireDate, NSTimeinterval interval, AnyObject target, Selector selector, AnyObject userInfo, bool repeats) { }				/// <summary>		/// Causes the receiver’s message to be sent to its target.		/// </summary>		[iOSVersion(2)]		[Export("fire")]		public void Fire() { }				/// <summary>		/// Stops the receiver from ever firing again and requests its removal from its run loop.		/// </summary>		[iOSVersion(2)]		[Export("invalidate")]		public void Invalidate() { }				/// <summary>		/// Returns the date at which the receiver will fire.		/// </summary>		/// <returns>The date at which the receiver will fire. If the timer is no longer valid, this method returns the last date at which the timer fired.</returns>		[iOSVersion(2)]		[Export("fireDate")]		public NSDate FireDate { get; set; }				/// <summary>		/// Resets the firing time of the receiver to the specified date.		/// </summary>		/// <param name="date">The new date at which to fire the receiver. If the new date is in the past, this method sets the fire time to the current time.</param>		[iOSVersion(2)]		[Export("fireDate")]		public NSDate FireDate { get; set; }				/// <summary>		/// Returns the receiver’s time interval.		/// </summary>		/// <returns>The receiver’s time interval. If the receiver is a non-repeating timer, returns 0 (even if a time interval was set).</returns>		[iOSVersion(2)]		[Export("timeinterval")]		public NSTimeinterval Timeinterval { get; private set; }				/// <summary>		/// Returns the receiver's userInfo object.		/// </summary>		/// <returns>The receiver's userInfo object.</returns>		[iOSVersion(2)]		[Export("userInfo")]		public AnyObject UserInfo { get; private set; }				/// <summary>		/// Sets the amount of time after the scheduled fire date that the timer may fire to the given interval.		/// </summary>		/// <param name="tolerance">The amount of time after the scheduled firing time that the timer may fire.</param>		[iOSVersion(7)]		[Export("tolerance")]		public NSTimeinterval Tolerance { get; set; }				/// <summary>		/// Returns the amount of time after the scheduled fire date that the timer may fire.		/// </summary>		/// <returns>The amount of time after the scheduled firing time that the timer may fire.</returns>		[iOSVersion(7)]		[Export("tolerance")]		public NSTimeinterval Tolerance { get; set; }	}}