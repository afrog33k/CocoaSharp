using ObjectiveC;using System;using SwiftSharp.Attributes;namespace Foundation{	//https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/NSNetServiceDelegate_Protocol/index.html#//apple_ref/occ/intf/NSNetServiceDelegate	/// <summary>	/// The NSNetServiceDelegate protocol defines the optional methods implemented by delegates of NSNetService objects.	/// </summary>	[iOSVersion(4)]	public interface NSNetServiceDelegate	{		/// <summary>		/// Notifies the delegate that the network is ready to publish the service.		/// </summary>		/// <param name="sender">The service that is ready to publish.</param>		[iOSVersion(2)]		[Export("netServiceWillPublish")]		[Optional]		void NetServiceWillPublish(NSNetService sender);				/// <summary>		/// Notifies the delegate that a service could not be published.		/// </summary>		/// <param name="sender">The service that could not be published.</param>		/// <param name="didNotPublish">A dictionary containing information about the problem. The dictionary contains the keys NSNetServicesErrorCode and NSNetServicesErrorDomain.</param>		[iOSVersion(2)]		[Export("netService")]		[Optional]		void NetService(NSNetService sender, NSDictionary didNotPublish);				/// <summary>		/// Notifies the delegate that a service was successfully published.		/// </summary>		/// <param name="sender">The service that was published.</param>		[iOSVersion(2)]		[Export("netServiceDidPublish")]		[Optional]		void NetServiceDidPublish(NSNetService sender);				/// <summary>		/// Notifies the delegate that the network is ready to resolve the service.		/// </summary>		/// <param name="sender">The service that the network is ready to resolve.</param>		[iOSVersion(2)]		[Export("netServiceWillResolve")]		[Optional]		void NetServiceWillResolve(NSNetService sender);				/// <summary>		/// Informs the delegate that an error occurred during resolution of a given service.		/// </summary>		/// <param name="sender">The service that did not resolve.</param>		/// <param name="didNotResolve">A dictionary containing information about the problem. The dictionary contains the keys NSNetServicesErrorCode and NSNetServicesErrorDomain.</param>		[iOSVersion(2)]		[Export("netService")]		[Optional]		void NetService(NSNetService sender, NSDictionary didNotResolve);				/// <summary>		/// Informs the delegate that the address for a given service was resolved.		/// </summary>		/// <param name="sender">The service that was resolved.</param>		[iOSVersion(2)]		[Export("netServiceDidResolveAddress")]		[Optional]		void NetServiceDidResolveAddress(NSNetService sender);				/// <summary>		/// Notifies the delegate that the TXT record for a given service has been updated.		/// </summary>		/// <param name="sender">The service whose TXT record was updated.</param>		/// <param name="didUpdateTXTRecordData">The new TXT record.</param>		[iOSVersion(2)]		[Export("netService")]		[Optional]		void NetService(NSNetService sender, NSData didUpdateTXTRecordData);				/// <summary>		/// Informs the delegate that a publish or resolveWithTimeout: request was stopped.		/// </summary>		/// <param name="sender">The service that stopped.</param>		[iOSVersion(2)]		[Export("netServiceDidStop")]		[Optional]		void NetServiceDidStop(NSNetService sender);				/// <summary>		/// Called when a client connects to a service managed by Bonjour.		/// </summary>		/// <param name="sender">The net service object that the client connected to.</param>		/// <param name="didAcceptConnectionWithInputStream">A stream object for receiving data from the client.</param>		/// <param name="outputStream">A stream object for sending data to the client.</param>		[iOSVersion(7)]		[Export("netService")]		[Optional]		void NetService(NSNetService sender, NSInputStream didAcceptConnectionWithInputStream, NSOutputStream outputStream);	}}