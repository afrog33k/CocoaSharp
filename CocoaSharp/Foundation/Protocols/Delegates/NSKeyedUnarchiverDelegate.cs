using ObjectiveC;using System;using SwiftSharp.Attributes;namespace Foundation{	//https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/NSKeyedUnarchiverDelegate_Protocol/index.html#//apple_ref/occ/intf/NSKeyedUnarchiverDelegate	/// <summary>	/// The NSKeyedUnarchiverDelegate protocol defines the optional methods implemented by delegates of NSKeyedUnarchiver objects.	/// </summary>	[iOSVersion(4)]	public interface NSKeyedUnarchiverDelegate	{		/// <summary>		/// Informs the delegate that the class with a given name is not available during decoding.		/// </summary>		/// <param name="unarchiver">An unarchiver for which the receiver is the delegate.</param>		/// <param name="cannotDecodeObjectOfClassName">The name of the class of an object unarchiver is trying to decode.</param>		/// <param name="originalClasses">An array describing the class hierarchy of the encoded object, where the first element is the class name string of the encoded object, the second element is the class name of its immediate superclass, and so on.</param>		/// <returns>The class unarchiver should use in place of the class named name.</returns>		[iOSVersion(2)]		[Export("unarchiver")]		[Optional]		AnyClass Unarchiver(NSKeyedUnarchiver unarchiver, string cannotDecodeObjectOfClassName, AnyObject[] originalClasses);				/// <summary>		/// Informs the delegate that a given object has been decoded.		/// </summary>		/// <param name="unarchiver">An unarchiver for which the receiver is the delegate.</param>		/// <param name="didDecodeObject">The object that has been decoded. object may be nil.</param>		/// <returns>The object to use in place of object. The delegate can either return object or return a different object to replace the decoded one. If the delegate returns nil, the decoded value will be unchanged (that is, the original object will be decoded).</returns>		[iOSVersion(2)]		[Export("unarchiver")]		[Optional]		AnyObject Unarchiver(NSKeyedUnarchiver unarchiver, AnyObject didDecodeObject);				/// <summary>		/// Informs the delegate that one object is being substituted for another.		/// </summary>		/// <param name="unarchiver">An unarchiver for which the receiver is the delegate.</param>		/// <param name="willReplaceObject">An object in the archive.</param>		/// <param name="withObject">The object with which unarchiver will replace object.</param>		[iOSVersion(2)]		[Export("unarchiver")]		[Optional]		void Unarchiver(NSKeyedUnarchiver unarchiver, AnyObject willReplaceObject, AnyObject withObject);				/// <summary>		/// Notifies the delegate that decoding has finished.		/// </summary>		/// <param name="unarchiver">An unarchiver for which the receiver is the delegate.</param>		[iOSVersion(2)]		[Export("unarchiverDidFinish")]		[Optional]		void UnarchiverDidFinish(NSKeyedUnarchiver unarchiver);				/// <summary>		/// Notifies the delegate that decoding is about to finish.		/// </summary>		/// <param name="unarchiver">An unarchiver for which the receiver is the delegate.</param>		[iOSVersion(2)]		[Export("unarchiverWillFinish")]		[Optional]		void UnarchiverWillFinish(NSKeyedUnarchiver unarchiver);	}}