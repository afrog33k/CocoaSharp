using ObjectiveC;using System;using SwiftSharp.Attributes;namespace Foundation{    //post/pre prefixes added    //https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/NSKeyedArchiverDelegate_Protocol/index.html#//apple_ref/occ/intf/NSKeyedArchiverDelegate    /// <summary>    /// The NSKeyedArchiverDelegate protocol defines the optional methods implemented by delegates of NSKeyedArchiver objects.    /// </summary>    [iOSVersion(4)]    public interface NSKeyedArchiverDelegate    {        /// <summary>        /// Informs the delegate that a given object has been encoded.        /// </summary>        /// <param name="archiver">The archiver that sent the message.</param>        /// <param name="didEncodeObject">The object that has been encoded. object may be nil.</param>        [iOSVersion(2)]        [Export("archiver")]        [Optional]        void PostArchiver(NSKeyedArchiver archiver, AnyObject didEncodeObject);                /// <summary>        /// Notifies the delegate that encoding has finished.        /// </summary>        /// <param name="archiver">The archiver that sent the message.</param>        [iOSVersion(2)]        [Export("archiverDidFinish")]        [Optional]        void ArchiverDidFinish(NSKeyedArchiver archiver);                /// <summary>        /// Informs the delegate that object is about to be encoded.        /// </summary>        /// <param name="archiver">The archiver that sent the message.</param>        /// <param name="willEncodeObject">The object that is about to be encoded. This value is never nil.</param>        /// <returns>Either object or a different object to be encoded in its stead. The delegate can also modify the coder state. If the delegate returns nil, nil is encoded.</returns>        [iOSVersion(2)]        [Export("archiver")]        [Optional]        AnyObject PreArchiver(NSKeyedArchiver archiver, AnyObject willEncodeObject);                /// <summary>        /// Notifies the delegate that encoding is about to finish.        /// </summary>        /// <param name="archiver">The archiver that sent the message.</param>        [iOSVersion(2)]        [Export("archiverWillFinish")]        [Optional]        void ArchiverWillFinish(NSKeyedArchiver archiver);                /// <summary>        /// Informs the delegate that one given object is being substituted for another given object.        /// </summary>        /// <param name="archiver">The archiver that sent the message.</param>        /// <param name="willReplaceObject">The object being replaced in the archive.</param>        /// <param name="withObject">The object replacing object in the archive.</param>        [iOSVersion(2)]        [Export("archiver")]        [Optional]        void Archiver(NSKeyedArchiver archiver, AnyObject willReplaceObject, AnyObject withObject);    }}