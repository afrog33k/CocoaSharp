using ObjectiveC;using System;using SwiftSharp.Attributes;namespace Foundation{	//https://developer.apple.com/library/prerelease/ios/documentation/Foundation/Reference/NSURLSessionDelegate_protocol/index.html#//apple_ref/occ/intf/NSURLSessionDelegate	/// <summary>	/// The NSURLSessionDelegate protocol describes the methods that NSURLSession objects call on their delegates to handle session-level events. In addition to the methods defined in this protocol, most delegates should also implement some or all of the methods in the NSURLSessionTaskDelegate, NSURLSessionDataDelegate, and NSURLSessionDownloadDelegate protocols to handle task-level events.	/// </summary>	[iOSVersion(7)]	public interface NSURLSessionDelegate	{		/// <summary>		/// Tells the URL session that the session has been invalidated.		/// </summary>		/// <param name="session">The session object that was invalidated.</param>		/// <param name="didBecomeInvalidWithError">The error that caused invalidation, or nil if the invalidation was explicit.</param>		[iOSVersion(7)]		[Export("URLSession")]		[Optional]		void URLSession(NSURLSession session, NSError didBecomeInvalidWithError);				/// <summary>		/// Requests credentials from the delegate in response to a session-level authentication request from the remote server.		/// </summary>		/// <param name="session">The session containing the task that requested authentication.</param>		/// <param name="didReceiveChallenge">An object that contains the request for authentication.</param>		/// <param name="completionHandler">A handler that your delegate method must call. Its parameters are:    disposition—One of several constants that describes how the challenge should be handled.   credential—The credential that should be used for authentication if disposition is NSURLSessionAuthChallengeUseCredential, otherwise NULL.</param>		[iOSVersion(7)]		[Export("URLSession")]		[Optional]		void URLSession(NSURLSession session, NSURLAuthenticationChallenge didReceiveChallenge, Action<NSURLSessionAuthChallengeDisposition, NSURLCredential> completionHandler);				/// <summary>		/// Tells the delegate that all messages enqueued for a session have been delivered.		/// </summary>		/// <param name="session">The session that no longer has any outstanding requests.</param>		[iOSVersion(7)]		[Export("URLSessionDidFinishEventsForBackgroundURLSession")]		[Optional]		void URLSessionDidFinishEventsForBackgroundURLSession(NSURLSession session);				/// <summary>		/// Constants passed by session or task delegates to the provided continuation block in response to an authentication challenge.		/// </summary>		enum NSURLSessionAuthChallengeDisposition		{			/// <summary>			/// Use the specified credential, which may be nil.			/// </summary>			[iOSVersion(7)]			UseCredential,						/// <summary>			/// Use the default handling for the challenge as though this delegate method were not implemented. The provided credential parameter is ignored.			/// </summary>			[iOSVersion(7)]			PerformDefaultHandling,						/// <summary>			/// Cancel the entire request. The provided credential parameter is ignored.			/// </summary>			[iOSVersion(7)]			CancelAuthenticationChallenge,						/// <summary>			/// Reject this challenge, and call the authentication delegate method again with the next authentication protection space. The provided credential parameter is ignored.			/// </summary>			[iOSVersion(7)]			RejectProtectionSpace,		}	}}