using ObjectiveC;using System;using SwiftSharp.Attributes;namespace Foundation{	//https://developer.apple.com/library/prerelease/ios/documentation/Foundation/Reference/NSURLConnectionDelegate_Protocol/index.html#//apple_ref/occ/intf/NSURLConnectionDelegate	/// <summary>	/// The NSURLConnectionDelegate protocol defines methods common to the NSURLConnectionDataDelegate and NSURLConnectionDownloadDelegate protocols.	/// </summary>	[iOSVersion(5)]	public interface NSURLConnectionDelegate	{		/// <summary>		/// Tells the delegate that the connection will send a request for an authentication challenge.		/// </summary>		/// <param name="connection">The connection sending the message.</param>		/// <param name="willSendRequestForAuthenticationChallenge">The authentication challenge for which a request is being sent.</param>		[iOSVersion(5)]		[Export("connection")]		[Optional]		void WillSendConnection(NSURLConnection connection, NSURLAuthenticationChallenge willSendRequestForAuthenticationChallenge);				/// <summary>		/// Sent to determine whether the delegate is able to respond to a protection space’s form of authentication.		/// </summary>		/// <param name="connection">The connection sending the message.</param>		/// <param name="canAuthenticateAgainstProtectionSpace">The protection space that generates an authentication challenge.</param>		/// <returns>true if the delegate if able to respond to a protection space’s form of authentication, otherwise false.</returns>		[iOSVersion(3)]		[Export("connection")]		[Optional]		bool CanAuthenticateConnection(NSURLConnection connection, NSURLProtectionSpace canAuthenticateAgainstProtectionSpace);				/// <summary>		/// Sent when a connection cancels an authentication challenge.		/// </summary>		/// <param name="connection">The connection sending the message.</param>		/// <param name="didCancelAuthenticationChallenge">The challenge that was canceled.</param>		[iOSVersion(2)]		[Export("connection")]		[Optional]		void PostCancelConnection(NSURLConnection connection, NSURLAuthenticationChallenge didCancelAuthenticationChallenge);				/// <summary>		/// Sent when a connection must authenticate a challenge in order to download its request.		/// </summary>		/// <param name="connection">The connection sending the message.</param>		/// <param name="didReceiveAuthenticationChallenge">The challenge that connection must authenticate in order to download its request.</param>		[iOSVersion(2)]		[Export("connection")]		[Optional]		void PostReceiveConnection(NSURLConnection connection, NSURLAuthenticationChallenge didReceiveAuthenticationChallenge);				/// <summary>		/// Sent to determine whether the URL loader should use the credential storage for authenticating the connection.		/// </summary>		/// <param name="connection">The connection sending the message.</param>		[iOSVersion(3)]		[Export("connectionShouldUseCredentialStorage")]		[Optional]		bool ConnectionShouldUseCredentialStorage(NSURLConnection connection);				/// <summary>		/// Sent when a connection fails to load its request successfully.		/// </summary>		/// <param name="connection">The connection sending the message.</param>		/// <param name="didFailWithError">An error object containing details of why the connection failed to load the request successfully.</param>		[iOSVersion(2)]		[Export("connection")]		[Optional]		void Connection(NSURLConnection connection, NSError didFailWithError);	}}