using ObjectiveC;using System;using SwiftSharp.Attributes;using System.Collections.Generic;namespace Foundation{    /// <summary>    /// The NSURLProtocolClient protocol provides the interface used by NSURLProtocol subclasses to communicate with the URL loading system. An application should never have the need to implement this protocol.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Protocols/NSURLProtocolClient_Protocol/index.html#//apple_ref/occ/intf/NSURLProtocolClient"/>    [iOSVersion(2)]    public interface NSURLProtocolClient//: NSObjectProtocol    {        /// <summary>        /// Sent to indicate to the URL loading system that a cached response is valid. (required)        /// </summary>        /// <param name="protocol"></param>        /// <param name="cachedResponseIsValid">The cached response whose validity is being communicated.</param>        [iOSVersion(2)]        void URLProtocol(NSURLProtocol protocol, NSCachedURLResponse cachedResponseIsValid);                /// <summary>        /// Sent to indicate to the URL loading system that an authentication challenge has been canceled. (required)        /// </summary>        /// <param name="protocol"></param>        /// <param name="didCancelAuthenticationChallenge">The authentication challenge that was canceled.</param>        [iOSVersion(2)]        void URLProtocol(NSURLProtocol protocol, NSURLAuthenticationChallenge didCancelAuthenticationChallenge);                /// <summary>        /// Sent when the load request fails due to an error. (required)        /// </summary>        /// <param name="protocol"></param>        /// <param name="didFailWithError">The error that caused the failure of the load request.</param>        [iOSVersion(2)]        void URLProtocol(NSURLProtocol protocol, NSError didFailWithError);                /// <summary>        /// An NSURLProtocol subclass instance, protocol, sends this message to [protocol client] as it loads data. (required)        /// </summary>        /// <param name="protocol"></param>        /// <param name="didLoadData"></param>        [iOSVersion(2)]        void URLProtocol(NSURLProtocol protocol, NSData didLoadData);                /// <summary>        /// Sent to indicate to the URL loading system that an authentication challenge has been received. (required)        /// </summary>        /// <param name="protocol"></param>        /// <param name="didReceiveAuthenticationChallenge">The authentication challenge that has been received.</param>        /// <param name="NAME_YOUR_PARAMS">DO NOT USE THIS PARAMETER - Instead make sure to name the parameters you're using.</param>        [iOSVersion(2)]        [IgnoreParameters("NAME_YOUR_PARAMS")]        void URLProtocol(NSURLProtocol protocol, NSURLAuthenticationChallenge didReceiveAuthenticationChallenge, bool NAME_YOUR_PARAMS = false);                /// <summary>        /// Sent to indicate to the URL loading system that the protocol implementation has created a response object for the request. (required)        /// </summary>        /// <param name="protocol"></param>        /// <param name="didReceiveResponse">The newly available response object.</param>        /// <param name="cacheStoragePolicy">The cache storage policy for the response.</param>        [iOSVersion(2)]        void URLProtocol(NSURLProtocol protocol, NSURLResponse didReceiveResponse, NSURLCacheStoragePolicy cacheStoragePolicy);                /// <summary>        /// Sent to indicate to the URL loading system that the protocol implementation has been redirected. (required)        /// </summary>        /// <param name="protocol"></param>        /// <param name="wasRedirectedToRequest">The new request that the original request was redirected to.</param>        /// <param name="redirectResponse">The response from the original request that caused the redirect.</param>        [iOSVersion(2)]        void URLProtocol(NSURLProtocol protocol, NSURLRequest wasRedirectedToRequest, NSURLResponse redirectResponse);                /// <summary>        /// Sent to indicate to the URL loading system that the protocol implementation has finished loading. (required)        /// </summary>        /// <param name="protocol"></param>        [iOSVersion(2)]        void URLProtocolDidFinishLoading(NSURLProtocol protocol);    }}