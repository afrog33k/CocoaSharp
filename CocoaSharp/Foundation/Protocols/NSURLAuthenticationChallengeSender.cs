using ObjectiveC;using System;using SwiftSharp.Attributes;using System.Collections.Generic;namespace Foundation{	/// <summary>	/// The NSURLAuthenticationChallengeSender protocol represents the interface that the sender of an authentication challenge must implement.	/// </summary>	/// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Protocols/NSURLAuthenticationChallengeSender_Protocol/index.html#//apple_ref/occ/intf/NSURLAuthenticationChallengeSender"/>	[iOSVersion(2)]	public interface NSURLAuthenticationChallengeSender//: NSObjectProtocol	{		/// <summary>		/// Cancels a given authentication challenge. (required)		/// </summary>		/// <param name="challenge">The authentication challenge to cancel.</param>		[iOSVersion(2)]		[Export("cancelAuthenticationChallenge")]		void CancelAuthenticationChallenge(NSURLAuthenticationChallenge challenge);				/// <summary>		/// Attempt to continue downloading a request without providing a credential for a given challenge. (required)		/// </summary>		/// <param name="challenge">A challenge without authentication credentials.</param>		[iOSVersion(2)]		[Export("continueWithoutCredentialForAuthenticationChallenge")]		void ContinueWithoutCredentialForAuthenticationChallenge(NSURLAuthenticationChallenge challenge);				/// <summary>		/// Attempt to use a given credential for a given authentication challenge. (required)		/// </summary>		/// <param name="credential">The credential to use for authentication.</param>		/// <param name="forAuthenticationChallenge">The challenge for which to use credential.</param>		[iOSVersion(2)]		[Export("useCredential")]		void UseCredential(NSURLCredential credential, NSURLAuthenticationChallenge forAuthenticationChallenge);				/// <summary>		/// Causes the system-provided default behavior to be used.		/// </summary>		/// <param name="challenge">The challenge for which the default behavior should be used.</param>		[iOSVersion(5)]		[Export("performDefaultHandlingForAuthenticationChallenge")]		void PerformDefaultHandlingForAuthenticationChallenge(NSURLAuthenticationChallenge challenge);				/// <summary>		/// Rejects the currently supplied protection space.		/// </summary>		/// <param name="challenge">The challenge that should be rejected.</param>		[iOSVersion(5)]		[Export("rejectProtectionSpaceAndContinueWithChallenge")]		void RejectProtectionSpaceAndContinueWithChallenge(NSURLAuthenticationChallenge challenge);	}}