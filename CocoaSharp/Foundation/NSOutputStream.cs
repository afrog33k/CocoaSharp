using ObjectiveC;using System;using SharpSwift.Attributes;using System.Collections.Generic;namespace Foundation{    /// <summary>    /// The NSOutputStream class is a subclass of NSStream that provides write-only stream functionality.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSOutputStream_Class/index.html#//apple_ref/occ/cl/NSOutputStream"/>    [iOSVersion(2)]    [Export("")]    public class NSOutputStream : NSStream//, AnyObject, CVarArgType, Equatable, Hashable, NSObjectProtocol, Printable    {        public NSOutputStream() { }        /// <summary>        /// Creates and returns an initialized output stream that will write stream data to memory.        /// </summary>        [iOSVersion(2)]        [Export("outputStreamToMemory")]        [return:Unwrapped]        public static NSOutputStream OutputStreamToMemory() { return default(NSOutputStream); }                /// <summary>        /// Returns an initialized output stream that will write to memory.        /// </summary>        /// <param name="toMemory"></param>        [iOSVersion(2)]        public NSOutputStream(Action toMemory) { }                /// <summary>        /// Returns an initialized output stream that can write to a provided buffer.        /// </summary>        /// <param name="toBuffer">The buffer the output stream will write to.</param>        /// <param name="capacity">The size of the buffer in bytes.</param>        [iOSVersion(2)]        public NSOutputStream(UnsafeMutablePointer<UInt8> toBuffer, int capacity) { }                /// <summary>        /// Writes the contents of a provided data buffer to the receiver.        /// </summary>        /// <param name="buffer">The data to write.</param>        /// <param name="maxLength">The length of the data buffer, in bytes.</param>        [iOSVersion(2)]        [Export("write")]        public virtual int Write(UnsafePointer<UInt8> buffer, int maxLength) { return default(int); }                /// <summary>        /// A boolean value that indicates whether the receiver can be written to. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("hasSpaceAvailable")]        public bool HasSpaceAvailable { get; private set; }    }}