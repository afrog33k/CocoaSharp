using ObjectiveC;using System;using SwiftSharp.Attributes;namespace Foundation{	//https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSPipe_Class/index.html#//apple_ref/occ/cl/NSPipe	/// <summary>	/// NSPipe objects provide an object-oriented interface for accessing pipes. An NSPipe object represents both ends of a pipe and enables communication through the pipe. A pipe is a one-way communications channel between related processes; one process writes data, while the other process reads that data. The data that passes through the pipe is buffered; the size of the buffer is determined by the underlying operating system. NSPipe is an abstract class, the public interface of a class cluster.	/// </summary>	[iOSVersion(2)]	public class NSPipe : NSObject	{		/// <summary>		/// Returns an initialized NSPipe object.		/// </summary>		/// <returns>An initialized NSPipe object. Returns nil if the method encounters errors while attempting to create the pipe or the NSFileHandle objects that serve as endpoints of the pipe.</returns>		[iOSVersion(2)]		public NSPipe() { }				/// <summary>		/// Returns an NSPipe object.		/// </summary>		/// <returns>An initialized NSPipe object. Returns nil if the method encounters errors while attempting to create the pipe or the NSFileHandle objects that serve as endpoints of the pipe.</returns>		[iOSVersion(2)]		[Export("pipe")]		public static NSPipe Pipe() { return null; }				/// <summary>		/// Returns the receiver's read file handle.		/// </summary>		/// <returns>The receiver's read file handle.The descriptor represented by this object is deleted, and the object itself is automatically deallocated when the receiver is deallocated.</returns>		[iOSVersion(2)]		[Export("fileHandleForReading")]		public NSFileHandle FileHandleForReading { get; private set; }				/// <summary>		/// Returns the receiver's write file handle.		/// </summary>		/// <returns>The receiver's write file handle. This object is automatically deallocated when the receiver is deallocated.</returns>		[iOSVersion(2)]		[Export("fileHandleForWriting")]		public NSFileHandle FileHandleForWriting { get; private set; }	}}