using ObjectiveC;using System;using SwiftSharp.Attributes;namespace Foundation{	//https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSCountedSet_Class/index.html#//apple_ref/occ/cl/NSCountedSet	/// <summary>	/// The NSCountedSet class declares the programmatic interface to a mutable, unordered collection of indistinct objects. A counted set is also known as a bag.	/// </summary>	[iOSVersion(2)]	public class NSCountedSet : NSMutableSet	{		/// <summary>		/// Returns a counted set object initialized with the contents of a given array.		/// </summary>		/// <param name="array">An array of objects to add to the new set.</param>		/// <returns>An initialized counted set object with the contents of anArray. The returned object might be different than the original receiver.</returns>		[iOSVersion(2)]		public NSCountedSet(AnyObject[] array) { }				/// <summary>		/// Returns a counted set object initialized with the contents of a given set.		/// </summary>		/// <param name="set">An set of objects to add to the new set.</param>		/// <returns>An initialized counted set object with the contents of aSet. The returned object might be different than the original receiver.</returns>		[iOSVersion(2)]		public NSCountedSet(NSSet set) { }				/// <summary>		/// Returns a counted set object initialized with enough memory to hold a given number of objects.		/// </summary>		/// <param name="capacity">The initial capacity of the new counted set.</param>		/// <returns>A counted set object initialized with enough memory to hold numItems objects</returns>		[iOSVersion(2)]		public NSCountedSet(int capacity) { }				/// <summary>		/// Adds a given object to the set.		/// </summary>		/// <param name="anObject">The object to add to the set.</param>		[iOSVersion(2)]		[Export("addObject")]		public void AddObject(AnyObject anObject) { }				/// <summary>		/// Removes a given object from the set.		/// </summary>		/// <param name="anObject">The object to remove from the set.</param>		[iOSVersion(2)]		[Export("removeObject")]		public void RemoveObject(AnyObject anObject) { }				/// <summary>		/// Returns the count associated with a given object in the set.		/// </summary>		/// <param name="anObject">The object for which to return the count.</param>		/// <returns>The count associated with anObject in the set, which can be thought of as the number of occurrences of anObject present in the set.</returns>		[iOSVersion(2)]		[Export("countForObject")]		public int CountForObject(AnyObject anObject) { return 0; }				/// <summary>		/// Returns an enumerator object that lets you access each object in the set once, independent of its count.		/// </summary>		/// <returns>An enumerator object that lets you access each object in the set once, independent of its count.</returns>		[iOSVersion(2)]		[Export("objectEnumerator")]		public NSEnumerator ObjectEnumerator() { return null; }	}}