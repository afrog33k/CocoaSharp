using ObjectiveC;using System;using SwiftSharp.Attributes;namespace Foundation{	//https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSScanner_Class/index.html#//apple_ref/occ/cl/NSScanner	/// <summary>	/// The NSScanner class is an abstract superclass of a class cluster that declares the programmatic interface for an object that scans values from an NSString object.	/// </summary>	[iOSVersion(2)]	public class NSScanner : NSObject	{		/// <summary>		/// Returns an NSScanner object that scans a given string.		/// </summary>		/// <param name="aString">The string to scan.</param>		/// <returns>An NSScanner object that scans aString.</returns>		[iOSVersion(2)]		[Export("scannerWithString")]		public static NSScanner ScannerWithString(string aString) { return null; }				/// <summary>		/// Returns an NSScanner object that scans a given string according to the user’s default locale.		/// </summary>		/// <param name="aString">The string to scan.</param>		/// <returns>An NSScanner object that scans aString according to the user’s default locale.</returns>		[iOSVersion(2)]		[Export("localizedScannerWithString")]		public static AnyObject LocalizedScannerWithString(string aString) { return null; }				/// <summary>		/// Returns an NSScanner object initialized to scan a given string.		/// </summary>		/// <param name="string">The string to scan.</param>		/// <returns>An NSScanner object initialized to scan aString from the beginning. The returned object might be different than the original receiver.</returns>		[iOSVersion(2)]		public NSScanner(string @string) { }				/// <summary>		/// Returns the string with which the receiver was created or initialized.		/// </summary>		/// <returns>The string with which the receiver was created or initialized.</returns>		[iOSVersion(2)]		[Export("string")]		public string String { get; private set; }				/// <summary>		/// Sets the location at which the next scan operation will begin to a given index.		/// </summary>		/// <param name="index">The location at which the next scan operation will begin. Raises an NSRangeException if index is beyond the end of the string being scanned.</param>		[iOSVersion(2)]		[Export("scanLocation")]		public int ScanLocation { get; set; }				/// <summary>		/// Returns the character position at which the receiver will begin its next scanning operation.		/// </summary>		/// <returns>The character position at which the receiver will begin its next scanning operation.</returns>		[iOSVersion(2)]		[Export("scanLocation")]		public int ScanLocation { get; set; }				/// <summary>		/// Sets whether the receiver is case sensitive when scanning characters.		/// </summary>		/// <param name="flag">If true, the receiver will distinguish case when scanning characters, otherwise it will ignore case distinctions.</param>		[iOSVersion(2)]		[Export("caseSensitive")]		public bool CaseSensitive { get; set; }				/// <summary>		/// Returns a Boolean value that indicates whether the receiver distinguishes case in the characters it scans.		/// </summary>		/// <returns>true if the receiver distinguishes case in the characters it scans, otherwise false.</returns>		[iOSVersion(2)]		[Export("caseSensitive")]		public bool CaseSensitive { get; set; }				/// <summary>		/// Sets the set of characters to ignore when scanning for a value representation.		/// </summary>		/// <param name="skipSet">The characters to ignore when scanning for a value representation. Pass nil to not ignore any characters.</param>		[iOSVersion(2)]		[Export("charactersToBeSkipped")]		public NSCharacterSet CharactersToBeSkipped { get; set; }				/// <summary>		/// Returns a character set containing the characters the receiver ignores when looking for a scannable element.		/// </summary>		/// <returns>A character set containing the characters the receiver ignores when looking for a scannable element.</returns>		[iOSVersion(2)]		[Export("charactersToBeSkipped")]		public NSCharacterSet CharactersToBeSkipped { get; set; }				/// <summary>		/// Sets the receiver’s locale to a given locale.		/// </summary>		/// <param name="aLocale">The locale for the receiver.</param>		[iOSVersion(2)]		[Export("locale")]		public AnyObject Locale { get; set; }				/// <summary>		/// Returns the receiver’s locale.		/// </summary>		/// <returns>The receiver’s locale, or nil if it has none.</returns>		[iOSVersion(2)]		[Export("locale")]		public AnyObject Locale { get; set; }				/// <summary>		/// Scans the string as long as characters from a given character set are encountered, accumulating characters into a string that’s returned by reference.		/// </summary>		/// <param name="scanSet">The set of characters to scan.</param>		/// <param name="intoString">Upon return, contains the characters scanned.</param>		/// <returns>true if the receiver scanned any characters, otherwise false.</returns>		[iOSVersion(2)]		[Export("scanCharactersFromSet")]		public bool ScanCharactersFromSet(NSCharacterSet scanSet, AutoreleasingUnsafePointer<NSString?> intoString) { return false; }				/// <summary>		/// Scans the string until a character from a given character set is encountered, accumulating characters into a string that’s returned by reference.		/// </summary>		/// <param name="stopSet">The set of characters up to which to scan.</param>		/// <param name="intoString">Upon return, contains the characters scanned.</param>		/// <returns>true if the receiver scanned any characters, otherwise false.</returns>		[iOSVersion(2)]		[Export("scanUpToCharactersFromSet")]		public bool ScanUpToCharactersFromSet(NSCharacterSet stopSet, AutoreleasingUnsafePointer<NSString?> intoString) { return false; }				/// <summary>		/// Scans for an NSDecimal value, returning a found value by reference.		/// </summary>		/// <param name="decimalValue">Upon return, contains the scanned value. See the NSDecimalNumber class specification for more information about NSDecimal values.</param>		/// <returns>true if the receiver finds a valid NSDecimal representation, otherwise false.</returns>		[iOSVersion(2)]		[Export("scanDecimal")]		public bool ScanDecimal(COpaquePointer decimalValue) { return false; }				/// <summary>		/// Scans for a double value, returning a found value by reference.		/// </summary>		/// <param name="doubleValue">Upon return, contains the scanned value. Contains HUGE_VAL or –HUGE_VAL on overflow, or 0.0 on underflow.</param>		/// <returns>true if the receiver finds a valid floating-point representation, otherwise false.</returns>		[iOSVersion(2)]		[Export("scanDouble")]		public bool ScanDouble(CMutablePointer<CDouble> doubleValue) { return false; }				/// <summary>		/// Scans for a float value, returning a found value by reference.		/// </summary>		/// <param name="floatValue">Upon return, contains the scanned value. Contains HUGE_VAL or –HUGE_VAL on overflow, or 0.0 on underflow.</param>		/// <returns>true if the receiver finds a valid floating-point representation, otherwise false.</returns>		[iOSVersion(2)]		[Export("scanFloat")]		public bool ScanFloat(CMutablePointer<CFloat> floatValue) { return false; }				/// <summary>		/// Scans for a double value from a hexadecimal representation, returning a found value by reference.		/// </summary>		/// <param name="result">Upon return, contains the scanned value.</param>		/// <returns>true if the receiver finds a valid double-point representation, otherwise false.</returns>		[iOSVersion(2)]		[Export("scanHexDouble")]		public bool ScanHexDouble(CMutablePointer<CDouble> result) { return false; }				/// <summary>		/// Scans for a double value from a hexadecimal representation, returning a found value by reference.		/// </summary>		/// <param name="result">Upon return, contains the scanned value.</param>		/// <returns>true if the receiver finds a valid float-point representation, otherwise false.</returns>		[iOSVersion(2)]		[Export("scanHexFloat")]		public bool ScanHexFloat(CMutablePointer<CFloat> result) { return false; }				/// <summary>		/// Scans for an unsigned value from a hexadecimal representation, returning a found value by reference.		/// </summary>		/// <param name="intValue">Upon return, contains the scanned value. Contains UINT_MAX on overflow.</param>		/// <returns>Returns true if the receiver finds a valid hexadecimal integer representation, otherwise false.</returns>		[iOSVersion(2)]		[Export("scanHexint")]		public bool ScanHexint(CMutablePointer<CUnsignedint> intValue) { return false; }				/// <summary>		/// Scans for a long long value from a hexadecimal representation, returning a found value by reference.		/// </summary>		/// <param name="result">Upon return, contains the scanned value.</param>		/// <returns>true if the receiver finds a valid hexadecimal long long representation, otherwise false.</returns>		[iOSVersion(2)]		[Export("scanHexLongLong")]		public bool ScanHexLongLong(CMutablePointer<CUnsignedLongLong> result) { return false; }				/// <summary>		/// Scans for an NSinteger value from a decimal representation, returning a found value by reference		/// </summary>		/// <param name="value">Upon return, contains the scanned value.</param>		/// <returns>true if the receiver finds a valid integer representation, otherwise false.</returns>		[iOSVersion(2)]		[Export("scaninteger")]		public bool Scaninteger(CMutablePointer<int> value) { return false; }				/// <summary>		/// Scans for an int value from a decimal representation, returning a found value by reference.		/// </summary>		/// <param name="intValue">Upon return, contains the scanned value. Contains INT_MAX or INT_MIN on overflow.</param>		/// <returns>true if the receiver finds a valid decimal integer representation, otherwise false.</returns>		[iOSVersion(2)]		[Export("scanint")]		public bool Scanint(CMutablePointer<Cint> intValue) { return false; }				/// <summary>		/// Scans for a long long value from a decimal representation, returning a found value by reference.		/// </summary>		/// <param name="longLongValue">Upon return, contains the scanned value. Contains LLONG_MAX or LLONG_MIN on overflow.</param>		/// <returns>true if the receiver finds a valid decimal integer representation, otherwise false.</returns>		[iOSVersion(2)]		[Export("scanLongLong")]		public bool ScanLongLong(CMutablePointer<CLongLong> longLongValue) { return false; }				/// <summary>		/// Scans a given string, returning an equivalent string object by reference if a match is found.		/// </summary>		/// <param name="string">The string for which to scan at the current scan location.</param>		/// <param name="intoString">Upon return, if the receiver contains a string equivalent to string at the current scan location, contains a string equivalent to string.</param>		/// <returns>true if string matches the characters at the scan location, otherwise false.</returns>		[iOSVersion(2)]		[Export("scanString")]		public bool ScanString(string @string, AutoreleasingUnsafePointer<NSString?> intoString) { return false; }				/// <summary>		/// Scans for an unsigned long long value from a decimal representation, returning a found value by reference.		/// </summary>		/// <param name="unsignedLongLongValue">Upon return, contains the scanned value. Contains ULLONG_MAX on overflow.</param>		/// <returns>true if the receiver finds a valid decimal integer representation, otherwise false.</returns>		[iOSVersion(7)]		[Export("scanUnsignedLongLong")]		public bool ScanUnsignedLongLong(CMutablePointer<CUnsignedLongLong> unsignedLongLongValue) { return false; }				/// <summary>		/// Scans the string until a given string is encountered, accumulating characters into a string that’s returned by reference.		/// </summary>		/// <param name="stopString">The string to scan up to.</param>		/// <param name="intoString">Upon return, contains any characters that were scanned.</param>		/// <returns>true if the receiver scans any characters, otherwise false.</returns>		[iOSVersion(2)]		[Export("scanUpToString")]		public bool ScanUpToString(string stopString, AutoreleasingUnsafePointer<NSString?> intoString) { return false; }	}}