using ObjectiveC;using System;using SharpSwift.Attributes;using System.Collections.Generic;namespace Foundation{    /// <summary>    /// The NSLinguisticTagger class is used to automatically segment natural-language text and tag it with information, such as parts of speech.  It can also tag languages, scripts, stem forms of words, etc. An instance of this class is assigned a string to tag, and clients can then obtain tags and ranges for tokens in that string appropriate to a given tag scheme.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/NSLinguisticTagger_Class/index.html#//apple_ref/occ/cl/NSLinguisticTagger"/>    [iOSVersion(5)]    [Export("")]    public class NSLinguisticTagger : NSObject//, AnyObject, CVarArgType, Equatable, Hashable, NSObjectProtocol, Printable    {        public NSLinguisticTagger() { }        /// <summary>        /// Creates a linguistic tagger instance using the specified tag schemes and options.        /// </summary>        /// <param name="tagSchemes">An array of tag schemes. See Linguistic Tag Schemes for the possible values.</param>        /// <param name="options">The linguistic tagger options to use. See NSLinguisticTaggerOptions for the constants. These constants can be combined using the C-Bitwise OR operator.</param>        [iOSVersion(5)]        public NSLinguisticTagger(AnyObject[] tagSchemes, int options) { }                /// <summary>        /// Returns the tag schemes supported by the linguistic tagger for a particular language.        /// </summary>        /// <param name="language">A standard abbreviation as with NSOrthography.</param>        [iOSVersion(5)]        [Export("availableTagSchemesForLanguage")]        public static AnyObject[] AvailableTagSchemesForLanguage(string language) { return default(AnyObject[]); }                /// <summary>        /// Notifies the linguistic tagger that the string (if mutable) has changed as specified by the parameters.        /// </summary>        /// <param name="newCharRange">The range in the final string that was edited.</param>        /// <param name="changeInLength">The change in length.</param>        [iOSVersion(5)]        [Export("stringEditedInRange")]        public virtual void StringEditedInRange(NSRange newCharRange, int changeInLength) {  }                /// <summary>        /// Sets the orthography for the specified range.        /// </summary>        /// <param name="orthography">The orthography.</param>        /// <param name="range">The range.</param>        [iOSVersion(5)]        [Export("setOrthography")]        public virtual void SetOrthography([Optional] NSOrthography orthography, NSRange range) {  }                /// <summary>        /// Returns the orthography at the index and also returns the effective range.        /// </summary>        /// <param name="charIndex">The character index to begin examination.</param>        /// <param name="effectiveRange">An NSRangePointer that, upon completion, contains the range of the orthography containing charIndex.</param>        [iOSVersion(5)]        [Export("orthographyAtIndex")]        [return:Optional]        public virtual NSOrthography OrthographyAtIndex(int charIndex, NSRangePointer effectiveRange) { return default(NSOrthography); }                /// <summary>        /// Enumerates the specific range of the string, providing the Block with the located tags.        /// </summary>        /// <param name="range">The range to analyze</param>        /// <param name="scheme">The tag scheme.</param>        /// <param name="options">The linguistic tagger options to use. See NSLinguisticTaggerOptions for the constants. These constants can be combined using the C Bitwise operator.</param>        /// <param name="usingBlock">The Block to apply to ranges of the string.        ///   The Block takes four arguments:        ///       tag        ///   The located linguistic tag.        ///       tokenRange        ///   The range of the linguistic tag.        ///       sentenceRange        ///   The range of the sentence in which the tag occurs.        ///       stop        ///   A reference to a Boolean value. The block can set the value to true to stop further processing of the set. The stop argument is an out-only argument. You should only ever set this Boolean to true within the Block.</param>        [iOSVersion(5)]        [Export("enumerateTagsInRange")]        public virtual void EnumerateTagsInRange(NSRange range, string scheme, NSLinguisticTaggerOptions options, Action<string, NSRange, NSRange, UnsafeMutablePointer<ObjCBool>> usingBlock) {  }                /// <summary>        /// Returns an array of possible tags for the given scheme at the specified range, supplying matching scores.        /// </summary>        /// <param name="charIndex">The initial character index.</param>        /// <param name="scheme">The tag scheme. See Linguistic Tag Schemes for the possible values.</param>        /// <param name="tokenRange">The token range.</param>        /// <param name="sentenceRange">The range of the sentence.</param>        /// <param name="scores">Returns by-reference an array of numeric scores (wrapped as NSValue objects) indicating the likelihood that the range matches the tag scheme.</param>        [iOSVersion(5)]        [Export("possibleTagsAtIndex")]        public virtual AnyObject[] PossibleTagsAtIndex(int charIndex, string scheme, NSRangePointer tokenRange, NSRangePointer sentenceRange, AutoreleasingUnsafeMutablePointer<NSArray> scores) { return default(AnyObject[]); }                /// <summary>        /// Returns a tag for a single scheme at the specified index.        /// </summary>        /// <param name="charIndex">The initial character index.</param>        /// <param name="scheme">The tag scheme. See Linguistic Tag Schemes for the possible values.</param>        /// <param name="tokenRange">A pointer to the token range. If NULL, no pointer range is returned.</param>        /// <param name="sentenceRange">A pointer to the range of the sentence.  If NULL, no pointer range is returned.</param>        [iOSVersion(5)]        [Export("tagAtIndex")]        [return:Optional]        public virtual string TagAtIndex(int charIndex, string scheme, NSRangePointer tokenRange, NSRangePointer sentenceRange) { return default(string); }                /// <summary>        /// Returns an array of linguistic tags and token ranges.        /// </summary>        /// <param name="range">The range from which to return tags.</param>        /// <param name="scheme">The tag scheme. See Linguistic Tag Schemes for the possible values.</param>        /// <param name="options">The linguistic tagger options to use. See NSLinguisticTaggerOptions for the constants. These constants can be combined using the C-Bitwise OR operator.</param>        /// <param name="tokenRanges">Returns by-reference an array of token range objects wrapped in NSValue objects.</param>        [iOSVersion(5)]        [Export("tagsInRange")]        public virtual AnyObject[] TagsInRange(NSRange range, string scheme, NSLinguisticTaggerOptions options, AutoreleasingUnsafeMutablePointer<NSArray> tokenRanges) { return default(AnyObject[]); }                /// <summary>        /// Returns the range of a sentence boundary containing the specified range.        /// </summary>        /// <param name="charRange">The range.</param>        [iOSVersion(5)]        [Export("sentenceRangeForRange")]        public virtual NSRange SentenceRangeForRange(NSRange charRange) { return default(NSRange); }                /// <summary>        /// The tag schemes configured for this linguistic tagger. (read-only)        /// </summary>        [iOSVersion(5)]        [Export("tagSchemes")]        public AnyObject[] TagSchemes { get; private set; }                /// <summary>        /// The string being analyzed by the linguistic tagger.        /// </summary>        [iOSVersion(5)]        [Export("string")]        [Optional]        public string String { get; set; }    }    /// <summary>    /// These constants specify the linguistic tagger options. They can be combined using the C-Bitwise OR operator.    /// </summary>    public enum NSLinguisticTaggerOptions    {        /// <summary>        /// Omit tokens of type NSLinguisticTagWord (items considered to be words).        /// </summary>        [iOSVersion(5)]        OmitWords,        /// <summary>        /// Omit tokens of type NSLinguisticTagPunctuation (all punctuation).        /// </summary>        [iOSVersion(5)]        OmitPunctuation,        /// <summary>        /// Omit tokens of type NSLinguisticTagWhitespace (whitespace of all sorts).        /// </summary>        [iOSVersion(5)]        OmitWhitespace,        /// <summary>        /// Omit tokens of type NSLinguisticTagOther (non-linguistic items such as symbols).        /// </summary>        [iOSVersion(5)]        OmitOther,        /// <summary>        /// Typically, multiple-word names will be returned as multiple tokens, following the standard tokenization practice of the tagger.  If this option is set, then multiple-word names will be joined together and returned as a single token.        /// </summary>        [iOSVersion(5)]        JoinNames,    }}