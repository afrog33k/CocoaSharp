using ObjectiveC;using System;using SharpSwift.Attributes;using System.Collections.Generic;namespace Foundation{    /// <summary>    /// An NSBundle object represents a location in the file system that groups code and resources that can be used in a program. NSBundle objects locate program resources, dynamically load and unload executable code, and assist in localization. You build a bundle in Xcode using one of these project types: Application, Framework, plug-ins.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSBundle_Class/index.html#//apple_ref/occ/cl/NSBundle"/>    [iOSVersion(2)]    [Export("")]    public class NSBundle : NSObject//, AnyObject, CVarArgType, Equatable, Hashable, NSObjectProtocol, Printable    {        public NSBundle() { }        /// <summary>        /// Returns the NSBundle object with which the specified class is associated.        /// </summary>        /// <param name="forClass">A class.</param>        [iOSVersion(2)]        public NSBundle(AnyClass forClass) { }                /// <summary>        /// Returns the NSBundle object that corresponds to the directory where the current application executable is located.        /// </summary>        [iOSVersion(2)]        [Export("mainBundle")]        public static NSBundle MainBundle() { return default(NSBundle); }                /// <summary>        /// Returns an array of all the application’s non-framework bundles.        /// </summary>        [iOSVersion(2)]        [Export("allBundles")]        public static AnyObject[] AllBundles() { return default(AnyObject[]); }                /// <summary>        /// Returns an array of all of the application’s bundles that represent frameworks.        /// </summary>        [iOSVersion(2)]        [Export("allFrameworks")]        public static AnyObject[] AllFrameworks() { return default(AnyObject[]); }                /// <summary>        /// Returns the Class object for the specified name.        /// </summary>        /// <param name="className">The name of a class.</param>        [iOSVersion(2)]        [Export("classNamed")]        [return:Optional]        public virtual AnyClass ClassNamed(string className) { return default(AnyClass); }                /// <summary>        /// Returns the file URL for the resource file identified by the specified name and extension and residing in a given bundle directory.        /// </summary>        /// <param name="name">The name of a resource file contained in the directory specified by bundleURL.</param>        /// <param name="withExtension">If extension is an empty string or nil, the extension is assumed not to exist and the file URL is the first file encountered that exactly matches name.</param>        /// <param name="subdirectory">The path of a top-level bundle directory. This must be a valid path. For example, to specify the bundle directory for a Mac app, you might specify the path /Applications/MyApp.app.</param>        [iOSVersion(4)]        [return:Optional]        public virtual NSURL URLForResource(string name, [Optional] string withExtension, [Optional] string subdirectory) { return default(NSURL); }                /// <summary>        /// Returns the full pathname for the resource file identified by the specified name and extension and residing in a given bundle directory.        /// </summary>        /// <param name="name">The name of a resource file contained in the directory specified by bundlePath.</param>        /// <param name="ofType">If extension is an empty string or nil, the extension is assumed not to exist and the file is the first file encountered that exactly matches name.</param>        /// <param name="inDirectory">The path of a top-level bundle directory. This must be a valid path. For example, to specify the bundle directory for a Mac app, you might specify the path /Applications/MyApp.app.</param>        [iOSVersion(2)]        [Export("pathForResource")]        [return:Optional]        public static string PathForResource([Optional] string name, [Optional] string ofType, string inDirectory) { return default(string); }                /// <summary>        /// Returns the file URL for the resource identified by the specified name and file extension.        /// </summary>        /// <param name="name">The name of the resource file.</param>        /// <param name="withExtension">If extension is an empty string or nil, the extension is assumed not to exist and the file URL is the first file encountered that exactly matches name.</param>        [iOSVersion(4)]        [return:Optional]        public virtual NSURL URLForResource(string name, [Optional] string withExtension) { return default(NSURL); }                /// <summary>        /// Returns the full pathname for the resource identified by the specified name and file extension.        /// </summary>        /// <param name="name">The name of the resource file. If name is an empty string or nil, returns the first file encountered of the supplied type.</param>        /// <param name="ofType">If extension is an empty string or nil, the extension is assumed not to exist and the file is the first file encountered that exactly matches name.</param>        [iOSVersion(2)]        [Export("pathForResource")]        [return:Optional]        public virtual string PathForResource([Optional] string name, [Optional] string ofType) { return default(string); }                /// <summary>        /// Returns an array of file URLs for all resources identified by the specified file extension and located in the specified bundle subdirectory.        /// </summary>        /// <param name="extension">The file extension of the files to locate.</param>        /// <param name="subdirectory">The name of the bundle subdirectory.</param>        [iOSVersion(4)]        public virtual AnyObject[] URLsForResourcesWithExtension([Optional] string extension, [Optional] string subdirectory) { return default(AnyObject[]); }                /// <summary>        /// Returns the full pathname for the resource identified by the specified name and file extension and located in the specified bundle subdirectory.        /// </summary>        /// <param name="name">The name of the resource file.</param>        /// <param name="ofType">If extension is an empty string or nil, all the files in subpath and its subdirectories are returned. If an extension is provided the subdirectories are not searched.</param>        /// <param name="inDirectory">The name of the bundle subdirectory. Can be nil.</param>        /// <param name="NAME_YOUR_PARAMS">DO NOT USE THIS PARAMETER - Instead make sure to name the parameters you're using.</param>        [iOSVersion(2)]        [Export("pathForResource")]        [return:Optional]        [IgnoreParameter("NAME_YOUR_PARAMS")]        public virtual string PathForResource([Optional] string name, [Optional] string ofType, [Optional] string inDirectory, bool NAME_YOUR_PARAMS = false) { return default(string); }                /// <summary>        /// Returns the file URL for the resource identified by the specified name and file extension, located in the specified bundle subdirectory, and limited to global resources and those associated with the specified localization.        /// </summary>        /// <param name="name">The name of the resource file.</param>        /// <param name="withExtension">If extension is an empty string or nil, the extension is assumed not to exist and the file URL is the first file encountered that exactly matches name.</param>        /// <param name="subdirectory">The name of the bundle subdirectory to search.</param>        /// <param name="localization">The language ID for the localization. This parameter should correspond to the name of one of the bundle&#39;s language-specific resource directories without the .lproj extension.</param>        [iOSVersion(4)]        [return:Optional]        public virtual NSURL URLForResource(string name, [Optional] string withExtension, [Optional] string subdirectory, [Optional] string localization) { return default(NSURL); }                /// <summary>        /// Returns the full pathname for the resource identified by the specified name and file extension, located in the specified bundle subdirectory, and limited to global resources and those associated with the specified localization.        /// </summary>        /// <param name="name">The name of the resource file.</param>        /// <param name="ofType">If extension is an empty string or nil, the extension is assumed not to exist and the file is the first file encountered that exactly matches name.</param>        /// <param name="inDirectory">The name of the bundle subdirectory to search.</param>        /// <param name="forLocalization">The language ID for of the localization. This parameter should correspond to the name of one of the bundle&#39;s language-specific resource directories without the .lproj extension.</param>        [iOSVersion(2)]        [Export("pathForResource")]        [return:Optional]        public virtual string PathForResource([Optional] string name, [Optional] string ofType, [Optional] string inDirectory, [Optional] string forLocalization) { return default(string); }                /// <summary>        /// Returns an array containing the pathnames for all bundle resources having the specified extension and residing in the bundle directory at the specified path.        /// </summary>        /// <param name="extension">The file extension. If extension is an empty string or nil, the extension is assumed not to exist, all the files in bundlePath are returned.</param>        /// <param name="inDirectory">The top-level directory of a bundle. This must represent a valid path.</param>        [iOSVersion(2)]        [Export("pathsForResourcesOfType")]        public static AnyObject[] PathsForResourcesOfType([Optional] string extension, string inDirectory) { return default(AnyObject[]); }                /// <summary>        /// Returns an array containing the pathnames for all bundle resources having the specified filename extension and residing in the resource subdirectory.        /// </summary>        /// <param name="extension">The file extension. If extension is an empty string or nil, the extension is assumed not to exist, all the files in subpath are returned.</param>        /// <param name="inDirectory">The name of the bundle subdirectory to search.</param>        /// <param name="NAME_YOUR_PARAMS">DO NOT USE THIS PARAMETER - Instead make sure to name the parameters you're using.</param>        [iOSVersion(2)]        [Export("pathsForResourcesOfType")]        [IgnoreParameter("NAME_YOUR_PARAMS")]        public virtual AnyObject[] PathsForResourcesOfType([Optional] string extension, [Optional] string inDirectory, bool NAME_YOUR_PARAMS = false) { return default(AnyObject[]); }                /// <summary>        /// Returns an array containing the file URLs for all bundle resources having the specified filename extension, residing in the specified resource subdirectory, and limited to global resources and those associated with the specified localization.        /// </summary>        /// <param name="extension">The file extension of the files to locate.</param>        /// <param name="subdirectory">The name of the bundle subdirectory to search.</param>        /// <param name="localization">The language ID for the localization. This parameter should correspond to the name of one of the bundle&#39;s language-specific resource directories without the .lproj extension.</param>        [iOSVersion(4)]        public virtual AnyObject[] URLsForResourcesWithExtension([Optional] string extension, [Optional] string subdirectory, [Optional] string localization) { return default(AnyObject[]); }                /// <summary>        /// Returns an array containing the file for all bundle resources having the specified filename extension, residing in the specified resource subdirectory, and limited to global resources and those associated with the specified localization.        /// </summary>        /// <param name="extension">The file extension of the files to retrieve.</param>        /// <param name="inDirectory">The name of the bundle subdirectory to search.</param>        /// <param name="forLocalization">The language ID for the localization. This parameter should correspond to the name of one of the bundle&#39;s language-specific resource directories without the .lproj extension.</param>        [iOSVersion(2)]        [Export("pathsForResourcesOfType")]        public virtual AnyObject[] PathsForResourcesOfType([Optional] string extension, [Optional] string inDirectory, [Optional] string forLocalization) { return default(AnyObject[]); }                /// <summary>        /// Creates and returns a file URL for the resource with the specified name and extension in the specified bundle.        /// </summary>        /// <param name="name">The name of the resource file.</param>        /// <param name="withExtension">If extension is an empty string or nil, the extension is assumed not to exist and the file URL is the first file encountered that exactly matches name.</param>        /// <param name="subdirectory">The name of the bundle subdirectory to search.</param>        /// <param name="inBundleWithURL">The file URL of the bundle to search.</param>        [iOSVersion(4)]        [return:Optional]        public static NSURL URLForResource(string name, [Optional] string withExtension, [Optional] string subdirectory, NSURL inBundleWithURL) { return default(NSURL); }                /// <summary>        /// Returns an array containing the file URLs for all bundle resources having the specified filename extension, residing in the specified resource subdirectory, within the specified bundle.        /// </summary>        /// <param name="extension">The file extension of the files to locate.</param>        /// <param name="subdirectory">The name of the bundle subdirectory to search.</param>        /// <param name="inBundleWithURL">The file URL of the bundle to search.</param>        [iOSVersion(4)]        public static AnyObject[] URLsForResourcesWithExtension([Optional] string extension, [Optional] string subdirectory, NSURL inBundleWithURL) { return default(AnyObject[]); }                /// <summary>        /// Returns the value associated with the specified key in the receiver&#39;s information property list.        /// </summary>        /// <param name="key">A key in the receiver&#39;s property list.</param>        [iOSVersion(2)]        [Export("objectForInfoDictionaryKey")]        [return:Optional]        public virtual AnyObject ObjectForInfoDictionaryKey(string key) { return default(AnyObject); }                /// <summary>        /// Returns the file URL of the executable with the specified name in the receiver’s bundle.        /// </summary>        /// <param name="executableName">The name of an executable file.</param>        [iOSVersion(4)]        [return:Optional]        public virtual NSURL URLForAuxiliaryExecutable(string executableName) { return default(NSURL); }                /// <summary>        /// Returns the full pathname of the executable with the specified name in the receiver’s bundle.        /// </summary>        /// <param name="executableName">The name of an executable file.</param>        [iOSVersion(2)]        [Export("pathForAuxiliaryExecutable")]        [return:Optional]        public virtual string PathForAuxiliaryExecutable(string executableName) { return default(string); }                /// <summary>        /// Returns a localized version of the string designated by the specified key and residing in the specified table.        /// </summary>        /// <param name="key">The key for a string in the table identified by tableName.</param>        /// <param name="value">The value to return if key is nil or if a localized string for key can’t be found in the table.</param>        /// <param name="table">The receiver’s string table to search. If tableName is nil or is an empty string, the method attempts to use the table in Localizable.strings.</param>        [iOSVersion(2)]        [Export("localizedStringForKey")]        public virtual string LocalizedStringForKey(string key, [Optional] string value, [Optional] string table) { return default(string); }                /// <summary>        /// Returns a Boolean value indicating whether the bundle’s executable code could be loaded successfully.        /// </summary>        /// <param name="error">On input, a pointer to an error object variable. On output, this variable may contain an error object indicating why the bundle’s executable could not be loaded. If no error would occur, this parameter is left unmodified. You may specify nil for this parameter if you are not interested in the error information.</param>        [iOSVersion(2)]        [Export("preflightAndReturnError")]        public virtual bool PreflightAndReturnError(NSErrorPointer error) { return default(bool); }                /// <summary>        /// Dynamically loads the bundle’s executable code into a running program, if the code has not already been loaded.        /// </summary>        [iOSVersion(2)]        [Export("load")]        public virtual bool Load() { return default(bool); }                /// <summary>        /// Loads the bundle’s executable code and returns any errors.        /// </summary>        /// <param name="error">On input, a pointer to an error object variable. On output, this variable may contain an error object indicating why the bundle’s executable could not be loaded. If no error occurred, this parameter is left unmodified. You may specify nil for this parameter if you are not interested in the error information.</param>        [iOSVersion(2)]        [Export("loadAndReturnError")]        public virtual bool LoadAndReturnError(NSErrorPointer error) { return default(bool); }                /// <summary>        /// Unloads the code associated with the receiver.        /// </summary>        [iOSVersion(2)]        [Export("unload")]        public virtual bool Unload() { return default(bool); }                /// <summary>        /// Returns one or more localizations from the specified list that a bundle object would use to locate resources for the current user.        /// </summary>        /// <param name="localizationsArray">An array of NSString objects, each of which specifies the language ID for a localization that the bundle supports.</param>        [iOSVersion(2)]        [Export("preferredLocalizationsFromArray")]        public static AnyObject[] PreferredLocalizationsFromArray(AnyObject[] localizationsArray) { return default(AnyObject[]); }                /// <summary>        /// Returns the localizations that a bundle object would prefer, given the specified bundle and user’s language preferences.        /// </summary>        /// <param name="localizationsArray">An array of NSString objects, each of which specifies the language ID for a localization that the bundle supports.</param>        /// <param name="forPreferences">An array of NSString objects containing the user&#39;s preferred localizations. If this parameter is nil, the method uses the user&#39;s localization preferences.</param>        [iOSVersion(2)]        [Export("preferredLocalizationsFromArray")]        public static AnyObject[] PreferredLocalizationsFromArray(AnyObject[] localizationsArray, AnyObject[] forPreferences) { return default(AnyObject[]); }                /// <summary>        /// The bundle’s principal class. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("principalClass")]        [Optional]        public AnyClass PrincipalClass { get; private set; }                /// <summary>        /// The full pathname of the bundle’s subdirectory containing resources. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("resourcePath")]        [Optional]        public string ResourcePath { get; private set; }                /// <summary>        /// The file URL for the bundle’s App Store receipt. (read-only)        /// </summary>        [iOSVersion(7)]        [Export("appStoreReceiptURL")]        [Optional]        public NSURL AppStoreReceiptURL { get; private set; }                /// <summary>        /// The full URL of the receiver’s bundle directory. (read-only)        /// </summary>        [iOSVersion(4)]        [Export("bundleURL")]        public NSURL BundleURL { get; private set; }                /// <summary>        /// The full pathname of the receiver’s bundle directory. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("bundlePath")]        public string BundlePath { get; private set; }                /// <summary>        /// The receiver’s bundle identifier. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("bundleIdentifier")]        [Optional]        public string BundleIdentifier { get; private set; }                /// <summary>        /// A dictionary, constructed from the bundle&#39;s Info.plist file, that contains information about the receiver. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("infoDictionary")]        public Dictionary<NSObject, AnyObject> InfoDictionary { get; private set; }                /// <summary>        /// The file URL of the receiver&#39;s subdirectory containing plug-ins. (read-only)        /// </summary>        [iOSVersion(4)]        [Export("builtInPlugInsURL")]        [Optional]        public NSURL BuiltInPlugInsURL { get; private set; }                /// <summary>        /// The full pathname of the receiver&#39;s subdirectory containing plug-ins. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("builtInPlugInsPath")]        [Optional]        public string BuiltInPlugInsPath { get; private set; }                /// <summary>        /// The file URL of the receiver&#39;s executable file. (read-only)        /// </summary>        [iOSVersion(4)]        [Export("executableURL")]        [Optional]        public NSURL ExecutableURL { get; private set; }                /// <summary>        /// The full pathname of the receiver&#39;s executable file. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("executablePath")]        [Optional]        public string ExecutablePath { get; private set; }                /// <summary>        /// The file URL of the bundle’s subdirectory containing private frameworks. (read-only)        /// </summary>        [iOSVersion(4)]        [Export("privateFrameworksURL")]        [Optional]        public NSURL PrivateFrameworksURL { get; private set; }                /// <summary>        /// The full pathname of the bundle’s subdirectory containing private frameworks. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("privateFrameworksPath")]        [Optional]        public string PrivateFrameworksPath { get; private set; }                /// <summary>        /// The file URL of the receiver&#39;s subdirectory containing shared frameworks. (read-only)        /// </summary>        [iOSVersion(4)]        [Export("sharedFrameworksURL")]        [Optional]        public NSURL SharedFrameworksURL { get; private set; }                /// <summary>        /// The full pathname of the bundle’s subdirectory containing shared frameworks. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("sharedFrameworksPath")]        [Optional]        public string SharedFrameworksPath { get; private set; }                /// <summary>        /// The file URL of the bundle’s subdirectory containing shared support files. (read-only)        /// </summary>        [iOSVersion(4)]        [Export("sharedSupportURL")]        [Optional]        public NSURL SharedSupportURL { get; private set; }                /// <summary>        /// The full pathname of the bundle’s subdirectory containing shared support files. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("sharedSupportPath")]        [Optional]        public string SharedSupportPath { get; private set; }                /// <summary>        /// The file URL of the bundle’s subdirectory containing resource files. (read-only)        /// </summary>        [iOSVersion(4)]        [Export("resourceURL")]        [Optional]        public NSURL ResourceURL { get; private set; }                /// <summary>        /// An array of numbers indicating the architecture types supported by the bundle’s executable. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("executableArchitectures")]        public AnyObject[] ExecutableArchitectures { get; private set; }                /// <summary>        /// The load status of a bundle.        /// </summary>        [iOSVersion(8)]        [Export("loaded")]        public bool Loaded { get; private set; }                /// <summary>        /// An ordered list of preferred localizations contained in the bundle. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("preferredLocalizations")]        public AnyObject[] PreferredLocalizations { get; private set; }                /// <summary>        /// The localization for the development language. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("developmentLocalization")]        [Optional]        public string DevelopmentLocalization { get; private set; }                /// <summary>        /// A list of all the localizations contained in the bundle. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("localizations")]        public AnyObject[] Localizations { get; private set; }                /// <summary>        /// A dictionary with the keys from the bundle’s localized property list. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("localizedInfoDictionary")]        public Dictionary<NSObject, AnyObject> LocalizedInfoDictionary { get; private set; }                /// <summary>        /// These constants describe the CPU types that a bundle’s executable code may support.        /// </summary>        public int NSBundleExecutableArchitectureI386 { get; private set; }    }    /// <summary>    /// NSBundle posts NSBundleDidLoadNotification to notify observers which classes and categories have been dynamically loaded. When a request is made to an NSBundle object for a class (classNamed: or principalClass), the bundle dynamically loads the executable code file that contains the class implementation and all other class definitions contained in the file. After the module is loaded, the bundle posts the NSBundleDidLoadNotification.    ///   The notification object is the NSBundle instance that dynamically loads classes. The userInfo dictionary contains an NSLoadedClasses key.    ///   In a typical use of this notification, an object might want to enumerate the userInfo array to check if each loaded class conformed to a certain protocol (say, an protocol for a plug-and-play tool set); if a class does conform, the object would create an instance of that class and add the instance to another NSArray object.    /// </summary>    public class NSBundleDidLoadNotification : NSNotification    {        public NSBundleDidLoadNotification() : base("", null) { }    }}