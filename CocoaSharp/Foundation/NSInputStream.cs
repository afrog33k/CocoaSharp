using ObjectiveC;using System;using SharpSwift.Attributes;using System.Collections.Generic;namespace Foundation{    /// <summary>    /// NSInputStream is a subclass of NSStream that provides read-only stream functionality.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSInputStream_Class/index.html#//apple_ref/occ/cl/NSInputStream"/>    [iOSVersion(2)]    [Export("")]    public class NSInputStream : NSStream//, AnyObject, CVarArgType, Equatable, Hashable, NSObjectProtocol, Printable    {        public NSInputStream() { }        /// <summary>        /// Initializes and returns an NSInputStream object for reading from a given NSData object.        /// </summary>        /// <param name="data">The data object from which to read. The contents of data are copied.</param>        [iOSVersion(2)]        public NSInputStream(NSData data) { }                /// <summary>        /// Reads up to a given number of bytes into a given buffer.        /// </summary>        /// <param name="buffer">A data buffer. The buffer must be large enough to contain the number of bytes specified by len.</param>        /// <param name="maxLength">The maximum number of bytes to read.</param>        [iOSVersion(2)]        [Export("read")]        public virtual int Read(UnsafeMutablePointer<UInt8> buffer, int maxLength) { return default(int); }                /// <summary>        /// Returns by reference a pointer to a read buffer and, by reference, the number of bytes available, and returns a Boolean value that indicates whether the buffer is available.        /// </summary>        /// <param name="buffer">Upon return, contains a pointer to a read buffer. The buffer is only valid until the next stream operation is performed.</param>        /// <param name="length">Upon return, contains the number of bytes available.</param>        [iOSVersion(2)]        [Export("getBuffer")]        public virtual bool GetBuffer(UnsafeMutablePointer<UnsafeMutablePointer<UInt8>> buffer, UnsafeMutablePointer<int> length) { return default(bool); }                /// <summary>        /// A Boolean value that indicates whether the receiver has bytes available to read. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("hasBytesAvailable")]        public bool HasBytesAvailable { get; private set; }    }}