using ObjectiveC;using System;using SwiftSharp.Attributes;namespace Foundation{	//https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSCharacterSet_Class/index.html#//apple_ref/occ/cl/NSCharacterSet	/// <summary>	/// An NSCharacterSet object represents a set of Unicode-compliant characters. NSString and NSScanner objects use NSCharacterSet objects to group characters together for searching operations, so that they can find any of a particular set of characters during a search. The cluster’s two public classes, NSCharacterSet and NSMutableCharacterSet, declare the programmatic interface for static and dynamic character sets, respectively.	/// </summary>	[iOSVersion(2)]	public class NSCharacterSet : NSObject	{		/// <summary>		/// Returns a character set containing the characters in the categories Letters, Marks, and Numbers.		/// </summary>		/// <returns>A character set containing the characters in the categories Letters, Marks, and Numbers.</returns>		[iOSVersion(2)]		[Export("alphanumericCharacterSet")]		public static NSCharacterSet AlphanumericCharacterSet() { return null; }				/// <summary>		/// Returns a character set containing the characters in the category of Titlecase Letters.		/// </summary>		/// <returns>A character set containing the characters in the category of Titlecase Letters.</returns>		[iOSVersion(2)]		[Export("capitalizedLetterCharacterSet")]		public static NSCharacterSet CapitalizedLetterCharacterSet() { return null; }				/// <summary>		/// Returns a character set containing the characters in the categories of Control or Format Characters.		/// </summary>		/// <returns>A character set containing the characters in the categories of Control or Format Characters.</returns>		[iOSVersion(2)]		[Export("controlCharacterSet")]		public static NSCharacterSet ControlCharacterSet() { return null; }				/// <summary>		/// Returns a character set containing the characters in the category of Decimal Numbers.		/// </summary>		/// <returns>A character set containing the characters in the category of Decimal Numbers.</returns>		[iOSVersion(2)]		[Export("decimalDigitCharacterSet")]		public static NSCharacterSet DecimalDigitCharacterSet() { return null; }				/// <summary>		/// Returns a character set containing all individual Unicode characters that can also be represented as composed character sequences.		/// </summary>		/// <returns>A character set containing all individual Unicode characters that can also be represented as composed character sequences (such as for letters with accents), by the definition of “standard decomposition” in version 3.2 of the Unicode character encoding standard.</returns>		[iOSVersion(2)]		[Export("decomposableCharacterSet")]		public static NSCharacterSet DecomposableCharacterSet() { return null; }				/// <summary>		/// Returns a character set containing values in the category of Non-Characters or that have not yet been defined in version 3.2 of the Unicode standard.		/// </summary>		/// <returns>A character set containing values in the category of Non-Characters or that have not yet been defined in version 3.2 of the Unicode standard.</returns>		[iOSVersion(2)]		[Export("illegalCharacterSet")]		public static NSCharacterSet IllegalCharacterSet() { return null; }				/// <summary>		/// Returns a character set containing the characters in the categories Letters and Marks.		/// </summary>		/// <returns>A character set containing the characters in the categories Letters and Marks.</returns>		[iOSVersion(2)]		[Export("letterCharacterSet")]		public static NSCharacterSet LetterCharacterSet() { return null; }				/// <summary>		/// Returns a character set containing the characters in the category of Lowercase Letters.		/// </summary>		/// <returns>A character set containing the characters in the category of Lowercase Letters.</returns>		[iOSVersion(2)]		[Export("lowercaseLetterCharacterSet")]		public static NSCharacterSet LowercaseLetterCharacterSet() { return null; }				/// <summary>		/// Returns a character set containing the newline characters.		/// </summary>		/// <returns>A character set containing the newline characters (U+000A–U+000D, U+0085).</returns>		[iOSVersion(2)]		[Export("newlineCharacterSet")]		public static NSCharacterSet NewlineCharacterSet() { return null; }				/// <summary>		/// Returns a character set containing the characters in the category of Marks.		/// </summary>		/// <returns>A character set containing the characters in the category of Marks.</returns>		[iOSVersion(2)]		[Export("nonBaseCharacterSet")]		public static NSCharacterSet NonBaseCharacterSet() { return null; }				/// <summary>		/// Returns a character set containing the characters in the category of Punctuation.		/// </summary>		/// <returns>A character set containing the characters in the category of Punctuation.</returns>		[iOSVersion(2)]		[Export("punctuationCharacterSet")]		public static NSCharacterSet PunctuationCharacterSet() { return null; }				/// <summary>		/// Returns a character set containing the characters in the category of Symbols.		/// </summary>		/// <returns>A character set containing the characters in the category of Symbols.</returns>		[iOSVersion(2)]		[Export("symbolCharacterSet")]		public static NSCharacterSet SymbolCharacterSet() { return null; }				/// <summary>		/// Returns a character set containing the characters in the categories of Uppercase Letters and Titlecase Letters.		/// </summary>		/// <returns>A character set containing the characters in the categories of Uppercase Letters and Titlecase Letters.</returns>		[iOSVersion(2)]		[Export("uppercaseLetterCharacterSet")]		public static NSCharacterSet UppercaseLetterCharacterSet() { return null; }				/// <summary>		/// Returns a character set containing Unicode General Category Z*, U000A ~ U000D, and U0085.		/// </summary>		/// <returns>A character set containing Unicode General Category Z*, U000A ~ U000D, and U0085.</returns>		[iOSVersion(2)]		[Export("whitespaceAndNewlineCharacterSet")]		public static NSCharacterSet WhitespaceAndNewlineCharacterSet() { return null; }				/// <summary>		/// Returns a character set containing only the in-line whitespace characters space (U+0020) and tab (U+0009).		/// </summary>		/// <returns>A character set containing only the in-line whitespace characters space (U+0020) and tab (U+0009).</returns>		[iOSVersion(2)]		[Export("whitespaceCharacterSet")]		public static NSCharacterSet WhitespaceCharacterSet() { return null; }				/// <summary>		/// Returns the character set for characters allowed in a fragment URL component.		/// </summary>		[iOSVersion(7)]		[Export("URLFragmentAllowedCharacterSet")]		public static NSCharacterSet URLFragmentAllowedCharacterSet() { return null; }				/// <summary>		/// Returns the character set for characters allowed in a host URL subcomponent.		/// </summary>		[iOSVersion(7)]		[Export("URLHostAllowedCharacterSet")]		public static NSCharacterSet URLHostAllowedCharacterSet() { return null; }				/// <summary>		/// Returns the character set for characters allowed in a password URL subcomponent.		/// </summary>		[iOSVersion(7)]		[Export("URLPasswordAllowedCharacterSet")]		public static NSCharacterSet URLPasswordAllowedCharacterSet() { return null; }				/// <summary>		/// Returns the character set for characters allowed in a path URL component.		/// </summary>		[iOSVersion(7)]		[Export("URLPathAllowedCharacterSet")]		public static NSCharacterSet URLPathAllowedCharacterSet() { return null; }				/// <summary>		/// Returns the character set for characters allowed in a query URL component.		/// </summary>		[iOSVersion(7)]		[Export("URLQueryAllowedCharacterSet")]		public static NSCharacterSet URLQueryAllowedCharacterSet() { return null; }				/// <summary>		/// Returns the character set for characters allowed in a user URL subcomponent.		/// </summary>		[iOSVersion(7)]		[Export("URLUserAllowedCharacterSet")]		public static NSCharacterSet URLUserAllowedCharacterSet() { return null; }				/// <summary>		/// Returns a character set containing the characters in a given string.		/// </summary>		/// <param name="charactersInString">A string containing characters for the new character set.</param>		/// <returns>A character set containing the characters in aString. Returns an empty character set if aString is empty.</returns>		[iOSVersion(2)]		public NSCharacterSet Init(string charactersInString) { }				/// <summary>		/// Returns a character set containing characters with Unicode values in a given range.		/// </summary>		/// <param name="range">A range of Unicode values.   aRange.location is the value of the first character to return; aRange.location + aRange.length– 1 is the value of the last.</param>		/// <returns>A character set containing characters whose Unicode values are given by aRange. If aRange.length is 0, returns an empty character set.</returns>		[iOSVersion(2)]		public NSCharacterSet Init(NSRange range) { }				/// <summary>		/// Returns a character set containing only characters that don’t exist in the receiver.		/// </summary>		/// <returns>A character set containing only characters that don’t exist in the receiver.</returns>		[iOSVersion(2)]		[Export("invertedSet")]		public NSCharacterSet InvertedSet { get; private set; }				/// <summary>		/// Returns a character set containing characters determined by a given bitmap representation.		/// </summary>		/// <param name="bitmapRepresentation">A bitmap representation of a character set.</param>		/// <returns>A character set containing characters determined by data.</returns>		[iOSVersion(2)]		public NSCharacterSet Init(NSData bitmapRepresentation) { }				/// <summary>		/// Returns a character set read from the bitmap representation stored in the file a given path.		/// </summary>		/// <param name="contentsOfFile">A path to a file containing a bitmap representation of a character set. The path name must end with the extension .bitmap.</param>		/// <returns>A character set read from the bitmap representation stored in the file at path.</returns>		[iOSVersion(2)]		public NSCharacterSet Init(string contentsOfFile) { }				/// <summary>		/// Returns an NSData object encoding the receiver in binary format.		/// </summary>		/// <returns>An NSData object encoding the receiver in binary format.</returns>		[iOSVersion(2)]		[Export("bitmapRepresentation")]		public NSData BitmapRepresentation { get; private set; }				/// <summary>		/// Returns a Boolean value that indicates whether a given character is in the receiver.		/// </summary>		/// <param name="aCharacter">The character to test for membership of the receiver.</param>		/// <returns>true if aCharacter is in the receiving character set, otherwise false.</returns>		[iOSVersion(2)]		[Export("characterIsMember")]		public bool CharacterIsMember(unichar aCharacter) { return false; }				/// <summary>		/// Returns a Boolean value that indicates whether the receiver has at least one member in a given character plane.		/// </summary>		/// <param name="thePlane">A character plane.</param>		/// <returns>true if the receiver has at least one member in thePlane, otherwise false.</returns>		[iOSVersion(2)]		[Export("hasMemberInPlane")]		public bool HasMemberInPlane(Uint8 thePlane) { return false; }				/// <summary>		/// Returns a Boolean value that indicates whether the receiver is a superset of another given character set.		/// </summary>		/// <param name="theOtherSet">A character set.</param>		/// <returns>true if the receiver is a superset of theOtherSet, otherwise false.</returns>		[iOSVersion(2)]		[Export("isSupersetOfSet")]		public bool IsSupersetOfSet(NSCharacterSet theOtherSet) { return false; }				/// <summary>		/// Returns a Boolean value that indicates whether a given long character is a member of the receiver.		/// </summary>		/// <param name="theLongChar">A UTF32 character.</param>		/// <returns>true if theLongChar is in the receiver, otherwise false.</returns>		[iOSVersion(2)]		[Export("longCharacterIsMember")]		public bool LongCharacterIsMember(UTF32Char theLongChar) { return false; }				/// <summary>		/// Specifies lower bound for a Unicode character range reserved for Apple’s corporate use.		/// </summary>		[Export("NSOpenStepUnicodeReservedBase")]		public int NSOpenStepUnicodeReservedBase { get; private set; }	}}