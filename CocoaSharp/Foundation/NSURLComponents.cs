using ObjectiveC;using System;using SharpSwift.Attributes;using System.Collections.Generic;namespace Foundation{    /// <summary>    /// The NSURLComponents class is a class that is designed to parse URLs based on RFC 3986 and to construct URLs from their constituent parts. Its behavior differs subtly from the NSURL class, which conforms to older RFCs. However, you can easily obtain an NSURL object based on the contents of a URL components object or vice versa.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/Foundation/Reference/NSURLComponents_class/index.html#//apple_ref/occ/cl/NSURLComponents"/>    [iOSVersion(7)]    public class NSURLComponents : NSObject//, AnyObject, NSCopying, NSObjectProtocol    {        /// <summary>        /// Returns a URL components object by parsing a URL in string form.        /// </summary>        /// <param name="URLString">The URL string to parse.</param>        [iOSVersion(7)]        [Export("componentsWithString")]        public static NSURLComponents ComponentsWithString(string URLString) { return default(NSURLComponents); }                /// <summary>        /// Returns a URL components object by parsing the URL from an NSURL object.        /// </summary>        /// <param name="url">The URL to parse.</param>        /// <param name="resolvingAgainstBaseURL">Controls whether the URL should be resolved against its base URL before parsing. If true, and if the url parameter contains a relative URL, the original URL is resolved against its base URL before parsing by calling the absoluteURL method. Otherwise, the string portion is used by itself.</param>        [iOSVersion(7)]        [Export("componentsWithURL")]        public static NSURLComponents ComponentsWithURL(NSURL url, bool resolvingAgainstBaseURL) { return default(NSURLComponents); }                /// <summary>        /// Initializes a URL components object with nil for every component.        /// </summary>        [iOSVersion(7)]        public NSURLComponents() { }                /// <summary>        /// Initializes a URL components object by parsing a URL in string form.        /// </summary>        /// <param name="@string">The URL string to parse.</param>        [iOSVersion(7)]        public NSURLComponents(string @string) { }                /// <summary>        /// Initializes a URL components object by parsing the URL from an NSURL object.        /// </summary>        /// <param name="URL">The URL to parse.</param>        /// <param name="resolvingAgainstBaseURL">Controls whether the URL should be resolved against its base URL before parsing. If true, and if the url parameter contains a relative URL, the original URL is resolved against its base URL before parsing by calling the absoluteURL method. Otherwise, the string portion is used by itself.</param>        [iOSVersion(7)]        public NSURLComponents(NSURL URL, bool resolvingAgainstBaseURL) { }                /// <summary>        /// Returns a URL object derived from the components object.        /// </summary>        /// <param name="baseURL">If non-nil, this URL is used as the base URL portion of the resulting URL object.</param>        [iOSVersion(7)]        public NSURL URLRelativeToURL(NSURL baseURL) { return default(NSURL); }                /// <summary>        /// A URL derived from the components object, in string form. (read-only)        /// </summary>        [iOSVersion(8)]        [Export("string")]        public string String { get; private set; }                /// <summary>        /// A URL object derived from the components object. (read-only)        /// </summary>        [iOSVersion(7)]        public NSURL URL { get; private set; }                /// <summary>        /// The fragment URL component (the part after a # symbol), or nil if not present.        /// </summary>        [iOSVersion(7)]        [Export("fragment")]        public string Fragment { get; set; }                /// <summary>        /// The host URL subcomponent, or nil if not present.        /// </summary>        [iOSVersion(7)]        [Export("host")]        public string Host { get; set; }                /// <summary>        /// The password URL subcomponent, or nil if not present.        /// </summary>        [iOSVersion(7)]        [Export("password")]        public string Password { get; set; }                /// <summary>        /// The path URL component, or nil if not present.        /// </summary>        [iOSVersion(7)]        [Export("path")]        public string Path { get; set; }                /// <summary>        /// The port number URL component, or nil if not present.        /// </summary>        [iOSVersion(7)]        [Export("port")]        public NSNumber Port { get; set; }                /// <summary>        /// The query URL component, or nil if not present.        /// </summary>        [iOSVersion(7)]        [Export("query")]        public string Query { get; set; }                /// <summary>        /// The scheme URL component, or nil if not present.        /// </summary>        [iOSVersion(7)]        [Export("scheme")]        public string Scheme { get; set; }                /// <summary>        /// The username URL subcomponent, or nil if not present.        /// </summary>        [iOSVersion(7)]        [Export("user")]        public string User { get; set; }                /// <summary>        /// The fragment URL component (the part after a # symbol) expressed as a URL-encoded string, or nil if not present.        /// </summary>        [iOSVersion(7)]        [Export("percentEncodedFragment")]        public string PercentEncodedFragment { get; set; }                /// <summary>        /// The host URL subcomponent expressed as a URL-encoded string, or nil if not present.        /// </summary>        [iOSVersion(7)]        [Export("percentEncodedHost")]        public string PercentEncodedHost { get; set; }                /// <summary>        /// The password URL subcomponent expressed as a URL-encoded string, or nil if not present.        /// </summary>        [iOSVersion(7)]        [Export("percentEncodedPassword")]        public string PercentEncodedPassword { get; set; }                /// <summary>        /// The path URL component expressed as a URL-encoded string, or nil if not present.        /// </summary>        [iOSVersion(7)]        [Export("percentEncodedPath")]        public string PercentEncodedPath { get; set; }                /// <summary>        /// The query URL component expressed as a URL-encoded string, or nil if not present.        /// </summary>        [iOSVersion(7)]        [Export("percentEncodedQuery")]        public string PercentEncodedQuery { get; set; }                /// <summary>        /// The username URL subcomponent expressed as a URL-encoded string, or nil if not present.        /// </summary>        [iOSVersion(7)]        [Export("percentEncodedUser")]        public string PercentEncodedUser { get; set; }    }}