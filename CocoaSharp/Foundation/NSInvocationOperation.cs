using ObjectiveC;using System;using SwiftSharp.Attributes;namespace Foundation{	//https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/NSInvocationOperation_Class/index.html#//apple_ref/occ/cl/NSInvocationOperation	/// <summary>	/// The NSInvocationOperation class is a concrete subclass of NSOperation that manages the execution of a single encapsulated task specified as an invocation. You can use this class to initiate an operation that consists of invoking a selector on a specified object. This class implements a non-concurrent operation.	/// </summary>	[iOSVersion(2)]	public class NSInvocationOperation : NSOperation	{		/// <summary>		/// Returns an NSInvocationOperation object initialized with the specified target and selector.		/// </summary>		/// <param name="target">The object defining the specified selector.</param>		/// <param name="selector">The selector to invoke when running the operation. The selector may take 0 or 1 parameters; if it accepts a parameter, the type of that parameter must be id. The return type of the method may be void, a scalar value, or an object that can be returned as an id type.</param>		/// <param name="object">The parameter object to pass to the selector. If the selector does not take an argument, specify nil.</param>		/// <returns>An initialized NSInvocationOperation object or nil if the target object does not implement the specified selector.</returns>		[iOSVersion(2)]		public NSInvocationOperation(AnyObject target, Selector selector, AnyObject @object) { }				/// <summary>		/// Returns an NSInvocationOperation object initialized with the specified invocation object.		/// </summary>		/// <param name="invocation">The invocation object identifying the target object, selector, and parameter objects.</param>		/// <returns>An initialized NSInvocationOperation object or nil if the object could not be initialized.</returns>		[iOSVersion(2)]		public NSInvocationOperation(NSInvocation invocation) { }				/// <summary>		/// Returns the receiver’s invocation object.		/// </summary>		/// <returns>The invocation object identifying the target object, selector, and parameters to use to execute the operation’s task.</returns>		[iOSVersion(2)]		[Export("invocation")]		public NSInvocation Invocation { get; private set; }				/// <summary>		/// Returns the result of the invocation or method.		/// </summary>		/// <returns>The object returned by the method or an NSValue object containing the return value if it is not an object. If the method or invocation is not finished executing, this method returns nil.</returns>		[iOSVersion(2)]		[Export("result")]		public AnyObject Result { get; private set; }				/// <summary>		/// Names of exceptions raised by NSInvocationOperation if there is an error when calling the result method.		/// </summary>				/// <summary>		/// The name of the exception raised if the result method is called for an invocation method with a void return type.		/// </summary>		[iOSVersion(2)]		public string NSInvocationOperationVoidResultException { get; private set; }				/// <summary>		/// The name of the exception raised if the result method is called after the operation was cancelled.		/// </summary>		[iOSVersion(2)]		public string NSInvocationOperationCancelledException { get; private set; }	}}