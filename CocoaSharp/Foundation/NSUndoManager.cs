using ObjectiveC;using System;using SharpSwift.Attributes;using System.Collections.Generic;namespace Foundation{    /// <summary>    /// NSUndoManager is a general-purpose recorder of operations for undo and redo.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSUndoManager_Class/index.html#//apple_ref/occ/cl/NSUndoManager"/>    [iOSVersion(3)]    [Export("")]    public class NSUndoManager : NSObject//, AnyObject, CVarArgType, Equatable, Hashable, NSObjectProtocol, Printable    {        public NSUndoManager() { }        /// <summary>        /// Records a single undo operation for a given target, so that when an undo is performed it is sent a specified selector with a given object as the sole argument.        /// </summary>        /// <param name="target">The target of the undo operation.</param>        /// <param name="selector">The selector for the undo operation.</param>        /// <param name="@object">The argument sent with the selector.</param>        [iOSVersion(3)]        [Export("registerUndoWithTarget")]        public virtual void RegisterUndoWithTarget(AnyObject target, Selector selector, [Optional] AnyObject @object) {  }                /// <summary>        /// Prepares the receiver for invocation-based undo with the given target as the subject of the next undo operation and returns self.        /// </summary>        /// <param name="target">The target of the undo operation. The undo manager maintains a weak reference to the target.</param>        [iOSVersion(3)]        [Export("prepareWithInvocationTarget")]        public virtual AnyObject PrepareWithInvocationTarget(AnyObject target) { return default(AnyObject); }                /// <summary>        /// Closes the top-level undo group if necessary and invokes undoNestedGroup.        /// </summary>        [iOSVersion(3)]        [Export("undo")]        public virtual void Undo() {  }                /// <summary>        /// Performs the undo operations in the last undo group (whether top-level or nested), recording the operations on the redo stack as a single group.        /// </summary>        [iOSVersion(3)]        [Export("undoNestedGroup")]        public virtual void UndoNestedGroup() {  }                /// <summary>        /// Performs the operations in the last group on the redo stack, if there are any, recording them on the undo stack as a single group.        /// </summary>        [iOSVersion(3)]        [Export("redo")]        public virtual void Redo() {  }                /// <summary>        /// Marks the beginning of an undo group.        /// </summary>        [iOSVersion(3)]        [Export("beginUndoGrouping")]        public virtual void BeginUndoGrouping() {  }                /// <summary>        /// Marks the end of an undo group.        /// </summary>        [iOSVersion(3)]        [Export("endUndoGrouping")]        public virtual void EndUndoGrouping() {  }                /// <summary>        /// Disables the recording of undo operations, whether by registerUndoWithTarget:selector:object: or by invocation-based undo.        /// </summary>        [iOSVersion(3)]        [Export("disableUndoRegistration")]        public virtual void DisableUndoRegistration() {  }                /// <summary>        /// Enables the recording of undo operations.        /// </summary>        [iOSVersion(3)]        [Export("enableUndoRegistration")]        public virtual void EnableUndoRegistration() {  }                /// <summary>        /// Clears the undo and redo stacks and re-enables the receiver.        /// </summary>        [iOSVersion(3)]        [Export("removeAllActions")]        public virtual void RemoveAllActions() {  }                /// <summary>        /// Clears the undo and redo stacks of all operations involving the specified target as the recipient of the undo message.        /// </summary>        /// <param name="target">The recipient of the undo messages to be removed.</param>        [iOSVersion(3)]        [Export("removeAllActionsWithTarget")]        public virtual void RemoveAllActionsWithTarget(AnyObject target) {  }                /// <summary>        /// Sets the name of the action associated with the Undo or Redo command.        /// </summary>        /// <param name="actionName">The name of the action.</param>        [iOSVersion(3)]        [Export("setActionName")]        public virtual void SetActionName(string actionName) {  }                /// <summary>        /// Returns the complete, localized title of the Undo menu command for the action identified by the given name.        /// </summary>        /// <param name="actionName">The name of the undo action.</param>        [iOSVersion(3)]        [Export("undoMenuTitleForUndoActionName")]        public virtual string UndoMenuTitleForUndoActionName(string actionName) { return default(string); }                /// <summary>        /// Returns the complete, localized title of the Redo menu command for the action identified by the given name.        /// </summary>        /// <param name="actionName">The name of the undo action.</param>        [iOSVersion(3)]        [Export("redoMenuTitleForUndoActionName")]        public virtual string RedoMenuTitleForUndoActionName(string actionName) { return default(string); }                /// <summary>        /// Sets whether the next undo or redo action is discardable.        /// </summary>        /// <param name="discardable">Specifies if the action is discardable. true if the next undo or redo action can be discarded; false otherwise.</param>        [iOSVersion(5)]        [Export("setActionIsDiscardable")]        public virtual void SetActionIsDiscardable(bool discardable) {  }                /// <summary>        /// A Boolean value that indicates whether the receiver has any actions to undo. (read-only)        /// </summary>        [iOSVersion(3)]        [Export("canUndo")]        public bool CanUndo { get; private set; }                /// <summary>        /// A Boolean value that indicates whether the receiver has any actions to redo. (read-only)        /// </summary>        [iOSVersion(3)]        [Export("canRedo")]        public bool CanRedo { get; private set; }                /// <summary>        /// The maximum number of top-level undo groups the receiver holds.        /// </summary>        [iOSVersion(3)]        [Export("levelsOfUndo")]        public int LevelsOfUndo { get; set; }                /// <summary>        /// A Boolean value that indicates whether the receiver automatically creates undo groups around each pass of the run loop.        /// </summary>        [iOSVersion(3)]        [Export("groupsByEvent")]        public bool GroupsByEvent { get; set; }                /// <summary>        /// The number of nested undo groups (or redo groups, if Redo was invoked last) in the current event loop. (read-only)        /// </summary>        [iOSVersion(3)]        [Export("groupingLevel")]        public int GroupingLevel { get; private set; }                /// <summary>        /// A Boolean value that indicates whether the recording of undo operations is enabled. (read-only)        /// </summary>        [iOSVersion(8)]        [Export("undoRegistrationEnabled")]        public bool UndoRegistrationEnabled { get; private set; }                /// <summary>        /// Returns a Boolean value that indicates whether the receiver is in the process of performing its undo or undoNestedGroup method. (read-only)        /// </summary>        [iOSVersion(8)]        [Export("undoing")]        public bool Undoing { get; private set; }                /// <summary>        /// Returns a Boolean value that indicates whether the receiver is in the process of performing its redo method. (read-only)        /// </summary>        [iOSVersion(8)]        [Export("redoing")]        public bool Redoing { get; private set; }                /// <summary>        /// The name identifying the undo action. (read-only)        /// </summary>        [iOSVersion(3)]        [Export("undoActionName")]        public string UndoActionName { get; private set; }                /// <summary>        /// The name identifying the redo action. (read-only)        /// </summary>        [iOSVersion(3)]        [Export("redoActionName")]        public string RedoActionName { get; private set; }                /// <summary>        /// The complete title of the Undo menu command, for example, “Undo Paste.” (read-only)        /// </summary>        [iOSVersion(3)]        [Export("undoMenuItemTitle")]        public string UndoMenuItemTitle { get; private set; }                /// <summary>        /// The complete title of the Redo menu command, for example, “Redo Paste.” (read-only)        /// </summary>        [iOSVersion(3)]        [Export("redoMenuItemTitle")]        public string RedoMenuItemTitle { get; private set; }                /// <summary>        /// The modes governing the types of input handled during a cycle of the run loop.        /// </summary>        [iOSVersion(3)]        [Export("runLoopModes")]        public AnyObject[] RunLoopModes { get; set; }                /// <summary>        /// Boolean value that indicates whether the next undo action is discardable. (read-only)        /// </summary>        [iOSVersion(5)]        [Export("undoActionIsDiscardable")]        public bool UndoActionIsDiscardable { get; private set; }                /// <summary>        /// Boolean value that indicates whether the next redo action is discardable. (read-only)        /// </summary>        [iOSVersion(5)]        [Export("redoActionIsDiscardable")]        public bool RedoActionIsDiscardable { get; private set; }                /// <summary>        /// NSUndoManager provides this constant as a convenience; you can use it to compare to values returned by some NSUndoManager methods.        /// </summary>        public int NSUndoCloseGroupingRunLoopOrdering { get; private set; }    }    /// <summary>    /// Posted whenever an NSUndoManager object opens or closes an undo group (except when it opens a top-level group) and when checking the redo stack in canRedo. The notification object is the NSUndoManager object. This notification does not contain a userInfo dictionary.    /// </summary>    public class NSUndoManagerCheckpointNotification : NSNotification    {        public NSUndoManagerCheckpointNotification() : base("", null) { }    }    /// <summary>    /// Posted whenever an NSUndoManager object opens an undo group, which occurs in the implementation of the beginUndoGrouping method. The notification object is the NSUndoManager object. This notification does not contain a userInfo dictionary.    /// </summary>    public class NSUndoManagerDidOpenUndoGroupNotification : NSNotification    {        public NSUndoManagerDidOpenUndoGroupNotification() : base("", null) { }    }    /// <summary>    /// Posted just after an NSUndoManager object performs a redo operation (redo). The notification object is the NSUndoManager object. This notification does not contain a userInfo dictionary.    /// </summary>    public class NSUndoManagerDidRedoChangeNotification : NSNotification    {        public NSUndoManagerDidRedoChangeNotification() : base("", null) { }    }    /// <summary>    /// Posted just after an NSUndoManager object performs an undo operation. If you invoke undo or undoNestedGroup, this notification is posted. The notification object is the NSUndoManager object. This notification does not contain a userInfo dictionary.    /// </summary>    public class NSUndoManagerDidUndoChangeNotification : NSNotification    {        public NSUndoManagerDidUndoChangeNotification() : base("", null) { }    }    /// <summary>    /// Posted before an NSUndoManager object closes an undo group, which occurs in the implementation of the endUndoGrouping method. The notification object is the NSUndoManager object. Prior to OS X v10.7 this notification did not contain a userInfo dictionary. In OS X v10.7 and later the userInfo dictionary may contain the NSUndoManagerWillCloseUndoGroupNotification key, with a NSNumber boolean value of YES, if the undo group as a whole is discardable.    /// </summary>    public class NSUndoManagerWillCloseUndoGroupNotification : NSNotification    {        public NSUndoManagerWillCloseUndoGroupNotification() : base("", null) { }    }    /// <summary>    /// Posted after an NSUndoManager object closes an undo group, which occurs in the implementation of the endUndoGrouping method. The notification object is the NSUndoManager object. This notification does not contain a userInfo dictionary.    /// </summary>    public class NSUndoManagerDidCloseUndoGroupNotification : NSNotification    {        public NSUndoManagerDidCloseUndoGroupNotification() : base("", null) { }    }    /// <summary>    /// Posted just before an NSUndoManager object performs a redo operation (redo). The notification object is the NSUndoManager object. This notification does not contain a userInfo dictionary.    /// </summary>    public class NSUndoManagerWillRedoChangeNotification : NSNotification    {        public NSUndoManagerWillRedoChangeNotification() : base("", null) { }    }    /// <summary>    /// Posted just before an NSUndoManager object performs an undo operation. If you invoke undo or undoNestedGroup, this notification is posted. The notification object is the NSUndoManager object. This notification does not contain a userInfo dictionary.    /// </summary>    public class NSUndoManagerWillUndoChangeNotification : NSNotification    {        public NSUndoManagerWillUndoChangeNotification() : base("", null) { }    }}