using ObjectiveC;using System;using SwiftSharp.Attributes;namespace Foundation{	//https://developer.apple.com/library/prerelease/ios/documentation/Foundation/Reference/NSFileCoordinator_class/index.html#//apple_ref/occ/cl/NSFileCoordinator	/// <summary>	/// The NSFileCoordinator class coordinates the reading and writing of files and directories among multiple processes and objects in the same process. You use instances of this class as-is to read from, write to, modify the attributes of, change the location of, or delete a file or directory. Before your code to perform those actions executes, though, the file coordinator lets registered file presenter objects perform any tasks that they might require to ensure their own integrity. For example, if you want to change the location of a file, other objects interested in that file need to know where you intend to move it so that they can update their references.	/// </summary>	[iOSVersion(5)]	public class NSFileCoordinator : NSObject	{		/// <summary>		/// Initializes and returns a file coordinator object using the specified file presenter.		/// </summary>		/// <param name="filePresenter">The file presenter object that is initiating some action on its file or directory. This object is assumed to be performing the relevant file or directory operations and therefore does not receive notifications about those operations from the returned file coordinator object. This parameter may be nil.</param>		/// <returns>A file coordinator object to use to coordinate file-related operations.</returns>		[iOSVersion(5)]		public NSFileCoordinator(NSFilePresenter filePresenter) { }				/// <summary>		/// Registers the specified file presenter object so that it can receive notifications.		/// </summary>		/// <param name="filePresenter">The file presenter object to register.</param>		[iOSVersion(5)]		[Export("addFilePresenter")]		public static void AddFilePresenter(NSFilePresenter filePresenter) { }				/// <summary>		/// Unregisters the specified file presenter object.		/// </summary>		/// <param name="filePresenter">The file presenter object to unregister. If the object is not currently registered, this method does nothing.</param>		[iOSVersion(5)]		[Export("removeFilePresenter")]		public static void RemoveFilePresenter(NSFilePresenter filePresenter) { }				/// <summary>		/// Returns an array containing the currently registered file presenter objects.		/// </summary>		/// <returns>An array of objects that conform to the NSFilePresenter protocol.</returns>		[iOSVersion(5)]		[Export("filePresenters")]		public static AnyObject[] FilePresenters() { return null; }				/// <summary>		/// A string that uniquely identifies the file access that performed by this file coordinator.		/// </summary>		[iOSVersion(5)]		[Export("purposeIdentifier")]		public string PurposeIdentifier { get; set; }				/// <summary>		/// Performs a number of coordinated-read or -write operations asynchronously.		/// </summary>		/// <param name="intents">An array of file access intent objects, representing the individual read and write operations.</param>		/// <param name="queue">The operation queue on which the accessor block is executed. The queue must not be nil.</param>		/// <param name="byAccessor">A Block object containing the file operations corresponding to the file access intent objects in the intents array.   The accessor block takes the following parameter:           error              If an error occurs while waiting for access, this parameter contains an NSError object that describes the problem. If access is successfully granted, it is set to nil, and you may perform the intended file access.   Do not attempt to access the files if the error parameter contains a non-nil value.</param>		[iOSVersion(8)]		[Export("coordinateAccessWithintents")]		public void CoordinateAccessWithintents(AnyObject[] intents, NSOperationQueue queue, Action<NSError> byAccessor) { }				/// <summary>		/// Initiates a read operation on a single file or directory using the specified options.		/// </summary>		/// <param name="url">A URL identifying the file or directory to read. If other objects or processes are acting on the item at the URL, the actual URL passed to reader parameter may be different than the one in this parameter.</param>		/// <param name="options">One of the reading options described in NSFileCoordinatorReadingOptions. If you pass 0 for this parameter, the savePresentedItemChangesWithCompletionHandler: method of relevant file presenters is called before your block executes.</param>		/// <param name="error">On input, a pointer to a pointer for an error object. If a file presenter encounters an error while preparing for this read operation, that error is returned in this parameter and the block in the reader parameter is not executed. If you cancel this operation before the reader block is executed, this parameter contains an error object on output.</param>		/// <param name="byAccessor">A Block object containing the file operations you want to perform in a coordinated manner. This block receives an NSURL object containing the URL of the item and returns no value. Always use the URL passed into the block instead of the value in the url parameter.</param>		[iOSVersion(5)]		[Export("coordinateReadingItemAtURL")]		public void CoordinateReadingItemAtURL(NSURL url, NSFileCoordinatorReadingOptions options, NSErrorPointer error, Action<NSURL> byAccessor) { }				/// <summary>		/// Initiates a write operation on a single file or directory using the specified options.		/// </summary>		/// <param name="url">A URL identifying the file or directory to write. If other objects or processes are acting on the item at the URL, the actual URL passed to writer parameter may be different than the one in this parameter.</param>		/// <param name="options">One of the writing options described in NSFileCoordinatorWritingOptions. The options you specify partially determine how file presenters are notified and how this file coordinator object waits to execute your block.</param>		/// <param name="error">On input, a pointer to a pointer for an error object. If a file presenter encounters an error while preparing for this write operation, that error is returned in this parameter and the block in the writer parameter is not executed. If you cancel this operation before the writer block is executed, this parameter contains an error object on output.</param>		/// <param name="byAccessor">A Block object containing the file operations you want to perform in a coordinated manner. This block receives an NSURL object containing the URL of the item and returns no value. Always use the URL passed into the block instead of the value in the url parameter.</param>		[iOSVersion(5)]		[Export("coordinateWritingItemAtURL")]		public void CoordinateWritingItemAtURL(NSURL url, NSFileCoordinatorWritingOptions options, NSErrorPointer error, Action<NSURL> byAccessor) { }				/// <summary>		/// Initiates a read operation that contains a follow-up write operation.		/// </summary>		/// <param name="readingURL">A URL identifying the file or directory to read. If other objects or processes are acting on the item at the URL, the actual URL passed to the block in the readerWriter parameter may be different than the one in this parameter.</param>		/// <param name="options">One of the reading options described in NSFileCoordinatorReadingOptions. If you pass 0 for this parameter, the savePresentedItemChangesWithCompletionHandler: method of relevant file presenters is called before your block executes.</param>		/// <param name="writingItemAtURL">A URL identifying the file or directory to write. If other objects or processes are acting on the item at the URL, the actual URL passed to the block in the readerWriter parameter may be different than the one in this parameter.</param>		/// <param name="options">One of the writing options described in NSFileCoordinatorWritingOptions. The options you specify partially determine how file presenters are notified and how this file coordinator object waits to execute your block.</param>		/// <param name="error">On input, a pointer to a pointer for an error object. If a file presenter encounters an error while preparing for this operation, that error is returned in this parameter and the block in the readerWriter parameter is not executed. If you cancel this operation before the readerWriter block is executed, this parameter contains an error object on output.</param>		/// <param name="byAccessor">A block object containing the read and write operations you want to perform in a coordinated manner. This block receives NSURL objects containing the URLs of the items to read and write and returns no value. Always use the URLs passed into the block instead of the values in the readingURL and writingURL parameters.</param>		[iOSVersion(5)]		[Export("coordinateReadingItemAtURL")]		public void CoordinateReadingItemAtURL(NSURL readingURL, NSFileCoordinatorReadingOptions options, NSURL writingItemAtURL, NSFileCoordinatorWritingOptions options, NSErrorPointer error, Action<NSURL, NSURL> byAccessor) { }				/// <summary>		/// Initiates a write operation that involves a secondary write operation.		/// </summary>		/// <param name="url1">A URL identifying the first file or directory to write. If other objects or processes are acting on the item at the URL, the actual URL passed to the block in the writer parameter may be different than the one in this parameter.</param>		/// <param name="options">One of the writing options described in NSFileCoordinatorWritingOptions.</param>		/// <param name="writingItemAtURL">A URL identifying the other file or directory to write. If other objects or processes are acting on the item at the URL, the actual URL passed to the block in the writer parameter may be different than the one in this parameter.</param>		/// <param name="options">One of the writing options described in NSFileCoordinatorWritingOptions. The options you specify partially determine how file presenters are notified and how this file coordinator object waits to execute your block.</param>		/// <param name="error">On input, a pointer to a pointer for an error object. If a file presenter encounters an error while preparing for this operation, that error is returned in this parameter and the block in the writer parameter is not executed. If you cancel this operation before the writer block is executed, this parameter contains an error object on output.</param>		/// <param name="byAccessor">A Block object containing the write operations you want to perform in a coordinated manner. This block receives NSURL objects containing the URLs of the items to write and returns no value. Always use the URLs passed into the block instead of the values in the url1 and url2 parameters.</param>		[iOSVersion(5)]		[Export("coordinateWritingItemAtURL")]		public void CoordinateWritingItemAtURL(NSURL url1, NSFileCoordinatorWritingOptions options, NSURL writingItemAtURL, NSFileCoordinatorWritingOptions options, NSErrorPointer error, Action<NSURL, NSURL> byAccessor) { }				/// <summary>		/// Prepare to read or write from multiple files in a single batch operation.		/// </summary>		/// <param name="readingURLs">An array of NSURL objects identifying the items you want to read.</param>		/// <param name="options">One of the reading options described in NSFileCoordinatorReadingOptions. If you pass 0 for this parameter, the savePresentedItemChangesWithCompletionHandler: method of relevant file presenters is called before your block executes.</param>		/// <param name="writingItemsAtURLs">An array of NSURL objects identifying the items you want to write.</param>		/// <param name="options">One of the writing options described in NSFileCoordinatorWritingOptions. The options you specify partially determine how file presenters are notified and how this file coordinator object waits to execute your block.</param>		/// <param name="error">On input, a pointer to a pointer for an error object. If a file presenter encounters an error while preparing for this operation, that error is returned in this parameter and the block in the writer parameter is not executed. If you cancel this operation before the batchAccessor block is executed, this parameter contains an error object on output.</param>		/// <param name="byAccessor">A Block object containing additional calls to methods of this class.   The block takes the following parameter:           completionHandler              A completion handler block. The batch accessor must call the completion handler when it has finished its read and write calls.</param>		[iOSVersion(5)]		[Export("prepareForReadingItemsAtURLs")]		public void PrepareForReadingItemsAtURLs(AnyObject[] readingURLs, NSFileCoordinatorReadingOptions options, AnyObject[] writingItemsAtURLs, NSFileCoordinatorWritingOptions options, NSErrorPointer error, Action<> byAccessor) { }				/// <summary>		/// Announces that your app is moving a file to a new URL.		/// </summary>		/// <param name="oldURL">The old location of the file or directory.</param>		/// <param name="willMoveToURL">The new location of the file or directory.</param>		[iOSVersion(6)]		[Export("itemAtURL")]		public void ItemAtURL(NSURL oldURL, NSURL willMoveToURL) { }				/// <summary>		/// Notifies relevant file presenters that the location of a file or directory changed.		/// </summary>		/// <param name="oldURL">The old location of the file or directory.</param>		/// <param name="didMoveToURL">The new location of the file or directory.</param>		[iOSVersion(5)]		[Export("itemAtURL")]		public void ItemAtURL(NSURL oldURL, NSURL didMoveToURL) { }				/// <summary>		/// Cancels any active file coordination calls.		/// </summary>		[iOSVersion(5)]		[Export("cancel")]		public void Cancel() { }				/// <summary>		/// Options to use when reading the contents or attributes of a file or directory.		/// </summary>		public enum NSFileCoordinatorReadingOptions		{			/// <summary>			/// Specify this constant if your code does not need other objects to save changes first. If you do not specify this constant, the savePresentedItemChangesWithCompletionHandler: method of relevant file presenters is called before your code reads the item.			/// </summary>			[iOSVersion(5)]			WithoutChanges,						/// <summary>			/// Specify this constant if you want an item that might be a symbolic link to resolve to the file pointed to by that link (instead of to the link itself). This option applies to the URL passed to the block that handles the actual reading of the item.			/// </summary>			[iOSVersion(5)]			ResolvesSymbolicLink,						/// <summary>			/// Specify this constant if you want to read an item’s metadata without triggering a download.			/// </summary>			[iOSVersion(8)]			ImmediatelyAvailableMetadataOnly,						/// <summary>			/// Specify this content when reading an item for the purpose of uploading its contents.			/// </summary>			[iOSVersion(8)]			ForUploading,		}		/// <summary>		/// Options to use when changing the contents or attributes of a file or directory.		/// </summary>		public enum NSFileCoordinatorWritingOptions		{			/// <summary>			/// When this constant is specified, the file coordinator calls the accommodatePresentedItemDeletionWithCompletionHandler: method of relevant file presenters to give them a chance to make adjustments before the item is deleted.			/// </summary>			[iOSVersion(5)]			ForDeleting,						/// <summary>			/// When specified for a directory item, the file coordinator waits for already running read and write operations of the directory’s contents, that were themselves initiated through a file coordinator, to finish before moving the directory. Queued, but not executing, read and write operations on the directory’s contents wait until the move operation finishes.			/// </summary>			[iOSVersion(5)]			ForMoving,						/// <summary>			/// When this constant is specified, the file coordinator calls the savePresentedItemChangesWithCompletionHandler: method of relevant file presenters to give them a chance to save their changes before your code makes its changes.			/// </summary>			[iOSVersion(5)]			ForMerging,						/// <summary>			/// Specifies whether the act of writing to the file involves actually replacing the file with a different file (or directory). If the current file coordinator is waiting for another object to move or rename the file, this option treats the operation as the creation of a new file (instead of as the replacement of the old file); otherwise, this constant causes the same behavior as the NSFileCoordinatorWritingForDeleting constant. Use this option when the moving or creation of an item would cause the replacement of any existing item. Do not use it when simply updating the contents of the existing file.			/// </summary>			[iOSVersion(5)]			ForReplacing,						/// <summary>			/// Select this option when writing to change the file’s metadata only and not its contents.			/// </summary>			[iOSVersion(8)]			ContentIndependentMetadataOnly,		}	}}