using ObjectiveC;using System;using SwiftSharp.Attributes;using System.Collections.Generic;namespace Foundation{	/// <summary>	/// The NSRunLoop class declares the programmatic interface to objects that manage input sources. An NSRunLoop object processes input for sources such as mouse and keyboard events from the window system, NSPort objects, and NSConnection objects. An NSRunLoop object also processes NSTimer events.	/// </summary>	/// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSRunLoop_Class/index.html#//apple_ref/occ/cl/NSRunLoop"/>	[iOSVersion(2)]	public class NSRunLoop : NSObject//, AnyObject, NSObjectProtocol	{		/// <summary>		/// Returns the NSRunLoop object for the current thread.		/// </summary>		[iOSVersion(2)]		[Export("currentRunLoop")]		public static NSRunLoop CurrentRunLoop() { return default(NSRunLoop); }				/// <summary>		/// Performs one pass through the run loop in the specified mode and returns the date at which the next timer is scheduled to fire.		/// </summary>		/// <param name="mode">The run loop mode to search. You may specify custom modes or use one of the modes listed in Run Loop Modes.</param>		[iOSVersion(2)]		[Export("limitDateForMode")]		public NSDate LimitDateForMode(string mode) { return default(NSDate); }				/// <summary>		/// Returns the run loop of the main thread.		/// </summary>		[iOSVersion(2)]		[Export("mainRunLoop")]		public static NSRunLoop MainRunLoop() { return default(NSRunLoop); }				/// <summary>		/// Returns the receiver's underlying CFRunLoop Reference object.		/// </summary>		[iOSVersion(2)]		[Export("getCFRunLoop")]		public CFRunLoop GetCFRunLoop() { return default(CFRunLoop); }				/// <summary>		/// Registers a given timer with a given input mode.		/// </summary>		/// <param name="aTimer">The timer to register with the receiver.</param>		/// <param name="forMode">The mode in which to add aTimer. You may specify a custom mode or use one of the modes listed in Run Loop Modes.</param>		[iOSVersion(2)]		[Export("addTimer")]		public void AddTimer(NSTimer aTimer, string forMode) {  }				/// <summary>		/// Adds a port as an input source to the specified mode of the run loop.		/// </summary>		/// <param name="aPort">The port to add to the receiver.</param>		/// <param name="forMode">The mode in which to add aPort. You may specify a custom mode or use one of the modes listed in Run Loop Modes.</param>		[iOSVersion(2)]		[Export("addPort")]		public void AddPort(NSPort aPort, string forMode) {  }				/// <summary>		/// Removes a port from the specified input mode of the run loop.		/// </summary>		/// <param name="aPort">The port to remove from the receiver.</param>		/// <param name="forMode">The mode from which to remove aPort. You may specify a custom mode or use one of the modes listed in Run Loop Modes.</param>		[iOSVersion(2)]		[Export("removePort")]		public void RemovePort(NSPort aPort, string forMode) {  }				/// <summary>		/// Puts the receiver into a permanent loop, during which time it processes data from all attached input sources.		/// </summary>		[iOSVersion(2)]		[Export("run")]		public void Run() {  }				/// <summary>		/// Runs the loop once, blocking for input in the specified mode until a given date.		/// </summary>		/// <param name="mode">The mode in which to run. You may specify custom modes or use one of the modes listed in Run Loop Modes.</param>		/// <param name="beforeDate">The date until which to block.</param>		[iOSVersion(2)]		[Export("runMode")]		public bool RunMode(string mode, NSDate beforeDate) { return default(bool); }				/// <summary>		/// Runs the loop until the specified date, during which time it processes data from all attached input sources.		/// </summary>		/// <param name="limitDate">The date up until which to run.</param>		[iOSVersion(2)]		[Export("runUntilDate")]		public void RunUntilDate(NSDate limitDate) {  }				/// <summary>		/// Runs the loop once or until the specified date, accepting input only for the specified mode.		/// </summary>		/// <param name="mode">The mode in which to run. You may specify custom modes or use one of the modes listed in Run Loop Modes.</param>		/// <param name="beforeDate">The date up until which to run.</param>		[iOSVersion(2)]		[Export("acceptInputForMode")]		public void AcceptInputForMode(string mode, NSDate beforeDate) {  }				/// <summary>		/// Cancels the sending of a previously scheduled message.		/// </summary>		/// <param name="aSelector">The previously-specified selector.</param>		/// <param name="target">The previously-specified target.</param>		/// <param name="argument">The previously-specified argument.</param>		[iOSVersion(2)]		[Export("cancelPerformSelector")]		public void CancelPerformSelector(Selector aSelector, AnyObject target, AnyObject argument) {  }				/// <summary>		/// Cancels all outstanding ordered performs scheduled with a given target.		/// </summary>		/// <param name="target">The previously-specified target.</param>		[iOSVersion(2)]		[Export("cancelPerformSelectorsWithTarget")]		public void CancelPerformSelectorsWithTarget(AnyObject target) {  }				/// <summary>		/// Returns the receiver's current input mode.		/// </summary>		[iOSVersion(2)]		[Export("currentMode")]		public string CurrentMode { get; private set; }	}}