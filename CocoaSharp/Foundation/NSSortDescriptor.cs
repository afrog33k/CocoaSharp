using ObjectiveC;using System;using SwiftSharp.Attributes;using System.Collections.Generic;namespace Foundation{    /// <summary>    /// An instance of NSSortDescriptor describes a basis for ordering objects by specifying the property to use to compare the objects, the method to use to compare the properties, and whether the comparison should be ascending or descending. Instances of NSSortDescriptor are immutable.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSSortDescriptor_Class/index.html#//apple_ref/occ/cl/NSSortDescriptor"/>    [iOSVersion(2)]    public class NSSortDescriptor : NSObject//, AnyObject, NSCoding, NSCopying, NSObjectProtocol, NSSecureCoding    {        /// <summary>        /// Returns an NSSortDescriptor object initialized with a given property key path and sort order, and with the default comparison selector.        /// </summary>        /// <param name="key">The property key to use when performing a comparison. In the comparison, the property is accessed using key-value coding (see Key-Value Coding Programming Guide).</param>        /// <param name="ascending">true if the receiver specifies sorting in ascending order, otherwise false.</param>        [iOSVersion(2)]        public NSSortDescriptor(string key, bool ascending) { }                /// <summary>        /// Returns an NSSortDescriptor object initialized with a given property key path, sort order, and comparison selector.        /// </summary>        /// <param name="key">The property key to use when performing a comparison. In the comparison, the property is accessed using key-value coding (see Key-Value Coding Programming Guide).</param>        /// <param name="ascending">true if the receiver specifies sorting in ascending order, otherwise false.</param>        /// <param name="selector">The method to use when comparing the properties of objects, for example caseInsensitiveCompare: or localizedCompare:. The selector must specify a method implemented by the value of the property identified by keyPath. The selector used for the comparison is passed a single parameter, the object to compare against self, and must return the appropriate NSComparisonResult constant. The selector must have the same method signature as:        ///           - (NSComparisonResult)localizedCompare:(NSString *)aString</param>        [iOSVersion(2)]        public NSSortDescriptor(string key, bool ascending, Selector selector) { }                /// <summary>        /// Returns an NSSortDescriptor object initialized to do with the given ordering and comparator block.        /// </summary>        /// <param name="key">The property key to use when performing a comparison. In the comparison, the property is accessed using key-value coding (see Key-Value Coding Programming Guide).</param>        /// <param name="ascending">true if the receiver specifies sorting in ascending order, otherwise false.</param>        /// <param name="comparator">A comparator block.</param>        [iOSVersion(4)]        public NSSortDescriptor(string key, bool ascending, NSComparator comparator) { }                /// <summary>        /// Returns an NSComparisonResult value that indicates the ordering of two given objects.        /// </summary>        /// <param name="object1">The object to compare with object2. This object must have a property accessible using the key-path specified by key.        ///   This value must not be nil. If the value is nil, the behavior is undefined and may change in future versions of OS X.</param>        /// <param name="toObject">The object to compare with object1. This object must have a property accessible using the key-path specified by key.        ///   This value must not be nil. If the value is nil, the behavior is undefined and may change in future versions of OS X.</param>        [iOSVersion(2)]        [Export("compareObject")]        public NSComparisonResult CompareObject(AnyObject object1, AnyObject toObject) { return default(NSComparisonResult); }                /// <summary>        /// Force a sort descriptor that was securely decoded to allow evaluation.        /// </summary>        [iOSVersion(7)]        [Export("allowEvaluation")]        public void AllowEvaluation() {  }                /// <summary>        /// A Boolean value that indicates whether the receiver specifies sorting in ascending order. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("ascending")]        public bool Ascending { get; private set; }                /// <summary>        /// The receiverâ€™s property key path. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("key")]        public string Key { get; private set; }                /// <summary>        /// The selector the receiver specifies to use when comparing objects.        /// </summary>        [iOSVersion(2)]        [Export("selector")]        public Selector Selector { get; private set; }                /// <summary>        /// A sort descriptor with the sort order reversed. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("reversedSortDescriptor")]        public AnyObject ReversedSortDescriptor { get; private set; }                /// <summary>        /// An NSComparator for the sort descriptor. (read-only)        /// </summary>        [iOSVersion(4)]        [Export("comparator")]        public NSComparator Comparator { get; private set; }    }}