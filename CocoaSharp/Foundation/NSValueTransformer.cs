using ObjectiveC;using System;using SharpSwift.Attributes;using System.Collections.Generic;namespace Foundation{    /// <summary>    /// NSValueTransformer is an abstract class that is used by the Cocoa Bindings technology to transform values from one representation to another.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSValueTransformer_Class/index.html#//apple_ref/occ/cl/NSValueTransformer"/>    [iOSVersion(3)]    [Export("")]    public class NSValueTransformer : NSObject//, AnyObject, CVarArgType, Equatable, Hashable, NSObjectProtocol, Printable    {        public NSValueTransformer() { }        /// <summary>        /// Registers the provided value transformer with a given identifier.        /// </summary>        /// <param name="transformer">The transformer to register.</param>        /// <param name="forName">The name for transformer.</param>        [iOSVersion(3)]        [Export("setValueTransformer")]        public static void SetValueTransformer(NSValueTransformer transformer, string forName) {  }                /// <summary>        /// Returns an array of all the registered value transformers.        /// </summary>        [iOSVersion(3)]        [Export("valueTransformerNames")]        public static AnyObject[] ValueTransformerNames() { return default(AnyObject[]); }                /// <summary>        /// Returns a Boolean value that indicates whether the receiver can reverse a transformation.        /// </summary>        [iOSVersion(3)]        [Export("allowsReverseTransformation")]        public static bool AllowsReverseTransformation() { return default(bool); }                /// <summary>        /// Returns the class of the value returned by the receiver for a forward transformation.        /// </summary>        [iOSVersion(3)]        [Export("transformedValueClass")]        public static AnyClass TransformedValueClass() { return default(AnyClass); }                /// <summary>        /// Returns the result of transforming a given value.        /// </summary>        /// <param name="value">The value to transform.</param>        [iOSVersion(3)]        [Export("transformedValue")]        [return:Optional]        public virtual AnyObject TransformedValue([Optional] AnyObject value) { return default(AnyObject); }                /// <summary>        /// Returns the result of the reverse transformation of a given value.        /// </summary>        /// <param name="value">The value to reverse transform.</param>        [iOSVersion(3)]        [Export("reverseTransformedValue")]        [return:Optional]        public virtual AnyObject ReverseTransformedValue([Optional] AnyObject value) { return default(AnyObject); }    }}