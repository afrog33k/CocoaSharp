using ObjectiveC;using System;using SwiftSharp.Attributes;namespace Foundation{	//https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSValueTransformer_Class/index.html#//apple_ref/occ/cl/NSValueTransformer	/// <summary>	/// NSValueTransformer is an abstract class that is used by the Cocoa Bindings technology to transform values from one representation to another.	/// </summary>	[iOSVersion(3)]	public class NSValueTransformer : NSObject	{		/// <summary>		/// Registers the provided value transformer with a given identifier.		/// </summary>		/// <param name="transformer">The transformer to register.</param>		/// <param name="forName">The name for transformer.</param>		[iOSVersion(3)]		[Export("setValueTransformer")]		public static void SetValueTransformer(NSValueTransformer transformer, string forName) { }				/// <summary>		/// Returns the value transformer identified by a given identifier.		/// </summary>		/// <param name="forName">The transformer identifier.</param>		/// <returns>The value transformer identified by name in the shared registry, or nil if not found.</returns>		[iOSVersion(3)]
        public NSValueTransformer(string forName) { }				/// <summary>		/// Returns an array of all the registered value transformers.		/// </summary>		/// <returns>An array of all the registered value transformers.</returns>		[iOSVersion(3)]		[Export("valueTransformerNames")]		public static AnyObject[] ValueTransformerNames() { return null; }				/// <summary>		/// Returns a Boolean value that indicates whether the receiver can reverse a transformation.		/// </summary>		/// <returns>true if the receiver supports reverse value transformations, otherwise false.</returns>		[iOSVersion(3)]		[Export("allowsReverseTransformation")]		public static bool AllowsReverseTransformation() { return false; }				/// <summary>		/// Returns the class of the value returned by the receiver for a forward transformation.		/// </summary>		/// <returns>The class of the value returned by the receiver for a forward transformation.</returns>		[iOSVersion(3)]		[Export("transformedValueClass")]		public static AnyClass TransformedValueClass() { return null; }				/// <summary>		/// Returns the result of transforming a given value.		/// </summary>		/// <param name="value">The value to transform.</param>		/// <returns>The result of transforming value.</returns>		[iOSVersion(3)]		[Export("transformedValue")]		public AnyObject TransformedValue(AnyObject value) { return null; }				/// <summary>		/// Returns the result of the reverse transformation of a given value.		/// </summary>		/// <param name="value">The value to reverse transform.</param>		/// <returns>The reverse transformation of value.</returns>		[iOSVersion(3)]		[Export("reverseTransformedValue")]		public AnyObject ReverseTransformedValue(AnyObject value) { return null; }				/// <summary>		/// The following named value transformers are defined by NSValueTransformer:		/// </summary>				/// <summary>		/// This value transformer negates a boolean value, transforming true to false and false to true.		/// </summary>		[iOSVersion(3)]		public string NSNegateBooleanTransformerName { get; private set; }				/// <summary>		/// This value transformer returns true if the value is nil.		/// </summary>		[iOSVersion(3)]		public string NSIsNilTransformerName { get; private set; }				/// <summary>		/// This value transformer returns true if the value is non-nil.		/// </summary>		[iOSVersion(3)]		public string NSIsNotNilTransformerName { get; private set; }				/// <summary>		/// This value transformer returns an object created by attempting to unarchive the data in the NSData object passed as the value.		/// </summary>		[iOSVersion(3)]		public string NSUnarchiveFromDataTransformerName { get; private set; }				/// <summary>		/// This value transformer returns an object created by attempting to unarchive the data in the NSData object passed as the value. The archived object must be created using keyed archiving in order to be unarchived and archived with this transformer.		/// </summary>		[iOSVersion(3)]		public string NSKeyedUnarchiveFromDataTransformerName { get; private set; }	}}