using ObjectiveC;using System;using SwiftSharp.Attributes;using System.Collections.Generic;namespace Foundation{    /// <summary>    /// The NSCountedSet class declares the programmatic interface to a mutable, unordered collection of indistinct objects. A counted set is also known as a bag.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSCountedSet_Class/index.html#//apple_ref/occ/cl/NSCountedSet"/>    [iOSVersion(2)]    public class NSCountedSet : NSMutableSet//, AnyObject, NSCoding, NSCopying, NSFastEnumeration, NSMutableCopying, NSObjectProtocol, NSSecureCoding, Reflectable, Sequence    {        /// <summary>        /// Returns a counted set object initialized with the contents of a given array.        /// </summary>        /// <param name="array">An array of objects to add to the new set.</param>        [iOSVersion(2)]        [Export("convenience init")]        public NSCountedSet(AnyObject[] array) { }                /// <summary>        /// Returns a counted set object initialized with the contents of a given set.        /// </summary>        /// <param name="set">An set of objects to add to the new set.</param>        [iOSVersion(2)]        [Export("convenience init")]        public NSCountedSet(NSSet set) { }                /// <summary>        /// Returns a counted set object initialized with enough memory to hold a given number of objects.        /// </summary>        /// <param name="capacity">The initial capacity of the new counted set.</param>        [iOSVersion(2)]        public NSCountedSet(int capacity) { }                /// <summary>        /// Adds a given object to the set.        /// </summary>        /// <param name="anObject">The object to add to the set.</param>        [iOSVersion(2)]        [Export("addObject")]        public void AddObject(AnyObject anObject) {  }                /// <summary>        /// Removes a given object from the set.        /// </summary>        /// <param name="anObject">The object to remove from the set.</param>        [iOSVersion(2)]        [Export("removeObject")]        public void RemoveObject(AnyObject anObject) {  }                /// <summary>        /// Returns the count associated with a given object in the set.        /// </summary>        /// <param name="anObject">The object for which to return the count.</param>        [iOSVersion(2)]        [Export("countForObject")]        public int CountForObject(AnyObject anObject) { return default(int); }                /// <summary>        /// Returns an enumerator object that lets you access each object in the set once, independent of its count.        /// </summary>        [iOSVersion(2)]        [Export("objectEnumerator")]        public NSEnumerator ObjectEnumerator() { return default(NSEnumerator); }    }}