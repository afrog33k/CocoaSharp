using ObjectiveC;using System;using SwiftSharp.Attributes;using System.Collections.Generic;namespace Foundation{	/// <summary>	/// An NSValue object is a simple container for a single C or Objective-C data item. It can hold any of the scalar types such as int, float, and char, as well as pointers, structures, and object ids. The purpose of this class is to allow items of such data types to be added to collections such as instances of NSArray and NSSet, which require their elements to be objects. NSValue objects are always immutable.	/// </summary>	/// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSValue_Class/index.html#//apple_ref/occ/cl/NSValue"/>	[iOSVersion(2)]	public class NSValue : NSObject, AnyObject, NSCoding, NSCopying, NSObjectProtocol, NSSecureCoding	{		/// <summary>		/// Initializes and returns an NSValue object that contains a given value, which is interpreted as being of a given Objective-C type.		/// </summary>		/// <param name="bytes">The value for the new NSValue object.</param>		/// <param name="objCType">The Objective-C type of value. type should be created with the Objective-C @encode() compiler directive; it should not be hard-coded as a C string.</param>		[iOSVersion(2)]		public NSValue(ConstUnsafePointer<Action> bytes, CString objCType) { }				/// <summary>		/// Creates and returns an NSValue object that contains a given value, which is interpreted as being of a given Objective-C type.		/// </summary>		/// <param name="value">The value for the new NSValue object.</param>		/// <param name="objCType">The Objective-C type of value. type should be created with the Objective-C @encode() compiler directive; it should not be hard-coded as a C string.</param>		[iOSVersion(2)]		[Export("valueWithBytes")]		public static NSValue ValueWithBytes(ConstUnsafePointer<Action> value, CString objCType) { return default(NSValue); }				/// <summary>		/// Creates and returns an NSValue object that contains a given value which is interpreted as being of a given Objective-C type.		/// </summary>		/// <param name="value">The value for the new NSValue object.</param>		/// <param name="withObjCType">The Objective-C type of value. type should be created with the Objective-C @encode() compiler directive; it should not be hard-coded as a C string.</param>		[iOSVersion(2)]		public NSValue(ConstUnsafePointer<Action> value, CString withObjCType) { }				/// <summary>		/// Creates and returns an NSValue object that contains a given object.		/// </summary>		/// <param name="nonretainedObject">The value for the new object.</param>		[iOSVersion(2)]		public NSValue(AnyObject nonretainedObject) { }				/// <summary>		/// Creates and returns an NSValue object that contains a given pointer.		/// </summary>		/// <param name="pointer">The value for the new object.</param>		[iOSVersion(2)]		public NSValue(ConstUnsafePointer<Action> pointer) { }				/// <summary>		/// Creates and returns an NSValue object that contains a given NSRange structure.		/// </summary>		/// <param name="range">The value for the new object.</param>		[iOSVersion(2)]		public NSValue(NSRange range) { }				/// <summary>		/// Copies the receiverâ€™s value into a given buffer.		/// </summary>		/// <param name="buffer">A buffer into which to copy the receiver's value. buffer must be large enough to hold the value.</param>		[iOSVersion(2)]		[Export("getValue")]		public void GetValue(UnsafePointer<Action> buffer) {  }				/// <summary>		/// Returns the receiver's value as a pointer to void.		/// </summary>		/// <param name=")"></param>		[iOSVersion(2)]		[Export("pointerValue")]		public UnsafePointer<Action> PointerValue() -> UnsafePointer<> )) { return default(UnsafePointer<Action>); }				/// <summary>		/// Returns a Boolean value that indicates whether the receiver and another value are equal.		/// </summary>		/// <param name="aValue">The value with which to compare the receiver.</param>		[iOSVersion(2)]		[Export("isEqualToValue")]		public bool IsEqualToValue(NSValue aValue) { return default(bool); }				/// <summary>		/// Returns the receiver's value as an id.		/// </summary>		[iOSVersion(2)]		[Export("nonretainedObjectValue")]		public AnyObject NonretainedObjectValue { get; private set; }				/// <summary>		/// Returns a C string containing the Objective-C type of the data contained in the receiver.		/// </summary>		[iOSVersion(2)]		[Export("objCType")]		public CString ObjCType { get; private set; }				/// <summary>		/// Returns an NSRange structure representation of the receiver.		/// </summary>		[iOSVersion(2)]		[Export("rangeValue")]		public NSRange RangeValue { get; private set; }	}}