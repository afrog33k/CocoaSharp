using ObjectiveC;using System;using SwiftSharp.Attributes;using System.Collections.Generic;namespace Foundation{	/// <summary>	/// 	/// </summary>	/// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Miscellaneous/Foundation_DataTypes/index.html#//apple_ref/doc/uid/TP40003794"/>	//public class Foundation Data Types Reference//:	//{	//	/// <summary>	//	/// Opaque structure containing endian-independent double value.	//	/// </summary>	//	[Export("v")]	//	public UInt64		} V { get; set; }			//	/// <summary>	//	/// Opaque type containing an endian-independent float value.	//	/// </summary>	//	[Export("v")]	//	public UInt32		} V { get; set; }	//}	/// <summary>	/// Defines the signature for a block object used for comparison operations.	/// </summary>	//[iOSVersion(4)]	//public struct NSComparator	//{	//	static public implicit operator NSComparator(WEIRD value)	//	{	//		return default(NSComparator);	//	}	//	static public implicit operator WEIRD(NSComparator value)	//	{	//		return default(WEIRD);	//	}	//}	///// <summary>	///// Specifies a bitfield used to configure the behavior of elements in an instance of NSHashTable.	///// </summary>	//[iOSVersion(6)]	//public struct NSHashTableOptions	//{	//	static public implicit operator NSHashTableOptions(int value)	//	{	//		return default(NSHashTableOptions);	//	}	//	static public implicit operator int(NSHashTableOptions value)	//	{	//		return default(int);	//	}	//}	///// <summary>	///// Used to describe an integer.	///// </summary>	//[iOSVersion(2)]	//public struct NSInteger	//{	//	static public implicit operator NSInteger(int value)	//	{	//		return default(NSInteger);	//	}	//	static public implicit operator int(NSInteger value)	//	{	//		return default(int);	//	}	//}	///// <summary>	///// Specifies a bitfield used to configure the behavior of elements in an instance of NSMapTable.	///// </summary>	//[iOSVersion(6)]	//public struct NSMapTableOptions	//{	//	static public implicit operator NSMapTableOptions(int value)	//	{	//		return default(NSMapTableOptions);	//	}	//	static public implicit operator int(NSMapTableOptions value)	//	{	//		return default(int);	//	}	//}	///// <summary>	///// A structure used to describe a portion of a seriesâ€”such as characters in a string or objects in an NSArray object.	///// </summary>	//[iOSVersion(2)]	//public struct NSRange	//{	//	static public implicit operator NSRange(NSRange value)	//	{	//		return default(NSRange);	//	}	//	static public implicit operator NSRange(NSRange value)	//	{	//		return default(NSRange);	//	}	//}	///// <summary>	///// Type indicating a parameter is a pointer to an NSRange structure.	///// </summary>	//[iOSVersion(2)]	//public struct NSRangePointer	//{	//	static public implicit operator NSRangePointer(UnsafePointer<NSRange> value)	//	{	//		return default(NSRangePointer);	//	}	//	static public implicit operator UnsafePointer<NSRange>(NSRangePointer value)	//	{	//		return default(UnsafePointer<NSRange>);	//	}	//}	///// <summary>	///// Type for the platform-specific native socket handle.	///// </summary>	//[iOSVersion(2)]	//public struct NSSocketNativeHandle	//{	//	static public implicit operator NSSocketNativeHandle(int value)	//	{	//		return default(NSSocketNativeHandle);	//	}	//	static public implicit operator int(NSSocketNativeHandle value)	//	{	//		return default(int);	//	}	//}	/// <summary>	/// Used to specify a time interval, in seconds.	/// </summary>	[iOSVersion(2)]	public struct NSTimeInterval	{		static public implicit operator NSTimeInterval(Double value)		{			return default(NSTimeInterval);		}		static public implicit operator Double(NSTimeInterval value)		{			return default(Double);		}	}}