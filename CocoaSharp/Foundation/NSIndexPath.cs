using ObjectiveC;using System;using SwiftSharp.Attributes;using System.Collections.Generic;namespace Foundation{	/// <summary>	/// The NSIndexPath class represents the path to a specific node in a tree of nested array collections. This path is known as an index path.	/// </summary>	/// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSIndexPath_Class/index.html#//apple_ref/occ/cl/NSIndexPath"/>	[iOSVersion(2)]	public class NSIndexPath : NSObject//, AnyObject, NSCoding, NSCopying, NSObjectProtocol, NSSecureCoding	{		/// <summary>		/// Initializes an allocated NSIndexPath object with a one-node index path.		/// </summary>		/// <param name="index">Index of the item in node 0 to point to.</param>		[iOSVersion(2)]		[Export("convenience init")]		public NSIndexPath(int index) { }				/// <summary>		/// Initializes an allocated NSIndexPath object with an index path of a specific length.		/// </summary>		/// <param name="indexes">Array of indexes to make up the index path.</param>		/// <param name="length">Number of nodes to include in the index path.</param>		[iOSVersion(2)]		public NSIndexPath(ConstUnsafePointer<int> indexes, int length) { }				/// <summary>		/// Provides the index at a particular node in the index path.		/// </summary>		/// <param name="node">Index value of the desired node. Node numbering starts at zero.</param>		[iOSVersion(2)]		[Export("indexAtPosition")]		public int IndexAtPosition(int node) { return default(int); }				/// <summary>		/// Provides an index path containing the indexes in the receiving index path and another index.		/// </summary>		/// <param name="index">Index to append to the index path’s indexes.</param>		[iOSVersion(2)]		[Export("indexPathByAddingIndex")]		public NSIndexPath IndexPathByAddingIndex(int index) { return default(NSIndexPath); }				/// <summary>		/// Provides an index path with the indexes in the receiving index path, excluding the last one.		/// </summary>		[iOSVersion(2)]		[Export("indexPathByRemovingLastIndex")]		public NSIndexPath IndexPathByRemovingLastIndex() { return default(NSIndexPath); }				/// <summary>		/// Copies the objects contained in the index path into indexes.		/// </summary>		/// <param name="indexes">Pointer to a C array of objects of size at least the length of the index path. On return, the index path’s indexes.</param>		[iOSVersion(2)]		[Export("getIndexes")]		public void GetIndexes(UnsafePointer<int> indexes) {  }				/// <summary>		/// Indicates the depth-first traversal order of the receiving index path and another index path.		/// </summary>		/// <param name="indexPath">Index path to compare.		///   This value must not be nil. If the value is nil, the behavior is undefined.</param>		[iOSVersion(2)]		[Export("compare")]		public NSComparisonResult Compare(NSIndexPath indexPath) { return default(NSComparisonResult); }				/// <summary>		/// Provides the number of indexes in the index path.		/// </summary>		[iOSVersion(2)]		[Export("length")]		public int Length { get; private set; }	}}