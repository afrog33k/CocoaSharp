using ObjectiveC;using System;using SharpSwift.Attributes;using System.Collections.Generic;namespace Foundation{    /// <summary>    /// NSKeyedUnarchiver, a concrete subclass of NSCoder, defines methods for decoding a set of named objects (and scalar values) from a keyed archive. Such archives are produced by instances of the NSKeyedArchiver class.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSKeyedUnarchiver_Class/index.html#//apple_ref/occ/cl/NSKeyedUnarchiver"/>    [iOSVersion(2)]    [Export("")]    public class NSKeyedUnarchiver : NSCoder//, AnyObject, CVarArgType, Equatable, Hashable, NSObjectProtocol, Printable    {        public NSKeyedUnarchiver() { }        /// <summary>        /// Initializes the receiver for decoding an archive previously encoded by NSKeyedArchiver.        /// </summary>        /// <param name="forReadingWithData">An archive previously encoded by NSKeyedArchiver.</param>        [iOSVersion(2)]        public NSKeyedUnarchiver(NSData forReadingWithData) { }                /// <summary>        /// Decodes and returns the object graph previously encoded by NSKeyedArchiver and stored in a given NSData object.        /// </summary>        /// <param name="data">An object graph previously encoded by NSKeyedArchiver.</param>        [iOSVersion(2)]        [Export("unarchiveObjectWithData")]        [return:Optional]        public static AnyObject UnarchiveObjectWithData(NSData data) { return default(AnyObject); }                /// <summary>        /// Decodes and returns the object graph previously encoded by NSKeyedArchiver written to the file at a given path.        /// </summary>        /// <param name="path">A path to a file that contains an object graph previously encoded by NSKeyedArchiver.</param>        [iOSVersion(2)]        [Export("unarchiveObjectWithFile")]        [return:Optional]        public static AnyObject UnarchiveObjectWithFile(string path) { return default(AnyObject); }                /// <summary>        /// Indicates whether the receiver requires all unarchived classes to conform to NSSecureCoding.        /// </summary>        /// <param name="flag">true if the receiver requires NSSecureCoding; false if not.</param>        [iOSVersion(6)]        [Export("setRequiresSecureCoding")]        public virtual void SetRequiresSecureCoding(bool flag) {  }                /// <summary>        /// Returns a Boolean value that indicates whether the archive contains a value for a given key within the current decoding scope.        /// </summary>        /// <param name="key">A key in the archive within the current decoding scope. key must not be nil.</param>        [iOSVersion(2)]        [Export("containsValueForKey")]        public virtual bool ContainsValueForKey(string key) { return default(bool); }                /// <summary>        /// Decodes a Boolean value associated with a given key.        /// </summary>        /// <param name="key">A key in the archive within the current decoding scope. key must not be nil.</param>        [iOSVersion(2)]        [Export("decodeBoolForKey")]        public virtual bool DecodeBoolForKey(string key) { return default(bool); }                /// <summary>        /// Decodes a stream of bytes associated with a given key.        /// </summary>        /// <param name="key">A key in the archive within the current decoding scope. key must not be nil.</param>        /// <param name="returnedLength">Upon return, contains the number of bytes returned.</param>        [iOSVersion(2)]        [Export("decodeBytesForKey")]        public virtual UnsafePointer<UInt8> DecodeBytesForKey(string key, UnsafeMutablePointer<int> returnedLength) { return default(UnsafePointer<UInt8>); }                /// <summary>        /// Decodes a double-precision floating-point value associated with a given key.        /// </summary>        /// <param name="key">A key in the archive within the current decoding scope. key must not be nil.</param>        [iOSVersion(2)]        [Export("decodeDoubleForKey")]        public virtual Double DecodeDoubleForKey(string key) { return default(Double); }                /// <summary>        /// Decodes a single-precision floating-point value associated with a given key.        /// </summary>        /// <param name="key">A key in the archive within the current decoding scope. key must not be nil.</param>        [iOSVersion(2)]        [Export("decodeFloatForKey")]        public virtual float DecodeFloatForKey(string key) { return default(float); }                /// <summary>        /// Decodes an integer value associated with a given key.        /// </summary>        /// <param name="key">A key in the archive within the current decoding scope. key must not be nil.</param>        [iOSVersion(2)]        [Export("decodeIntForKey")]        public virtual int DecodeIntForKey(string key) { return default(int); }                /// <summary>        /// Decodes a 32-bit integer value associated with a given key.        /// </summary>        /// <param name="key">A key in the archive within the current decoding scope. key must not be nil.</param>        [iOSVersion(2)]        [Export("decodeInt32ForKey")]        public virtual int DecodeInt32ForKey(string key) { return default(int); }                /// <summary>        /// Decodes a 64-bit integer value associated with a given key.        /// </summary>        /// <param name="key">A key in the archive within the current decoding scope. key must not be nil.</param>        [iOSVersion(2)]        [Export("decodeInt64ForKey")]        public virtual Int64 DecodeInt64ForKey(string key) { return default(Int64); }                /// <summary>        /// Decodes and returns an object associated with a given key.        /// </summary>        /// <param name="key">A key in the archive within the current decoding scope. key must not be nil.</param>        [iOSVersion(2)]        [Export("decodeObjectForKey")]        [return:Optional]        public virtual AnyObject DecodeObjectForKey(string key) { return default(AnyObject); }                /// <summary>        /// Tells the receiver that you are finished decoding objects.        /// </summary>        [iOSVersion(2)]        [Export("finishDecoding")]        public virtual void FinishDecoding() {  }                /// <summary>        /// Adds a class translation mapping to NSKeyedUnarchiver whereby objects encoded with a given class name are decoded as instances of a given class instead.        /// </summary>        /// <param name="cls">The class with which to replace instances of the class named codedName.</param>        /// <param name="forClassName">The ostensible name of a class in an archive.</param>        [iOSVersion(2)]        [Export("setClass")]        public static void SetClass([Optional] AnyClass cls, string forClassName) {  }                /// <summary>        /// Returns the class from which NSKeyedUnarchiver instantiates an encoded object with a given class name.        /// </summary>        /// <param name="codedName">The ostensible name of a class in an archive.</param>        [iOSVersion(2)]        [Export("classForClassName")]        [return:Optional]        public static AnyClass ClassForClassName(string codedName) { return default(AnyClass); }                /// <summary>        /// Adds a class translation mapping to the receiver whereby objects encoded with a given class name are decoded as instances of a given class instead.        /// </summary>        /// <param name="cls">The class with which to replace instances of the class named codedName.</param>        /// <param name="forClassName">The ostensible name of a class in an archive.</param>        /// <param name="NAME_YOUR_PARAMS">DO NOT USE THIS PARAMETER - Instead make sure to name the parameters you're using.</param>        [iOSVersion(2)]        [Export("setClass")]        [IgnoreParameter("NAME_YOUR_PARAMS")]        public virtual void SetClass([Optional] AnyClass cls, string forClassName, bool NAME_YOUR_PARAMS = false) {  }                /// <summary>        /// Returns the class from which the receiver instantiates an encoded object with a given class name.        /// </summary>        /// <param name="codedName">The name of a class.</param>        /// <param name="NAME_YOUR_PARAMS">DO NOT USE THIS PARAMETER - Instead make sure to name the parameters you're using.</param>        [iOSVersion(2)]        [Export("classForClassName")]        [return:Optional]        [IgnoreParameter("NAME_YOUR_PARAMS")]        public virtual AnyClass ClassForClassName(string codedName, bool NAME_YOUR_PARAMS = false) { return default(AnyClass); }                /// <summary>        /// The receiverâ€™s delegate.        /// </summary>        [iOSVersion(2)]        [Export("delegate")]        [Optional]        public NSKeyedUnarchiverDelegate Delegate { get; set; }    }}