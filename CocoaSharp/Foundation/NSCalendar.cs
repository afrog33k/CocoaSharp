using ObjectiveC;using System;using SwiftSharp.Attributes;using System.Collections.Generic;namespace Foundation{	/// <summary>	/// Calendars encapsulate information about systems of reckoning time in which the beginning, length, and divisions of a year are defined. They provide information about the calendar and support for calendrical computations such as determining the range of a given calendrical unit and adding units to a given absolute time.	/// </summary>	/// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSCalendar_Class/index.html#//apple_ref/occ/cl/NSCalendar"/>	[iOSVersion(2)]	public class NSCalendar : NSObject, AnyObject, NSCoding, NSCopying, NSObjectProtocol, NSSecureCoding	{		/// <summary>		/// Returns the logical calendar for the current user.		/// </summary>		[iOSVersion(2)]		[Export("currentCalendar")]		public static NSCalendar CurrentCalendar() { return default(NSCalendar); }				/// <summary>		/// Returns the current logical calendar for the current user.		/// </summary>		[iOSVersion(2)]		[Export("autoupdatingCurrentCalendar")]		public static NSCalendar AutoupdatingCurrentCalendar() { return default(NSCalendar); }				/// <summary>		/// Initializes a newly-allocated NSCalendar object for the calendar specified by a given identifier.		/// </summary>		/// <param name="calendarIdentifier">The identifier for the new calendar. For valid identifiers, see NSLocale.</param>		[iOSVersion(2)]		public NSCalendar(string calendarIdentifier) { }				/// <summary>		/// The maximum range limits of the values that a given unit can take on in the receive		/// </summary>		/// <param name="unit">The unit for which the maximum range is returned.</param>		[iOSVersion(2)]		[Export("maximumRangeOfUnit")]		public NSRange MaximumRangeOfUnit(NSCalendarUnit unit) { return default(NSRange); }				/// <summary>		/// Returns the minimum range limits of the values that a given unit can take on in the receiver.		/// </summary>		/// <param name="unit">The unit for which the maximum range is returned.</param>		[iOSVersion(2)]		[Export("minimumRangeOfUnit")]		public NSRange MinimumRangeOfUnit(NSCalendarUnit unit) { return default(NSRange); }				/// <summary>		/// Returns, for a given absolute time, the ordinal number of a smaller calendar unit (such as a day) within a specified larger calendar unit (such as a week).		/// </summary>		/// <param name="smaller">The smaller calendar unit</param>		/// <param name="inUnit">The larger calendar unit</param>		/// <param name="forDate">The absolute time for which the calculation is performed</param>		[iOSVersion(2)]		[Export("ordinalityOfUnit")]		public int OrdinalityOfUnit(NSCalendarUnit smaller, NSCalendarUnit inUnit, NSDate forDate) { return default(int); }				/// <summary>		/// Returns the range of absolute time values that a smaller calendar unit (such as a day) can take on in a larger calendar unit (such as a month) that includes a specified absolute time.		/// </summary>		/// <param name="smaller">The smaller calendar unit.</param>		/// <param name="inUnit">The larger calendar unit.</param>		/// <param name="forDate">The absolute time for which the calculation is performed.</param>		[iOSVersion(2)]		[Export("rangeOfUnit")]		public NSRange RangeOfUnit(NSCalendarUnit smaller, NSCalendarUnit inUnit, NSDate forDate) { return default(NSRange); }				/// <summary>		/// Returns by reference the starting time and duration of a given calendar unit that contains a given date.		/// </summary>		/// <param name="unit">A calendar unit (see Calendar Units for possible values).</param>		/// <param name="startDate">Upon return, contains the starting time of the calendar unit unit that contains the date date</param>		/// <param name="interval">Upon return, contains the duration of the calendar unit unit that contains the date date</param>		/// <param name="forDate">A date.</param>		[iOSVersion(2)]		[Export("rangeOfUnit")]		public bool RangeOfUnit(NSCalendarUnit unit, AutoreleasingUnsafePointer<NSDate> startDate, UnsafePointer<NSTimeInterval> interval, NSDate forDate) { return default(bool); }				/// <summary>		/// Returns a NSDateComponents object containing a given date decomposed into specified components.		/// </summary>		/// <param name="unitFlags">The components into which to decompose date—a bitwise OR of NSCalendarUnit constants.</param>		/// <param name="fromDate">The date for which to perform the calculation.</param>		[iOSVersion(2)]		[Export("components")]		public NSDateComponents Components(NSCalendarUnit unitFlags, NSDate fromDate) { return default(NSDateComponents); }				/// <summary>		/// Returns, as an NSDateComponents object using specified components, the difference between two supplied dates.		/// </summary>		/// <param name="unitFlags">Specifies the components for the returned NSDateComponents object—a bitwise OR of NSCalendarUnit constants.</param>		/// <param name="fromDate">The start date for the calculation.</param>		/// <param name="toDate">The end date for the calculation.</param>		/// <param name="options">Options for the calculation.		///   If you specify a “wrap” option (NSWrapCalendarComponents), the specified components are incremented and wrap around to zero/one on overflow, but do not cause higher units to be incremented. When the wrap option is false, overflow in a unit carries into the higher units, as in typical addition.</param>		[iOSVersion(2)]		[Export("components")]		public NSDateComponents Components(NSCalendarUnit unitFlags, NSDate fromDate, NSDate toDate, NSCalendarOptions options) { return default(NSDateComponents); }				/// <summary>		/// Returns a new NSDate object representing the absolute time calculated by adding given components to a given date.		/// </summary>		/// <param name="comps">The components to add to date.</param>		/// <param name="toDate">The date to which comps are added.</param>		/// <param name="options">Options for the calculation. See “NSDateComponents wrapping behavior” for possible values. Pass 0 to specify no options.		///   If you specify no options (you pass 0), overflow in a unit carries into the higher units (as in typical addition).</param>		[iOSVersion(2)]		[Export("dateByAddingComponents")]		public NSDate DateByAddingComponents(NSDateComponents comps, NSDate toDate, NSCalendarOptions options) { return default(NSDate); }				/// <summary>		/// Returns a new NSDate object representing the absolute time calculated from given components.		/// </summary>		/// <param name="comps">The components from which to calculate the returned date.</param>		[iOSVersion(2)]		[Export("dateFromComponents")]		public NSDate DateFromComponents(NSDateComponents comps) { return default(NSDate); }				/// <summary>		/// Sets the index of the first weekday for the receiver.		/// </summary>		[iOSVersion(2)]		[Export("firstWeekday")]		public int FirstWeekday { get; set; }				/// <summary>		/// Sets the locale for the receiver.		/// </summary>		[iOSVersion(2)]		[Export("locale")]		public NSLocale Locale { get; set; }				/// <summary>		/// Sets the minimum number of days in the first week of the receiver.		/// </summary>		[iOSVersion(2)]		[Export("minimumDaysInFirstWeek")]		public int MinimumDaysInFirstWeek { get; set; }				/// <summary>		/// Sets the time zone for the receiver.		/// </summary>		[iOSVersion(2)]		[Export("timeZone")]		public NSTimeZone TimeZone { get; set; }				/// <summary>		/// Returns the identifier for the receiver.		/// </summary>		[iOSVersion(2)]		[Export("calendarIdentifier")]		public string CalendarIdentifier { get; private set; }				/// <summary>		/// The wrapping option specifies wrapping behavior for calculations involving NSDateComponents objects.		/// </summary>		public int NSWrapCalendarComponents { get; set; }	}	/// <summary>	/// Specify calendrical units such as day and month.	/// </summary>	[iOSVersion(2)]	public enum NSCalendarUnit	{		/// <summary>		/// 		/// </summary>		CalendarUnitEra,		/// <summary>		/// 		/// </summary>		CalendarUnitYear,		/// <summary>		/// 		/// </summary>		CalendarUnitMonth,		/// <summary>		/// 		/// </summary>		CalendarUnitDay,		/// <summary>		/// 		/// </summary>		CalendarUnitHour,		/// <summary>		/// 		/// </summary>		CalendarUnitMinute,		/// <summary>		/// 		/// </summary>		CalendarUnitSecond,		/// <summary>		/// 		/// </summary>		CalendarUnitWeekday,		/// <summary>		/// 		/// </summary>		CalendarUnitWeekdayOrdinal,		/// <summary>		/// 		/// </summary>		CalendarUnitQuarter,		/// <summary>		/// 		/// </summary>		CalendarUnitWeekOfMonth,		/// <summary>		/// 		/// </summary>		CalendarUnitWeekOfYear,		/// <summary>		/// 		/// </summary>		CalendarUnitYearForWeekOfYear,		/// <summary>		/// 		/// </summary>		CalendarUnitNanosecond,		/// <summary>		/// 		/// </summary>		CalendarUnitCalendar,		/// <summary>		/// 		/// </summary>		CalendarUnitTimeZone,		/// <summary>		/// Specifies the era unit.		/// The corresponding value is an NSInteger. Equal to kCFCalendarUnitEra.		/// Available in iOS 2.0 and later.		/// Deprecated in iOS 8.0.		/// </summary>		[Obsolete]		EraCalendarUnit,		/// <summary>		/// Specifies the year unit.		/// The corresponding value is an NSInteger. Equal to kCFCalendarUnitYear.		/// Available in iOS 2.0 and later.		/// Deprecated in iOS 8.0.		/// </summary>		[Obsolete]		YearCalendarUnit,		/// <summary>		/// Specifies the month unit.		/// The corresponding value is an NSInteger. Equal to kCFCalendarUnitMonth.		/// Available in iOS 2.0 and later.		/// Deprecated in iOS 8.0.		/// </summary>		[Obsolete]		MonthCalendarUnit,		/// <summary>		/// Specifies the day unit.		/// The corresponding value is an NSInteger. Equal to kCFCalendarUnitDay.		/// Available in iOS 2.0 and later.		/// Deprecated in iOS 8.0.		/// </summary>		[Obsolete]		DayCalendarUnit,		/// <summary>		/// Specifies the hour unit.		/// The corresponding value is an NSInteger. Equal to kCFCalendarUnitHour.		/// Available in iOS 2.0 and later.		/// Deprecated in iOS 8.0.		/// </summary>		[Obsolete]		HourCalendarUnit,		/// <summary>		/// Specifies the minute unit.		/// The corresponding value is an NSInteger. Equal to kCFCalendarUnitMinute.		/// Available in iOS 2.0 and later.		/// Deprecated in iOS 8.0.		/// </summary>		[Obsolete]		MinuteCalendarUnit,		/// <summary>		/// Specifies the second unit.		/// The corresponding value is a double. Equal to kCFCalendarUnitSecond.		/// Available in iOS 2.0 and later.		/// Deprecated in iOS 8.0.		/// </summary>		[Obsolete]		SecondCalendarUnit,		/// <summary>		/// Specifies the week unit.		/// The corresponding value is an kCFCalendarUnitSecond. Equal to kCFCalendarUnitWeek.		/// Available in iOS 2.0 and later.		/// Deprecated in iOS 8.0.		/// </summary>		[Obsolete]		WeekCalendarUnit,		/// <summary>		/// Specifies the weekday unit.		/// The corresponding value is an kCFCalendarUnitSecond. Equal to kCFCalendarUnitWeekday. The weekday units are the numbers 1 through N (where for the Gregorian calendar N=7 and 1 is Sunday).		/// Available in iOS 2.0 and later.		/// Deprecated in iOS 8.0.		/// </summary>		[Obsolete]		WeekdayCalendarUnit,		/// <summary>		/// Specifies the ordinal weekday unit.		/// The corresponding value is an kCFCalendarUnitSecond. Equal to kCFCalendarUnitWeekdayOrdinal. The weekday ordinal unit describes ordinal position within the month unit of the corresponding weekday unit. For example, in the Gregorian calendar a weekday ordinal unit of 2 for a weekday unit 3 indicates &quot;the second Tuesday in the month&quot;.		/// Available in iOS 2.0 and later.		/// Deprecated in iOS 8.0.		/// </summary>		[Obsolete]		WeekdayOrdinalCalendarUnit,		/// <summary>		/// Specifies the quarter of the calendar as an kCFCalendarUnitSecond.		/// Available in iOS 4.0 and later.		/// Deprecated in iOS 8.0.		/// </summary>		[Obsolete]		QuarterCalendarUnit,		/// <summary>		/// Specifies the original week of a month calendar unit.		/// Available in iOS 5.0 and later.		/// Deprecated in iOS 8.0.		/// </summary>		[Obsolete]		WeekOfMonthCalendarUnit,		/// <summary>		/// Specifies the original week of the year calendar unit.		/// Available in iOS 5.0 and later.		/// Deprecated in iOS 8.0.		/// </summary>		[Obsolete]		WeekOfYearCalendarUnit,		/// <summary>		/// Specifies the year when the calendar is being interpreted as a week-based calendar.		/// Available in iOS 5.0 and later.		/// Deprecated in iOS 8.0.		/// </summary>		[Obsolete]		YearForWeekOfYearCalendarUnit,		/// <summary>		/// Specifies the calendar of the calendar.		/// Available in iOS 4.0 and later.		/// Deprecated in iOS 8.0.		/// </summary>		[Obsolete]		CalendarCalendarUnit,		/// <summary>		/// Specifies the time zone of the calendar as an NSTimeZone.		/// Available in iOS 4.0 and later.		/// Deprecated in iOS 8.0.		/// </summary>		[Obsolete]		TimeZoneCalendarUnit,	}}