using ObjectiveC;using System;using SharpSwift.Attributes;using System.Collections.Generic;namespace Foundation{    /// <summary>    /// You use the NSJSONSerialization class to convert JSON to Foundation objects and convert Foundation objects to JSON.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/Foundation/Reference/NSJSONSerialization_Class/index.html#//apple_ref/occ/cl/NSJSONSerialization"/>    [iOSVersion(5)]    public class NSJSONSerialization : NSObject//, AnyObject, NSObjectProtocol    {        /// <summary>        /// Returns a Foundation object from given JSON data.        /// </summary>        /// <param name="data">A data object containing JSON data.</param>        /// <param name="options">Options for reading the JSON data and creating the Foundation objects.        ///   For possible values, see NSJSONReadingOptions.</param>        /// <param name="error">If an error occurs, upon return contains an NSError object that describes the problem.</param>        [iOSVersion(5)]        public static AnyObject JSONObjectWithData(NSData data, NSJSONReadingOptions options, NSErrorPointer error) { return default(AnyObject); }                /// <summary>        /// Returns a Foundation object from JSON data in a given stream.        /// </summary>        /// <param name="stream">A stream from which to read JSON data.        ///   The stream should be opened and configured.</param>        /// <param name="options">Options for reading the JSON data and creating the Foundation objects.        ///   For possible values, see NSJSONReadingOptions.</param>        /// <param name="error">If an error occurs, upon return contains an NSError object that describes the problem.</param>        public static AnyObject JSONObjectWithStream(NSInputStream stream, NSJSONReadingOptions options, NSErrorPointer error) { return default(AnyObject); }                /// <summary>        /// Returns JSON data from a Foundation object.        /// </summary>        /// <param name="obj">The object from which to generate JSON data. Must not be nil.</param>        /// <param name="options">Options for creating the JSON data.        ///   See NSJSONWritingOptions for possible values. Pass 0 to specify no options.</param>        /// <param name="error">If an internal error occurs, upon return contains an NSError object that describes the problem.</param>        [iOSVersion(5)]        [Export("dataWithJSONObject")]        public static NSData DataWithJSONObject(AnyObject obj, NSJSONWritingOptions options, NSErrorPointer error) { return default(NSData); }                /// <summary>        /// Writes a given JSON object to a stream.        /// </summary>        /// <param name="obj">The object to write to stream.</param>        /// <param name="toStream">The stream to which to write.        ///   The stream should be opened and configured.</param>        /// <param name="options">Options for writing the JSON data.        ///   See NSJSONWritingOptions for possible values. Pass 0 to specify no options.</param>        /// <param name="error">If an error occurs, upon return contains an NSError object that describes the problem.</param>        [iOSVersion(5)]        [Export("writeJSONObject")]        public static int WriteJSONObject(AnyObject obj, NSOutputStream toStream, NSJSONWritingOptions options, NSErrorPointer error) { return default(int); }                /// <summary>        /// Returns a Boolean value that indicates whether a given object can be converted to JSON data.        /// </summary>        /// <param name="obj">The object to test.</param>        [iOSVersion(5)]        [Export("isValidJSONObject")]        public static bool IsValidJSONObject(AnyObject obj) { return default(bool); }    }    /// <summary>    /// Options used when creating Foundation objects from JSON dataâ€”see JSONObjectWithData:options:error: and JSONObjectWithStream:options:error:.    /// </summary>    [iOSVersion(5)]    public enum NSJSONReadingOptions    {        /// <summary>        /// Specifies that arrays and dictionaries are created as mutable objects.        /// </summary>        [iOSVersion(5)]        MutableContainers,        /// <summary>        /// Specifies that leaf strings in the JSON object graph are created as instances of NSMutableString.        /// </summary>        [iOSVersion(5)]        MutableLeaves,        /// <summary>        /// Specifies that the parser should allow top-level objects that are not an instance of NSArray or NSDictionary.        /// </summary>        [iOSVersion(5)]        AllowFragments,    }    /// <summary>    /// Options for writing JSON data.    /// </summary>    [iOSVersion(5)]    public enum NSJSONWritingOptions    {        /// <summary>        /// Specifies that the JSON data should be generated with whitespace designed to make the output more readable. If this option is not set, the most compact possible JSON representation is generated.        /// </summary>        [iOSVersion(5)]        PrettyPrinted,    }}