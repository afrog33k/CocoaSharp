using ObjectiveC;using System;using SwiftSharp.Attributes;using System.Collections.Generic;namespace Foundation{	/// <summary>	/// The NSCoder abstract class declares the interface used by concrete subclasses to transfer objects and other values between memory and some other format. This capability provides the basis for archiving (where objects and data items are stored on disk) and distribution (where objects and data items are copied between different processes or threads). The concrete subclasses provided by Foundation for these purposes are NSArchiver, NSUnarchiver, NSKeyedArchiver, NSKeyedUnarchiver, and NSPortCoder. Concrete subclasses of NSCoder are referred to in general as coder classes, and instances of these classes as coder objects (or simply coders). A coder object that can only encode values is referred to as an encoder object, and one that can only decode values as a decoder object.	/// </summary>	/// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSCoder_Class/index.html#//apple_ref/occ/cl/NSCoder"/>	[iOSVersion(2)]	public class NSCoder : NSObject//, AnyObject, NSObjectProtocol	{		/// <summary>		/// Returns a Boolean value that indicates whether an encoded value is available for a string.		/// </summary>		/// <param name="key"></param>		[iOSVersion(2)]		[Export("containsValueForKey")]		public bool ContainsValueForKey(string key) { return default(bool); }				/// <summary>		/// Encodes an array of count items, whose Objective-C type is given by itemType.		/// </summary>		/// <param name="type"></param>		/// <param name="count"></param>		/// <param name="at"></param>		[iOSVersion(2)]		[Export("encodeArrayOfObjCType")]		public void EncodeArrayOfObjCType(ConstUnsafePointer<Int8> type, int count, ConstUnsafePointer<Action> at) {  }				/// <summary>		/// Encodes boolv and associates it with the string key.		/// </summary>		/// <param name="boolv"></param>		/// <param name="forKey"></param>		[iOSVersion(2)]		[Export("encodeBool")]		public void EncodeBool(bool boolv, string forKey) {  }				/// <summary>		/// Can be overridden by subclasses to encode object so that a copy, rather than a proxy, is created upon decoding.		/// </summary>		/// <param name="anObject"></param>		[iOSVersion(2)]		[Export("encodeBycopyObject")]		public void EncodeBycopyObject(AnyObject anObject) {  }				/// <summary>		/// Can be overridden by subclasses to encode object so that a proxy, rather than a copy, is created upon decoding.		/// </summary>		/// <param name="anObject"></param>		[iOSVersion(2)]		[Export("encodeByrefObject")]		public void EncodeByrefObject(AnyObject anObject) {  }				/// <summary>		/// Encodes a buffer of data whose types are unspecified.		/// </summary>		/// <param name="byteaddr"></param>		/// <param name="length"></param>		[iOSVersion(2)]		[Export("encodeBytes")]		public void EncodeBytes(ConstUnsafePointer<Action> byteaddr, int length) {  }				/// <summary>		/// Encodes a buffer of data, bytesp, whose length is specified by lenv, and associates it with the string key.		/// </summary>		/// <param name="bytesp"></param>		/// <param name="length"></param>		/// <param name="forKey"></param>		[iOSVersion(2)]		[Export("encodeBytes")]		public void EncodeBytes(ConstUnsafePointer<UInt8> bytesp, int length, string forKey) {  }				/// <summary>		/// Can be overridden by subclasses to conditionally encode object, preserving common references to that object.		/// </summary>		/// <param name="@object"></param>		[iOSVersion(2)]		[Export("encodeConditionalObject")]		public void EncodeConditionalObject(AnyObject @object) {  }				/// <summary>		/// Conditionally encodes a reference to objv and associates it with the string key only if objv has been unconditionally encoded with encodeObject:forKey:.		/// </summary>		/// <param name="objv"></param>		/// <param name="forKey"></param>		[iOSVersion(2)]		[Export("encodeConditionalObject")]		public void EncodeConditionalObject(AnyObject objv, string forKey) {  }				/// <summary>		/// Encodes a given NSData object.		/// </summary>		/// <param name="data"></param>		[iOSVersion(2)]		[Export("encodeDataObject")]		public void EncodeDataObject(NSData data) {  }				/// <summary>		/// Encodes realv and associates it with the string key.		/// </summary>		/// <param name="realv"></param>		/// <param name="forKey"></param>		[iOSVersion(2)]		[Export("encodeDouble")]		public void EncodeDouble(Double realv, string forKey) {  }				/// <summary>		/// Encodes realv and associates it with the string key.		/// </summary>		/// <param name="realv"></param>		/// <param name="forKey"></param>		[iOSVersion(2)]		[Export("encodeFloat")]		public void EncodeFloat(Float realv, string forKey) {  }				/// <summary>		/// Encodes intv and associates it with the string key.		/// </summary>		/// <param name="intv"></param>		/// <param name="forKey"></param>		[iOSVersion(2)]		[Export("encodeInt")]		public void EncodeInt(int intv, string forKey) {  }				/// <summary>		/// Encodes a given NSInteger and associates it with a given key.		/// </summary>		/// <param name="intv"></param>		/// <param name="forKey"></param>		[iOSVersion(2)]		[Export("encodeInteger")]		public void EncodeInteger(int intv, string forKey) {  }				/// <summary>		/// Encodes the 32-bit integer intv and associates it with the string key.		/// </summary>		/// <param name="intv"></param>		/// <param name="forKey"></param>		[iOSVersion(2)]		[Export("encodeInt32")]		public void EncodeInt32(int intv, string forKey) {  }				/// <summary>		/// Encodes the 64-bit integer intv and associates it with the string key.		/// </summary>		/// <param name="intv"></param>		/// <param name="forKey"></param>		[iOSVersion(2)]		[Export("encodeInt64")]		public void EncodeInt64(Int64 intv, string forKey) {  }				/// <summary>		/// Encodes object.		/// </summary>		/// <param name="@object"></param>		[iOSVersion(2)]		[Export("encodeObject")]		public void EncodeObject(AnyObject @object) {  }				/// <summary>		/// Encodes the object objv and associates it with the string key.		/// </summary>		/// <param name="objv"></param>		/// <param name="forKey"></param>		[iOSVersion(2)]		[Export("encodeObject")]		public void EncodeObject(AnyObject objv, string forKey) {  }				/// <summary>		/// Can be overridden by subclasses to encode an interconnected group of Objective-C objects, starting with rootObject.		/// </summary>		/// <param name="rootObject"></param>		[iOSVersion(2)]		[Export("encodeRootObject")]		public void EncodeRootObject(AnyObject rootObject) {  }				/// <summary>		/// Must be overridden by subclasses to encode a single value residing at address, whose Objective-C type is given by valueType.		/// </summary>		/// <param name="type"></param>		/// <param name="at"></param>		[iOSVersion(2)]		[Export("encodeValueOfObjCType")]		public void EncodeValueOfObjCType(ConstUnsafePointer<Int8> type, ConstUnsafePointer<Action> at) {  }				/// <summary>		/// Decodes an array of count items, whose Objective-C type is given by itemType.		/// </summary>		/// <param name="itemType"></param>		/// <param name="count"></param>		/// <param name="at"></param>		[iOSVersion(2)]		[Export("decodeArrayOfObjCType")]		public void DecodeArrayOfObjCType(ConstUnsafePointer<Int8> itemType, int count, UnsafePointer<Action> at) {  }				/// <summary>		/// Decodes and returns a boolean value that was previously encoded with encodeBool:forKey: and associated with the string key.		/// </summary>		/// <param name="key"></param>		[iOSVersion(2)]		[Export("decodeBoolForKey")]		public bool DecodeBoolForKey(string key) { return default(bool); }				/// <summary>		/// Decodes a buffer of data that was previously encoded with encodeBytes:length:forKey: and associated with the string key.		/// </summary>		/// <param name="key"></param>		/// <param name="returnedLength"></param>		[iOSVersion(2)]		[Export("decodeBytesForKey")]		public ConstUnsafePointer<UInt8> DecodeBytesForKey(string key, UnsafePointer<int> returnedLength) { return default(ConstUnsafePointer<UInt8>); }				/// <summary>		/// Decodes a buffer of data whose types are unspecified.		/// </summary>		/// <param name="lengthp"></param>		[iOSVersion(2)]		[Export("decodeBytesWithReturnedLength")]		public UnsafePointer<Action> DecodeBytesWithReturnedLength(WEIRD lengthp) { return default(UnsafePointer<Action>); }				/// <summary>		/// Decodes and returns an NSData object that was previously encoded with encodeDataObject:. Subclasses must override this method.		/// </summary>		[iOSVersion(2)]		[Export("decodeDataObject")]		public NSData DecodeDataObject() { return default(NSData); }				/// <summary>		/// Decodes and returns a double value that was previously encoded with either encodeFloat:forKey: or encodeDouble:forKey: and associated with the string key.		/// </summary>		/// <param name="key"></param>		[iOSVersion(2)]		[Export("decodeDoubleForKey")]		public Double DecodeDoubleForKey(string key) { return default(Double); }				/// <summary>		/// Decodes and returns a float value that was previously encoded with encodeFloat:forKey: or encodeDouble:forKey: and associated with the string key.		/// </summary>		/// <param name="key"></param>		[iOSVersion(2)]		[Export("decodeFloatForKey")]		public Float DecodeFloatForKey(string key) { return default(Float); }				/// <summary>		/// Decodes and returns an int value that was previously encoded with encodeInt:forKey:, encodeInteger:forKey:, encodeInt32:forKey:, or encodeInt64:forKey: and associated with the string key.		/// </summary>		/// <param name="key"></param>		[iOSVersion(2)]		[Export("decodeIntForKey")]		public int DecodeIntForKey(string key) { return default(int); }				/// <summary>		/// Decodes and returns an NSInteger value that was previously encoded with encodeInt:forKey:, encodeInteger:forKey:, encodeInt32:forKey:, or encodeInt64:forKey: and associated with the string key.		/// </summary>		/// <param name="key"></param>		[iOSVersion(2)]		[Export("decodeIntegerForKey")]		public int DecodeIntegerForKey(string key) { return default(int); }				/// <summary>		/// Decodes and returns a 32-bit integer value that was previously encoded with encodeInt:forKey:, encodeInteger:forKey:, encodeInt32:forKey:, or encodeInt64:forKey: and associated with the string key.		/// </summary>		/// <param name="key"></param>		[iOSVersion(2)]		[Export("decodeInt32ForKey")]		public int DecodeInt32ForKey(string key) { return default(int); }				/// <summary>		/// Decodes and returns a 64-bit integer value that was previously encoded with encodeInt:forKey:, encodeInteger:forKey:, encodeInt32:forKey:, or encodeInt64:forKey: and associated with the string key.		/// </summary>		/// <param name="key"></param>		[iOSVersion(2)]		[Export("decodeInt64ForKey")]		public Int64 DecodeInt64ForKey(string key) { return default(Int64); }				/// <summary>		/// Decodes an Objective-C object that was previously encoded with any of the encode...Object: methods.		/// </summary>		[iOSVersion(2)]		[Export("decodeObject")]		public AnyObject DecodeObject() { return default(AnyObject); }				/// <summary>		/// Decodes and returns an Objective-C object that was previously encoded with encodeObject:forKey: or encodeConditionalObject:forKey: and associated with the string key.		/// </summary>		/// <param name="key"></param>		[iOSVersion(2)]		[Export("decodeObjectForKey")]		public AnyObject DecodeObjectForKey(string key) { return default(AnyObject); }				/// <summary>		/// Decodes a single value, whose Objective-C type is given by valueType.		/// </summary>		/// <param name="type"></param>		/// <param name="at"></param>		[iOSVersion(2)]		[Export("decodeValueOfObjCType")]		public void DecodeValueOfObjCType(ConstUnsafePointer<Int8> type, UnsafePointer<Action> at) {  }				/// <summary>		/// Decodes an object for the key, restricted to the specified class.		/// </summary>		/// <param name="aClass">The expect class type.</param>		/// <param name="forKey">The coder key.</param>		[iOSVersion(6)]		[Export("decodeObjectOfClass")]		public AnyObject DecodeObjectOfClass(AnyClass aClass, string forKey) { return default(AnyObject); }				/// <summary>		/// Decodes an object for the key, restricted to the specified classes.		/// </summary>		/// <param name="classes">A set of the expected classes.</param>		/// <param name="forKey">The coder key.</param>		[iOSVersion(6)]		[Export("decodeObjectOfClasses")]		public AnyObject DecodeObjectOfClasses(NSSet classes, string forKey) { return default(AnyObject); }				/// <summary>		/// Returns a decoded property list for the specified key.		/// </summary>		/// <param name="key">The coder key.</param>		[iOSVersion(6)]		[Export("decodePropertyListForKey")]		public AnyObject DecodePropertyListForKey(string key) { return default(AnyObject); }				/// <summary>		/// This method is present for historical reasons and is not used with keyed archivers.		/// </summary>		/// <param name="className"></param>		[iOSVersion(2)]		[Export("versionForClassName")]		public int VersionForClassName(string className) { return default(int); }				/// <summary>		/// Returns a Boolean value that indicates whether the receiver supports keyed coding of objects.		/// </summary>		[iOSVersion(2)]		[Export("allowsKeyedCoding")]		public bool AllowsKeyedCoding { get; private set; }				/// <summary>		/// Returns whether the coder requires secure coding.		/// </summary>		[iOSVersion(6)]		[Export("requiresSecureCoding")]		public bool RequiresSecureCoding { get; private set; }				/// <summary>		/// Get the current set of coded classes that allow secure coding.		/// </summary>		[iOSVersion(6)]		[Export("allowedClasses")]		public NSSet AllowedClasses { get; private set; }				/// <summary>		/// During encoding, this method should return the system version currently in effect.		/// </summary>		[iOSVersion(2)]		[Export("systemVersion")]		public uint SystemVersion { get; private set; }	}}