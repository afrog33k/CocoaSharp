using ObjectiveC;using System;using SwiftSharp.Attributes;namespace Foundation{    //https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSExpression_Class/index.html#//apple_ref/occ/cl/NSExpression    /// <summary>    /// NSExpression is used to represent expressions in a predicate.    /// </summary>    [iOSVersion(3)]    public class NSExpression : NSObject    {        /// <summary>        /// Initializes the receiver with the specified expression type.        /// </summary>        /// <param name="expressionType">The type of the new expression, as defined by NSExpressionType.</param>        /// <returns>An initialized NSExpression object of the type type.</returns>        [iOSVersion(3)]        public NSExpression(NSExpressionType expressionType) { }                /// <summary>        /// Initializes the receiver with the specified expression format and array of arguments.        /// </summary>        /// <param name="format">The expression format.</param>        /// <param name="argumentArray">An array of arguments to be used with the expressionFormat string.</param>        /// <returns>An initialized NSExpression object with the specified arguments.</returns>        [iOSVersion(4)]        public NSExpression(string format, AnyObject[] argumentArray) { }                /// <summary>
        /// !! IMPORTANT !! Don't use the third argument
        ///         /// Returns a new expression that will invoke one of the predefined functions.        /// </summary>        /// <param name="forFunction">The name of the function to invoke.</param>        /// <param name="arguments">An array containing NSExpression objects that will be used as parameters during the invocation of selector.   For a selector taking no parameters, the array should be empty. For a selector taking one or more parameters, the array should contain one NSExpression object which will evaluate to an instance of the appropriate type for each parameter.   If there is a mismatch between the number of parameters expected and the number you provide during evaluation, an exception may be raised or missing parameters may simply be replaced by nil (which occurs depends on how many parameters are provided, and whether you have over- or underflow).</param>        /// <returns>A new expression that invokes the function name using the parameters in parameters.</returns>        [iOSVersion(3)]        public NSExpression(string forFunction, AnyObject[] arguments, bool DONOTUSETHIS = true) { }                /// <summary>        /// Initializes the receiver with the specified expression format and arguments list.        /// </summary>        /// <param name="format">The expression format.</param>        /// <param name="arguments">A list of arguments to be inserted into the expressionFormat string. The argument list is terminated by nil.</param>        /// <returns>An initialized NSExpression object with the specified arguments.</returns>        [iOSVersion(4)]        public NSExpression(string format, CVaListPointer arguments) { }                /// <summary>        /// Returns a new expression that represents a given constant value.        /// </summary>        /// <param name="forConstantValue">The constant value the new expression is to represent.</param>        /// <returns>A new expression that represents the constant value, obj.</returns>        [iOSVersion(3)]        public NSExpression(AnyObject forConstantValue) { }                /// <summary>        /// Returns a new expression that represents the object being evaluated.        /// </summary>        /// <returns>A new expression that represents the object being evaluated.</returns>        [iOSVersion(3)]        [Export("expressionForEvaluatedObject")]        public static NSExpression ExpressionForEvaluatedObject() { return null; }                /// <summary>
        /// !! IMPORTANT !! Name the parameter that you're using!
        ///         /// Returns a new expression that invokes valueForKeyPath: with a given key path or extracts a value from the variable bindings dictionary for a given key.        /// </summary>        /// <param name="forKeyPath">The key path that the new expression should evaluate.</param>        /// <param name="forVariable">The key for the variable to extract from the variable bindings dictionary.</param>        /// <returns>A new expression that invokes valueForKeyPath: with keyPath.</returns>        /// <returns>A new expression that extracts from the variable bindings dictionary the value for the key string.</returns>        [iOSVersion(3)]        public NSExpression(string forKeyPath = "", string forVariable = "") { }                /// <summary>        /// Returns a new expression that represents any key for a Spotlight query.        /// </summary>        /// <returns>A new expression that represents any key for a Spotlight query.</returns>        [iOSVersion(7)]        [Export("expressionForAnyKey")]        public static NSExpression ExpressionForAnyKey() { return null; }                /// <summary>        /// Returns a new aggregate expression for a given collection.        /// </summary>        /// <param name="forAggregate">A collection object (an instance of NSArray, NSSet, or NSDictionary) that contains further expressions.</param>        /// <returns>A new expression that contains the expressions in collection.</returns>        [iOSVersion(3)]        public NSExpression(AnyObject[] forAggregate) { }                /// <summary>
        /// !! IMPORTANT !! Name the paramters that you're using!
        ///         /// Returns a new NSExpression object that represent the union of a given set and collection.        /// Returns a new NSExpression object that represent the intersection of a given set and collection.        /// Returns a new NSExpression object that represent the subtraction of a given collection from a given set.        /// </summary>        /// <param name="forUnionSet">An expression that evaluates to an NSSet object.</param>        /// <param name="forintersectSet">An expression that evaluates to an NSSet object.</param>        /// <param name="forMinusSet">An expression that evaluates to an NSSet object.</param>        /// <param name="with">An expression that evaluates to a collection object (an instance of NSArray, NSSet, or NSDictionary).</param>        /// <returns>An new NSExpression object that represents the union of left and right.</returns>        /// <returns>A new NSExpression object that represents the intersection of left and right.</returns>        /// <returns>A new NSExpression object that represents the subtraction of right from left.</returns>        [iOSVersion(3)]        public NSExpression(NSExpression forUnionSet = null,NSExpression forintersectSet = null, NSExpression forMinusSet = null, NSExpression with = null) { }        /// <summary>        /// Returns an expression that filters a collection by storing elements in the collection in a given variable and keeping the elements for which qualifier returns true.        /// </summary>        /// <param name="forSubquery">A predicate expression that evaluates to a collection.</param>        /// <param name="usingIteratorVariable">Used as a local variable, and will shadow any instances of variable in the bindings dictionary. The variable is removed or the old value replaced once evaluation completes.</param>        /// <param name="predicate">The predicate used to determine whether the element belongs in the result collection.</param>        /// <returns>An expression that filters a collection by storing elements in the collection in the variable variable and keeping the elements for which qualifier returns true</returns>        [iOSVersion(3)]        public NSExpression(NSExpression forSubquery, string usingIteratorVariable, AnyObject predicate) { }                /// <summary>        /// Creates an NSExpression object that will use the Block for evaluating objects.        /// </summary>        /// <param name="forBlock">The Block is applied to the object to be evaluated.   The Block takes three arguments and returns a value:           evaluatedObject              The object to be evaluated.                expressions              An array of predicate expressions that evaluates to a collection.                context              A dictionary that the expression can use to store temporary state for one predicate evaluation.   Note that context is mutable, and that it can only be accessed during the evaluation of the expression. You must not attempt to retain it for use elsewhere. ]        The Block returns the evaluatedObject.</param>        /// <param name="arguments">An array containing NSExpression objects that will be used as parameters during the invocation of selector.   For a selector taking no parameters, the array should be empty. For a selector taking one or more parameters, the array should contain one NSExpression object which will evaluate to an instance of the appropriate type for each parameter.   If there is a mismatch between the number of parameters expected and the number you provide during evaluation, an exception may be raised or missing parameters may simply be replaced by nil (which occurs depends on how many parameters are provided, and whether you have over- or underflow).   See expressionForFunction:arguments: for a complete list of arguments.</param>        /// <returns>An expression that filters a collection using the specified Block.</returns>        [iOSVersion(4)]        public NSExpression(Func<AnyObject, AnyObject[], NSMutableDictionary, AnyObject> forBlock, AnyObject[] arguments) { }                /// <summary>        /// Returns an expression which will return the result of invoking on a given target a selector with a given name using given arguments.        /// </summary>        /// <param name="forFunction">An NSExpression object which will evaluate an object on which the selector identified by name may be invoked.</param>        /// <param name="selectorName">The name of the method to be invoked.</param>        /// <param name="arguments">An array containing NSExpression objects which can be evaluated to provide parameters for the method specified by name.</param>        /// <returns>An expression which will return the result of invoking the selector named name on the result of evaluating the target expression with the parameters specified by evaluating the elements of parameters.</returns>        [iOSVersion(3)]        public NSExpression(NSExpression forFunction, string selectorName, AnyObject[] arguments) { }                /// <summary>        /// Returns the arguments for the receiver.        /// </summary>        /// <returns>The arguments for the receiver—that is, the array of expressions that will be passed as parameters during invocation of the selector on the operand of a function expression.</returns>        [iOSVersion(3)]        [Export("arguments")]        public AnyObject[] Arguments { get; private set; }                /// <summary>        /// Returns the collection of expressions in an aggregate expression, or the collection element of a subquery expression.        /// </summary>        /// <returns>Returns the collection of expressions in an aggregate expression, or the collection element of a subquery expression.</returns>        [iOSVersion(3)]        [Export("collection")]        public AnyObject Collection { get; private set; }                /// <summary>        /// Returns the constant value of the receiver.        /// </summary>        /// <returns>The constant value of the receiver.</returns>        [iOSVersion(3)]        [Export("constantValue")]        public AnyObject ConstantValue { get; private set; }                /// <summary>        /// Returns the expression type for the receiver.        /// </summary>        /// <returns>The expression type for the receiver.</returns>        [iOSVersion(3)]        [Export("expressionType")]        public NSExpressionType ExpressionType { get; private set; }                /// <summary>        /// Returns the function for the receiver.        /// </summary>        /// <returns>The function for the receiver.</returns>        [iOSVersion(3)]        [Export("function")]        public string Function { get; private set; }                /// <summary>        /// Returns the key path for the receiver.        /// </summary>        /// <returns>The key path for the receiver.</returns>        [iOSVersion(3)]        [Export("keyPath")]        public string KeyPath { get; private set; }                /// <summary>        /// Returns the left expression of an aggregate expression.        /// </summary>        /// <returns>The left expression of a set expression.</returns>        [iOSVersion(3)]        [Export("leftExpression")]        public NSExpression LeftExpression { get; private set; }                /// <summary>        /// Returns the operand for the receiver.        /// </summary>        /// <returns>The operand for the receiver—that is, the object on which the selector will be invoked.</returns>        [iOSVersion(3)]        [Export("operand")]        public NSExpression Operand { get; private set; }                /// <summary>        /// Return the predicate of a subquery expression.        /// </summary>        /// <returns>The predicate of a subquery expression.</returns>        [iOSVersion(3)]        [Export("predicate")]        public NSPredicate Predicate { get; private set; }                /// <summary>        /// Returns the right expression of an aggregate expression.        /// </summary>        /// <returns>The right expression of a set expression.</returns>        [iOSVersion(3)]        [Export("rightExpression")]        public NSExpression RightExpression { get; private set; }                /// <summary>        /// Returns the variable for the receiver.        /// </summary>        /// <returns>The variable for the receiver.</returns>        [iOSVersion(3)]        [Export("variable")]        public string Variable { get; private set; }                /// <summary>        /// Evaluates an expression using a given object and context.        /// </summary>        /// <param name="object">The object against which the receiver is evaluated.</param>        /// <param name="context">A dictionary that the expression can use to store temporary state for one predicate evaluation. Can be nil.   Note that context is mutable, and that it can only be accessed during the evaluation of the expression. You must not attempt to retain it for use elsewhere.</param>        /// <returns>The evaluated object.</returns>        [iOSVersion(3)]        [Export("expressionValueWithObject")]        public AnyObject ExpressionValueWithObject(AnyObject @object, NSMutableDictionary context) { return null; }                /// <summary>        /// Force an expression that was securely decoded to allow evaluation.        /// </summary>        [iOSVersion(7)]        [Export("allowEvaluation")]        public void AllowEvaluation() { }                /// <summary>        /// Returns the expression’s expression Block.        /// </summary>        /// <returns>The expression’s expression Block as created in expressionForBlock:arguments:.</returns>        [iOSVersion(4)]        [Export("expressionBlock")]        public Func<AnyObject, AnyObject[], NSMutableDictionary, AnyObject> ExpressionBlock { get; set; }

        /// <summary>
        /// Defines the possible types of NSExpression.
        /// </summary>
        [iOSVersion(3)]
        public enum NSExpressionType
        {
            ConstantValueExpressionType,
            EvaluatedObjectExpressionType,
            VariableExpressionType,
            KeyPathExpressionType,
            FunctionExpressionType,
            UnionSetExpressionType,
            intersectSetExpressionType,
            MinusSetExpressionType,
            SubqueryExpressionType,
            AggregateExpressionType,
            AnyKeyExpressionType,
            BlockExpressionType
    }    }}