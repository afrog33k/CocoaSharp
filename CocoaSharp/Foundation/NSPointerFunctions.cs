using ObjectiveC;using System;using SwiftSharp.Attributes;namespace Foundation{	//https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSPointerFunctions_Class/index.html#//apple_ref/occ/cl/NSPointerFunctions	/// <summary>	/// An instance of NSPointerFunctions defines callout functions appropriate for managing a pointer reference held somewhere else.	/// </summary>	[iOSVersion(6)]	public class NSPointerFunctions : NSObject	{		/// <summary>		/// Returns an NSPointerFunctions object initialized with the given options.		/// </summary>		/// <param name="options">The options for the new NSPointerFunctions object.</param>		/// <returns>The NSPointerFunctions object, initialized with the given options.</returns>		[iOSVersion(6)]		public NSPointerFunctions(NSPointerFunctionsOptions options) { }				/// <summary>		/// Returns a new NSPointerFunctions object initialized with the given options.		/// </summary>		/// <param name="options">The options for the new NSPointerFunctions object.</param>		/// <returns>A new NSPointerFunctions object initialized with the given options.</returns>		[iOSVersion(6)]		[Export("pointerFunctionsWithOptions")]		public static NSPointerFunctions PointerFunctionsWithOptions(NSPointerFunctionsOptions options) { return null; }				/// <summary>		/// Specifies whether, in a garbage collected environment, pointers should be assigned using a strong write barrier.		/// </summary>		[iOSVersion(6)]		[Export("usesStrongWriteBarrier")]		public bool UsesStrongWriteBarrier { get; set; }				/// <summary>		/// Specifies whether, in a garbage collected environment, pointers should use weak read and write barriers.		/// </summary>		[iOSVersion(6)]		[Export("usesWeakReadAndWriteBarriers")]		public bool UsesWeakReadAndWriteBarriers { get; set; }				/// <summary>		/// Specify memory and personality options for an NSPointerFunctions object.		/// </summary>				/// <summary>		/// Use strong write-barriers to backing store; use garbage-collected memory on copy-in.		/// </summary>		[iOSVersion(6)]		public int NSPointerFunctionsStrongMemory { get; private set; }				/// <summary>		/// Take no action when pointers are deleted.		/// </summary>		[iOSVersion(6)]		public int NSPointerFunctionsOpaqueMemory { get; private set; }				/// <summary>		/// Use free() on removal, calloc() on copy in.		/// </summary>		[iOSVersion(6)]		public int NSPointerFunctionsMallocMemory { get; private set; }				/// <summary>		/// Use Mach memory.		/// </summary>		[iOSVersion(6)]		public int NSPointerFunctionsMachVirtualMemory { get; private set; }				/// <summary>		/// Uses weak read and write barriers appropriate for ARC or GC. Using NSPointerFunctionsWeakMemory object references will turn to NULL on last release.		/// </summary>		[iOSVersion(6)]		public int NSPointerFunctionsWeakMemory { get; private set; }				/// <summary>		/// Use hash and isEqual methods for hashing and equality comparisons, use the description method for a description.		/// </summary>		[iOSVersion(6)]		public int NSPointerFunctionsObjectPersonality { get; private set; }				/// <summary>		/// Use shifted pointer for the hash value and direct comparison to determine equality.		/// </summary>		[iOSVersion(6)]		public int NSPointerFunctionsOpaquePersonality { get; private set; }				/// <summary>		/// Use shifted pointer for the hash value and direct comparison to determine equality; use the description method for a description.		/// </summary>		[iOSVersion(6)]		public int NSPointerFunctionsObjectPointerPersonality { get; private set; }				/// <summary>		/// Use a string hash and strcmp; C-string '%s' style description.		/// </summary>		[iOSVersion(6)]		public int NSPointerFunctionsCStringPersonality { get; private set; }				/// <summary>		/// Use a memory hash and memcmp (using a size function that you must setâ€”see sizeFunction).		/// </summary>		[iOSVersion(6)]		public int NSPointerFunctionsStructPersonality { get; private set; }				/// <summary>		/// Use unshifted value as hash and equality.		/// </summary>		[iOSVersion(6)]		public int NSPointerFunctionsintegerPersonality { get; private set; }				/// <summary>		/// Use the memory acquire function to allocate and copy items on input (see acquireFunction).		/// </summary>		[iOSVersion(6)]		public int NSPointerFunctionsCopyIn { get; private set; }	}}