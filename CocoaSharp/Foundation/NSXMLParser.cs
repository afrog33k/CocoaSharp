using ObjectiveC;using System;using SwiftSharp.Attributes;using System.Collections.Generic;namespace Foundation{	/// <summary>	/// Instances of this class parse XML documents (including DTD declarations) in an event-driven manner. An NSXMLParser notifies its delegate about the items (elements, attributes, CDATA blocks, comments, and so on) that it encounters as it processes an XML document. It does not itself do anything with those parsed items except report them. It also reports parsing errors. For convenience, an NSXMLParser object in the following descriptions is sometimes referred to as a parser object. Unless used in a callback, the NSXMLParser is a thread-safe class as long as any given instance is only used in one thread.	/// </summary>	/// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSXMLParser_Class/index.html#//apple_ref/occ/cl/NSXMLParser"/>	[iOSVersion(2)]	public class NSXMLParser : NSObject, AnyObject, NSObjectProtocol	{		/// <summary>		/// Initializes the receiver with the XML content referenced by the given URL.		/// </summary>		/// <param name="contentsOfURL">An NSURL object specifying a URL. The URL must be fully qualified and refer to a scheme that is supported by the NSURL class.</param>		[iOSVersion(2)]		[Export("convenience init")]		public NSXMLParser(NSURL contentsOfURL) { }				/// <summary>		/// Initializes the receiver with the XML contents encapsulated in a given data object.		/// </summary>		/// <param name="data">An NSData object containing XML markup.</param>		[iOSVersion(2)]		public NSXMLParser(NSData data) { }				/// <summary>		/// Initializes the receiver with the XML contents from the specified stream and parses it..		/// </summary>		/// <param name="stream">The input stream. The content is incrementally loaded from the specified stream and parsed. The NSXMLParser will open the stream, and synchronously read from it without scheduling it.</param>		[iOSVersion(5)]		[Export("convenience init")]		public NSXMLParser(NSInputStream stream) { }				/// <summary>		/// Starts the event-driven parsing operation.		/// </summary>		[iOSVersion(2)]		[Export("parse")]		public bool Parse() { return default(bool); }				/// <summary>		/// Stops the parser object.		/// </summary>		[iOSVersion(2)]		[Export("abortParsing")]		public void AbortParsing() {  }				/// <summary>		/// Sets the receiverâ€™s delegate.		/// </summary>		[iOSVersion(2)]		[Export("delegate")]		public NSXMLParserDelegate Delegate { get; set; }				/// <summary>		/// Specifies whether the receiver reports the namespace and the qualified name of an element in related delegation methods .		/// </summary>		[iOSVersion(2)]		[Export("shouldProcessNamespaces")]		public bool ShouldProcessNamespaces { get; set; }				/// <summary>		/// Specifies whether the receiver reports the scope of namespace declarations using related delegation methods.		/// </summary>		[iOSVersion(2)]		[Export("shouldReportNamespacePrefixes")]		public bool ShouldReportNamespacePrefixes { get; set; }				/// <summary>		/// Specifies whether the receiver reports declarations of external entities using the delegate method parser:foundExternalEntityDeclarationWithName:publicID:systemID:.		/// </summary>		[iOSVersion(2)]		[Export("shouldResolveExternalEntities")]		public bool ShouldResolveExternalEntities { get; set; }				/// <summary>		/// Returns an NSError object from which you can obtain information about a parsing error.		/// </summary>		[iOSVersion(2)]		[Export("parserError")]		public NSError ParserError { get; private set; }				/// <summary>		/// Returns the column number of the XML document being processed by the receiver.		/// </summary>		[iOSVersion(2)]		[Export("columnNumber")]		public int ColumnNumber { get; private set; }				/// <summary>		/// Returns the line number of the XML document being processed by the receiver.		/// </summary>		[iOSVersion(2)]		[Export("lineNumber")]		public int LineNumber { get; private set; }				/// <summary>		/// Returns the public identifier of the external entity referenced in the XML document.		/// </summary>		[iOSVersion(2)]		[Export("publicID")]		public string PublicID { get; private set; }				/// <summary>		/// Returns the system identifier of the external entity referenced in the XML document.		/// </summary>		[iOSVersion(2)]		[Export("systemID")]		public string SystemID { get; private set; }	}}