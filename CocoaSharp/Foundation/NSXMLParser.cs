using ObjectiveC;using System;using SwiftSharp.Attributes;namespace Foundation{	//https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSXMLParser_Class/index.html#//apple_ref/occ/cl/NSXMLParser	/// <summary>	/// Instances of this class parse XML documents (including DTD declarations) in an event-driven manner. An NSXMLParser notifies its delegate about the items (elements, attributes, CDATA blocks, comments, and so on) that it encounters as it processes an XML document. It does not itself do anything with those parsed items except report them. It also reports parsing errors. For convenience, an NSXMLParser object in the following descriptions is sometimes referred to as a parser object. Unless used in a callback, the NSXMLParser is a thread-safe class as long as any given instance is only used in one thread.	/// </summary>	[iOSVersion(2)]	public class NSXMLParser : NSObject	{		/// <summary>		/// Initializes the receiver with the XML content referenced by the given URL.		/// </summary>		/// <param name="contentsOfURL">An NSURL object specifying a URL. The URL must be fully qualified and refer to a scheme that is supported by the NSURL class.</param>		/// <returns>An initialized NSXMLParser object or nil if an error occurs.</returns>		[iOSVersion(2)]		public NSXMLParser(NSURL contentsOfURL) { }				/// <summary>		/// Initializes the receiver with the XML contents encapsulated in a given data object.		/// </summary>		/// <param name="data">An NSData object containing XML markup.</param>		/// <returns>An initialized NSXMLParser object or nil if an error occurs.</returns>		[iOSVersion(2)]		public NSXMLParser(NSData data) { }				/// <summary>		/// Initializes the receiver with the XML contents from the specified stream and parses it..		/// </summary>		/// <param name="stream">The input stream. The content is incrementally loaded from the specified stream and parsed. The NSXMLParser will open the stream, and synchronously read from it without scheduling it.</param>		/// <returns>An initialized NSXMLParser object or nil if an error occurs.</returns>		[iOSVersion(5)]		public NSXMLParser(NSInputStream stream) { }				/// <summary>		/// Sets the receiverâ€™s delegate.		/// </summary>		/// <param name="delegate">An object that is the new delegate. It is not retained. The delegate must conform to the NSXMLParserDelegate Protocol protocol.</param>		[iOSVersion(2)]		[Export("delegate")]		public NSXMLParserDelegate Delegate { get; set; }				/// <summary>		/// Specifies whether the receiver reports the namespace and the qualified name of an element in related delegation methods .		/// </summary>		/// <param name="shouldProcessNamespaces">true if the receiver should report the namespace and qualified name of each element, false otherwise. The default value is false.</param>		[iOSVersion(2)]		[Export("shouldProcessNamespaces")]		public bool ShouldProcessNamespaces { get; set; }				/// <summary>		/// Specifies whether the receiver reports the scope of namespace declarations using related delegation methods.		/// </summary>		/// <param name="shouldReportNamespacePrefixes">true if the receiver should report the scope of namespace declarations, false otherwise. The default value is false.</param>		[iOSVersion(2)]		[Export("shouldReportNamespacePrefixes")]		public bool ShouldReportNamespacePrefixes { get; set; }				/// <summary>		/// Specifies whether the receiver reports declarations of external entities using the delegate method parser:foundExternalEntityDeclarationWithName:publicID:systemID:.		/// </summary>		/// <param name="shouldResolveExternalEntities">true if the receiver should report declarations of external entities, false otherwise. The default value is false.</param>		[iOSVersion(2)]		[Export("shouldResolveExternalEntities")]		public bool ShouldResolveExternalEntities { get; set; }				/// <summary>		/// Starts the event-driven parsing operation.		/// </summary>		/// <returns>true if parsing is successful and false in there is an error or if the parsing operation is aborted.</returns>		[iOSVersion(2)]		[Export("parse")]		public bool Parse() { return false; }				/// <summary>		/// Stops the parser object.		/// </summary>		[iOSVersion(2)]		[Export("abortParsing")]		public void AbortParsing() { }				/// <summary>		/// Returns an NSError object from which you can obtain information about a parsing error.		/// </summary>		[iOSVersion(2)]		[Export("parserError")]		public NSError ParserError { get; private set; }				/// <summary>		/// Returns the column number of the XML document being processed by the receiver.		/// </summary>		[iOSVersion(2)]		[Export("columnNumber")]		public int ColumnNumber { get; private set; }				/// <summary>		/// Returns the line number of the XML document being processed by the receiver.		/// </summary>		[iOSVersion(2)]		[Export("lineNumber")]		public int LineNumber { get; private set; }				/// <summary>		/// Returns the public identifier of the external entity referenced in the XML document.		/// </summary>		[iOSVersion(2)]		[Export("publicID")]		public string PublicID { get; private set; }				/// <summary>		/// Returns the system identifier of the external entity referenced in the XML document.		/// </summary>		[iOSVersion(2)]		[Export("systemID")]		public string SystemID { get; private set; }				/// <summary>		/// The following error types are defined by NSXMLParser.		/// </summary>		[iOSVersion(2)]		public enum NSXMLParserError {			internalError,			OutOfMemoryError,DocumentStartError,EmptyDocumentError,PrematureDocumentEndError,InvalidHexCharacterRefError,InvalidDecimalCharacterRefError,InvalidCharacterRefError,InvalidCharacterError,CharacterRefAtEOFError,CharacterRefInPrologError,CharacterRefInEpilogError,CharacterRefInDTDError,EntityRefAtEOFError,EntityRefInPrologError,EntityRefInEpilogError,EntityRefInDTDError,ParsedEntityRefAtEOFError,ParsedEntityRefInPrologError,ParsedEntityRefInEpilogError,ParsedEntityRefIninternalSubsetError,EntityReferenceWithoutNameError,EntityReferenceMissingSemiError,ParsedEntityRefNoNameError,ParsedEntityRefMissingSemiError,UndeclaredEntityError,UnparsedEntityError,EntityIsExternalError,EntityIsParameterError,UnknownEncodingError,EncodingNotSupportedError,StringNotStartedError,StringNotClosedError,NamespaceDeclarationError,EntityNotStartedError,EntityNotFinishedError,LessThanSymbolInAttributeError,AttributeNotStartedError,AttributeNotFinishedError,AttributeHasNoValueError,AttributeRedefinedError,LiteralNotStartedError,LiteralNotFinishedError,CommentNotFinishedError,ProcessingInstructionNotStartedError,ProcessingInstructionNotFinishedError,NotationNotStartedError,NotationNotFinishedError,AttributeListNotStartedError,AttributeListNotFinishedError,MixedContentDeclNotStartedError,MixedContentDeclNotFinishedError,ElementContentDeclNotStartedError,ElementContentDeclNotFinishedError,XMLDeclNotStartedError,XMLDeclNotFinishedError,ConditionalSectionNotStartedError,ConditionalSectionNotFinishedError,ExternalSubsetNotFinishedError,DOCTYPEDeclNotFinishedError,MisplacedCDATAEndStringError,CDATANotFinishedError,MisplacedXMLDeclarationError,SpaceRequiredError,SeparatorRequiredError,NMTOKENRequiredError,NAMERequiredError,PCDATARequiredError,URIRequiredError,PublicIdentifierRequiredError,LTRequiredError,GTRequiredError,LTSlashRequiredError,EqualExpectedError,TagNameMismatchError,UnfinishedTagError,StandaloneValueError,InvalidEncodingNameError,CommentContainsDoubleHyphenError,InvalidEncodingError,ExternalStandaloneEntityError,InvalidConditionalSectionError,EntityValueRequiredError,NotWellBalancedError,ExtraContentError,InvalidCharacterInEntityError,ParsedEntityRefIninternalError,EntityRefLoopError,EntityBoundaryError,InvalidURIError,URIFragmentError,NoDTDError,DelegateAbortedParseError		}				/// <summary>		/// This constant defines the NSXMLParser error domain.		/// </summary>		[Export("NSXMLParserErrorDomain")]		public string NSXMLParserErrorDomain { get; private set; }	}}