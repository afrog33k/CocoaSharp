using ObjectiveC;using System;using SwiftSharp.Attributes;using System.Collections.Generic;namespace Foundation{    /// <summary>    /// The NSProcessInfo class provides methods to access information about the current process. Each process has a single, shared NSProcessInfo object, known as process information agent.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSProcessInfo_Class/index.html#//apple_ref/occ/cl/NSProcessInfo"/>    [iOSVersion(2)]    public class NSProcessInfo : NSObject//, AnyObject, NSObjectProtocol    {        /// <summary>        /// Returns the process information agent for the process.        /// </summary>        [iOSVersion(2)]        [Export("processInfo")]        public static NSProcessInfo ProcessInfo() { return default(NSProcessInfo); }                /// <summary>        /// Returns a constant to indicate the operating system on which the process is executing.        /// </summary>        [iOSVersion(2)]        [Export("operatingSystem")]        public int OperatingSystem() { return default(int); }                /// <summary>        /// Returns a string containing the name of the operating system on which the process is executing.        /// </summary>        [iOSVersion(2)]        [Export("operatingSystemName")]        public string OperatingSystemName() { return default(string); }                /// <summary>        /// Returns a Boolean value indicating whether the version of the operating system on which the process is executing is the same or later than the given version.        /// </summary>        /// <param name="version">The operating system version to test against.</param>        [iOSVersion(8)]        [Export("isOperatingSystemAtLeastVersion")]        public bool IsOperatingSystemAtLeastVersion(NSOperatingSystemVersion version) { return default(bool); }                /// <summary>        /// Begin an activity using the given options and reason.        /// </summary>        /// <param name="options">Options for the activity. See Activity Options for possible values.</param>        /// <param name="reason">A string used in debugging to indicate the reason the activity began.</param>        [iOSVersion(7)]        [Export("beginActivityWithOptions")]        public NSObjectProtocol BeginActivityWithOptions(NSActivityOptions options, string reason) { return default(NSObjectProtocol); }                /// <summary>        /// Ends the given activity.        /// </summary>        /// <param name="activity">An activity object returned by beginActivityWithOptions:reason:.</param>        [iOSVersion(7)]        [Export("endActivity")]        public void EndActivity(NSObjectProtocol activity) {  }                /// <summary>        /// Synchronously perform an activity defined by a given block using the given options.        /// </summary>        /// <param name="options">Options for the activity. See Activity Options for possible values.</param>        /// <param name="reason">A string used in debugging to indicate the reason the activity began.</param>        /// <param name="usingBlock">A block containing the work to be performed by the activity.</param>        [iOSVersion(7)]        [Export("performActivityWithOptions")]        public void PerformActivityWithOptions(NSActivityOptions options, string reason, Action usingBlock) {  }                /// <summary>        /// Array of strings with the command-line arguments for the process.        /// </summary>        [iOSVersion(2)]        [Export("arguments")]        public AnyObject[] Arguments { get; private set; }                /// <summary>        /// The variable names (keys) and their values in the environment from which the process was launched.        /// </summary>        [iOSVersion(2)]        [Export("environment")]        public Dictionary<NSObject, AnyObject> Environment { get; private set; }                /// <summary>        /// Global unique identifier for the process. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("globallyUniqueString")]        public string GloballyUniqueString { get; private set; }                /// <summary>        /// The identifier of the process (often called process ID).        /// </summary>        [iOSVersion(2)]        [Export("processIdentifier")]        public int ProcessIdentifier { get; private set; }                /// <summary>        /// The name of the process.        /// </summary>        [iOSVersion(2)]        [Export("processName")]        public string ProcessName { get; set; }                /// <summary>        /// The name of the host computer on which the process is executing. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("hostName")]        public string HostName { get; private set; }                /// <summary>        /// A string containing the version of the operating system on which the process is executing. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("operatingSystemVersionString")]        public string OperatingSystemVersionString { get; private set; }                /// <summary>        /// The version of the operating system on which the process is executing. (read-only)        /// </summary>        [iOSVersion(8)]        [Export("operatingSystemVersion")]        public NSOperatingSystemVersion OperatingSystemVersion { get; private set; }                /// <summary>        /// The number of processing cores available on the computer. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("processorCount")]        public int ProcessorCount { get; private set; }                /// <summary>        /// The number of active processing cores available on the computer. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("activeProcessorCount")]        public int ActiveProcessorCount { get; private set; }                /// <summary>        /// The amount of physical memory on the computer in bytes. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("physicalMemory")]        public UInt64 PhysicalMemory { get; private set; }                /// <summary>        /// The time interval since the computer was restarted.        /// </summary>        [iOSVersion(4)]        [Export("systemUptime")]        public NSTimeInterval SystemUptime { get; private set; }                /// <summary>        /// Operating system version structure used with operatingSystemVersion and isOperatingSystemAtLeastVersion:.        /// </summary>        [Export("majorVersion")]        public Int            var minorVersion: Int            var patchVersion: Int        } MajorVersion { get; set; }                /// <summary>        /// The following constants are provided by the NSProcessInfo class as return values for operatingSystem.        /// </summary>        public int NSHPUXOperatingSystem { get; set; }    }    /// <summary>    /// Option flags used with beginActivityWithOptions:reason: and performActivityWithOptions:reason:usingBlock:.    /// </summary>    [iOSVersion(7)]    public enum NSActivityOptions    {        /// <summary>        /// Flag to require the screen to stay powered on.        /// </summary>        [iOSVersion(7)]        IdleDisplaySleepDisabled,        /// <summary>        /// Flag to prevent idle sleep.        /// This is included in NSActivityUserInitiatedAllowingIdleSystemSleep.        /// </summary>        [iOSVersion(7)]        IdleSystemSleepDisabled,        /// <summary>        /// Flag to prevent sudden termination.        /// This is included in NSActivityUserInitiatedAllowingIdleSystemSleep.        /// </summary>        [iOSVersion(7)]        SuddenTerminationDisabled,        /// <summary>        /// Flag to prevent automatic termination.        /// This is included in NSActivityUserInitiatedAllowingIdleSystemSleep.        /// </summary>        [iOSVersion(7)]        AutomaticTerminationDisabled,        /// <summary>        /// Flag to indicate the app is performing a user-requested action.        /// </summary>        [iOSVersion(7)]        UserInitiated,        /// <summary>        /// Flag to indicate the app is performing a user-requested action, but that the system can sleep on idle.        /// </summary>        [iOSVersion(7)]        UserInitiatedAllowingIdleSystemSleep,        /// <summary>        /// Flag to indicate the app has initiated some kind of work, but not as the direct result of user request.        /// </summary>        [iOSVersion(7)]        Background,        /// <summary>        /// Flag to indicate the activity requires the highest amount of timer and I/O precision available.        /// </summary>        [iOSVersion(7)]        LatencyCritical,    }}