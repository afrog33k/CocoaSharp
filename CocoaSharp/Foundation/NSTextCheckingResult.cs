using ObjectiveC;using System;using SwiftSharp.Attributes;using System.Collections.Generic;namespace Foundation{	/// <summary>	/// NSTextCheckingResult is a class used to describe items located by text checking. Each of these objects represents an occurrence of requested textual content that has been found during the analysis of a block of text.	/// </summary>	/// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/AppKit/Reference/NSTextCheckingResult_Class/index.html#//apple_ref/occ/cl/NSTextCheckingResult"/>	[iOSVersion(4)]	public class NSTextCheckingResult : NSObject//, AnyObject, NSCoding, NSCopying, NSObjectProtocol	{		/// <summary>		/// Returns the result type that the range represents.		/// </summary>		/// <param name="idx">The index of the result.</param>		[iOSVersion(4)]		[Export("rangeAtIndex")]		public NSRange RangeAtIndex(int idx) { return default(NSRange); }				/// <summary>		/// Creates and returns a text checking result with the specified replacement string.		/// </summary>		/// <param name="range">The range of the detected result.</param>		/// <param name="replacementString">The replacement string.</param>		[iOSVersion(4)]		[Export("replacementCheckingResultWithRange")]		public static NSTextCheckingResult ReplacementCheckingResultWithRange(NSRange range, string replacementString) { return default(NSTextCheckingResult); }				/// <summary>		/// Creates and returns a type checking result with the specified regular expression data.		/// </summary>		/// <param name="ranges">A C array of ranges, which must have at least one element, and the first element represents the overall range.</param>		/// <param name="count">The number of items in the ranges array.</param>		/// <param name="regularExpression">The regular expression.</param>		[iOSVersion(4)]		[Export("regularExpressionCheckingResultWithRanges")]		public static NSTextCheckingResult RegularExpressionCheckingResultWithRanges(NSRangePointer ranges, int count, NSRegularExpression regularExpression) { return default(NSTextCheckingResult); }				/// <summary>		/// Creates and returns a text checking result with the specified URL.		/// </summary>		/// <param name="range">The range of the detected result.</param>		/// <param name="URL">The URL.</param>		[iOSVersion(4)]		[Export("linkCheckingResultWithRange")]		public static NSTextCheckingResult LinkCheckingResultWithRange(NSRange range, NSURL URL) { return default(NSTextCheckingResult); }				/// <summary>		/// Creates and returns a text checking result with the specified address components.		/// </summary>		/// <param name="range">The range of the detected result.</param>		/// <param name="components">A dictionary containing the address components. The dictionary keys are described in Keys for Address Components.</param>		[iOSVersion(4)]		[Export("addressCheckingResultWithRange")]		public static NSTextCheckingResult AddressCheckingResultWithRange(NSRange range, Dictionary<NSObject, AnyObject> components) { return default(NSTextCheckingResult); }				/// <summary>		/// Creates and returns a text checking result with the specified transit information.		/// </summary>		/// <param name="range">The range of the detected result.</param>		/// <param name="components">A dictionary containing the transit components. The currently supported keys are NSTextCheckingAirlineKey and NSTextCheckingFlightKey.</param>		[iOSVersion(4)]		[Export("transitInformationCheckingResultWithRange")]		public static NSTextCheckingResult TransitInformationCheckingResultWithRange(NSRange range, Dictionary<NSObject, AnyObject> components) { return default(NSTextCheckingResult); }				/// <summary>		/// Creates and returns a text checking result with the specified phone number.		/// </summary>		/// <param name="range">The range of the detected result.</param>		/// <param name="phoneNumber">The phone number.</param>		[iOSVersion(4)]		[Export("phoneNumberCheckingResultWithRange")]		public static NSTextCheckingResult PhoneNumberCheckingResultWithRange(NSRange range, string phoneNumber) { return default(NSTextCheckingResult); }				/// <summary>		/// Creates and returns a text checking result with the specified date.		/// </summary>		/// <param name="range">The range of the detected result.</param>		/// <param name="date">The detected date.</param>		[iOSVersion(4)]		[Export("dateCheckingResultWithRange")]		public static NSTextCheckingResult DateCheckingResultWithRange(NSRange range, NSDate date) { return default(NSTextCheckingResult); }				/// <summary>		/// Creates and returns a text checking result with the specified date, time zone, and duration.		/// </summary>		/// <param name="range">The range of the detected result.</param>		/// <param name="date">The detected date.</param>		/// <param name="timeZone">The detected time zone.</param>		/// <param name="duration">The detected duration.</param>		[iOSVersion(4)]		[Export("dateCheckingResultWithRange")]		public static NSTextCheckingResult DateCheckingResultWithRange(NSRange range, NSDate date, NSTimeZone timeZone, NSTimeInterval duration) { return default(NSTextCheckingResult); }				/// <summary>		/// Creates and returns a text checking result with the specified dash corrected replacement string.		/// </summary>		/// <param name="range">The range of the detected result.</param>		/// <param name="replacementString">The replacement string.</param>		[iOSVersion(4)]		[Export("dashCheckingResultWithRange")]		public static NSTextCheckingResult DashCheckingResultWithRange(NSRange range, string replacementString) { return default(NSTextCheckingResult); }				/// <summary>		/// Creates and returns a text checking result with the specified quote-balanced replacement string.		/// </summary>		/// <param name="range">The range of the detected result.</param>		/// <param name="replacementString">The replacement string.</param>		[iOSVersion(4)]		[Export("quoteCheckingResultWithRange")]		public static NSTextCheckingResult QuoteCheckingResultWithRange(NSRange range, string replacementString) { return default(NSTextCheckingResult); }				/// <summary>		/// Creates and returns a text checking result with the range of a misspelled word.		/// </summary>		/// <param name="range">The range of the detected result.</param>		[iOSVersion(4)]		[Export("spellCheckingResultWithRange")]		public static NSTextCheckingResult SpellCheckingResultWithRange(NSRange range) { return default(NSTextCheckingResult); }				/// <summary>		/// Creates and returns a text checking result after detecting a possible correction.		/// </summary>		/// <param name="range">The range of the detected result.</param>		/// <param name="replacementString">The suggested replacement string.</param>		[iOSVersion(4)]		[Export("correctionCheckingResultWithRange")]		public static NSTextCheckingResult CorrectionCheckingResultWithRange(NSRange range, string replacementString) { return default(NSTextCheckingResult); }				/// <summary>		/// Creates and returns a text checking result with the specified orthography.		/// </summary>		/// <param name="range">The range of the detected result.</param>		/// <param name="orthography">An orthography object that describes the script.</param>		[iOSVersion(4)]		[Export("orthographyCheckingResultWithRange")]		public static NSTextCheckingResult OrthographyCheckingResultWithRange(NSRange range, NSOrthography orthography) { return default(NSTextCheckingResult); }				/// <summary>		/// Creates and returns a text checking result with the specified array of grammatical errors.		/// </summary>		/// <param name="range">The range of the detected result.</param>		/// <param name="details">An array of details regarding the grammatical errors. This array of strings is suitable for presenting to the user.</param>		[iOSVersion(4)]		[Export("grammarCheckingResultWithRange")]		public static NSTextCheckingResult GrammarCheckingResultWithRange(NSRange range, AnyObject[] details) { return default(NSTextCheckingResult); }				/// <summary>		/// Returns a new text checking result after adjusting the ranges as specified by the offset.		/// </summary>		/// <param name="offset">The amount the ranges are adjusted.</param>		[iOSVersion(5)]		[Export("resultByAdjustingRangesWithOffset")]		public NSTextCheckingResult ResultByAdjustingRangesWithOffset(int offset) { return default(NSTextCheckingResult); }				/// <summary>		/// Returns the range of the result that the receiver represents. (read-only)		/// </summary>		[iOSVersion(4)]		[Export("range")]		public NSRange Range { get; private set; }				/// <summary>		/// Returns the text checking result type that the receiver represents. (read-only)		/// </summary>		[iOSVersion(4)]		[Export("resultType")]		public NSTextCheckingType ResultType { get; private set; }				/// <summary>		/// Returns the number of ranges. (read-only)		/// </summary>		[iOSVersion(4)]		[Export("numberOfRanges")]		public int NumberOfRanges { get; private set; }				/// <summary>		/// A replacement string from one of a number of replacement checking results. (read-only)		/// </summary>		[iOSVersion(4)]		[Export("replacementString")]		public string ReplacementString { get; private set; }				/// <summary>		/// The regular expression of a type checking result. (read-only)		/// </summary>		[iOSVersion(4)]		[Export("regularExpression")]		public NSRegularExpression RegularExpression { get; private set; }				/// <summary>		/// A dictionary containing the components of a type checking result. (read-only)		/// </summary>		[iOSVersion(4)]		[Export("components")]		public Dictionary<NSObject, AnyObject> Components { get; private set; }				/// <summary>		/// The URL of a type checking result. (read-only)		/// </summary>		[iOSVersion(4)]		public NSURL URL { get; private set; }				/// <summary>		/// The address dictionary of a type checking result. (read-only)		/// </summary>		[iOSVersion(4)]		[Export("addressComponents")]		public Dictionary<NSObject, AnyObject> AddressComponents { get; private set; }				/// <summary>		/// The phone number of a type checking result. (read-only)		/// </summary>		[iOSVersion(4)]		[Export("phoneNumber")]		public string PhoneNumber { get; private set; }				/// <summary>		/// The date component of a type checking result. (read-only)		/// </summary>		[iOSVersion(4)]		[Export("date")]		public NSDate Date { get; private set; }				/// <summary>		/// The duration component of a type checking result. (read-only)		/// </summary>		[iOSVersion(4)]		[Export("duration")]		public NSTimeInterval Duration { get; private set; }				/// <summary>		/// The time zone component of a type checking result. (read-only)		/// </summary>		[iOSVersion(4)]		[Export("timeZone")]		public NSTimeZone TimeZone { get; private set; }				/// <summary>		/// The detected orthography of a type checking result. (read-only)		/// </summary>		[iOSVersion(4)]		[Export("orthography")]		public NSOrthography Orthography { get; private set; }				/// <summary>		/// The details of a located grammatical type checking result. (read-only)		/// </summary>		[iOSVersion(4)]		[Export("grammarDetails")]		public AnyObject[] GrammarDetails { get; private set; }	}	/// <summary>	/// These constants specify the type of checking the methods should do. They are returned by resultType.	/// </summary>	[iOSVersion(4)]	public enum NSTextCheckingType	{		/// <summary>		/// Attempts to identify the language		/// </summary>		[iOSVersion(4)]		Orthography,		/// <summary>		/// Checks spelling.		/// </summary>		[iOSVersion(4)]		Spelling,		/// <summary>		/// Checks grammar.		/// </summary>		[iOSVersion(4)]		Grammar,		/// <summary>		/// Attempts to locate dates.		/// </summary>		[iOSVersion(4)]		Date,		/// <summary>		/// Attempts to locate addresses.		/// </summary>		[iOSVersion(4)]		Address,		/// <summary>		/// Attempts to locate URL links.		/// </summary>		[iOSVersion(4)]		Link,		/// <summary>		/// Replaces quotes with smart quotes.		/// </summary>		[iOSVersion(4)]		Quote,		/// <summary>		/// Replaces dashes with em-dashes.		/// </summary>		[iOSVersion(4)]		Dash,		/// <summary>		/// Replaces characters such as (c) with the appropriate symbol (in this case ©).		/// </summary>		[iOSVersion(4)]		Replacement,		/// <summary>		/// Performs autocorrection on misspelled words.		/// </summary>		[iOSVersion(4)]		Correction,		/// <summary>		/// Matches a regular expression.		/// </summary>		[iOSVersion(4)]		RegularExpression,		/// <summary>		/// Matches a phone number.		/// </summary>		[iOSVersion(4)]		PhoneNumber,		/// <summary>		/// Matches a transit information, for example, flight information.		/// </summary>		[iOSVersion(4)]		TransitInformation,	}	/// <summary>	/// Defines the types of checking that are available. These values can be combined using the C-bitwise OR operator. The system supports its own internal types, and the user can extend those types by subclassing NSTextCheckingResult and adding their own custom types.	/// </summary>	[iOSVersion(4)]	public struct NSTextCheckingTypes	{		static public implicit operator NSTextCheckingTypes(UInt64 value)		{			return default(NSTextCheckingTypes);		}		static public implicit operator UInt64(NSTextCheckingTypes value)		{			return default(UInt64);		}	}}