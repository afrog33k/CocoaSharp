using ObjectiveC;using System;using SwiftSharp.Attributes;namespace Foundation{	//https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSMetadataItem_Class/index.html#//apple_ref/occ/cl/NSMetadataItem	/// <summary>	/// The NSMetadataItem class represents the metadata associated with a file, providing a simple interface to retrieve the available attribute names and values.	/// </summary>	[iOSVersion(5)]	public class NSMetadataItem : NSObject	{		/// <summary>		/// Returns an array containing the attribute names of the receiver’s values.		/// </summary>		/// <returns>An array containing the attribute names of the receiver’s values. See the “Constants” section for a list of possible keys.</returns>		[iOSVersion(5)]		[Export("attributes")]		public AnyObject[] Attributes { get; private set; }				/// <summary>		/// Returns the receiver’s metadata attribute name specified by a given key.		/// </summary>		/// <param name="key">The name of a metadata attribute. See the “Constants” section for a list of possible keys.</param>		/// <returns>The receiver’s metadata attribute name specified by key.</returns>		[iOSVersion(5)]		[Export("valueForAttribute")]		public AnyObject ValueForAttribute(string key) { return null; }				/// <summary>		/// Returns a dictionary containing the key-value pairs for the attribute names specified by a given array of keys.		/// </summary>		/// <param name="keys">An array containing NSString objects that specify the names of a metadata attributes. See the “Constants” section for a list of possible keys.</param>		/// <returns>A dictionary containing the key-value pairs for the attribute names specified by keys.</returns>		[iOSVersion(5)]		[Export("valuesForAttributes")]		public NSDictionary ValuesForAttributes(AnyObject[] keys) { return null; }				/// <summary>		/// Attribute keys that may be associated with an item.		/// </summary>				/// <summary>		/// The value is an NSString object with the name of the item as seen in the file system.		/// </summary>		[iOSVersion(5)]		public string NSMetadataItemFSNameKey { get; private set; }				/// <summary>		/// The value is an NSString object with the display name of the item, which may be different then the file system name.		/// </summary>		[iOSVersion(5)]		public string NSMetadataItemDisplayNameKey { get; private set; }				/// <summary>		/// The value is an NSURL object that you can use to open the file.		/// </summary>		[iOSVersion(5)]		public string NSMetadataItemURLKey { get; private set; }				/// <summary>		/// The value is an NSString object that contains the full path to the file		/// </summary>		[iOSVersion(5)]		public string NSMetadataItemPathKey { get; private set; }				/// <summary>		/// The value is an NSNumber object that indicates the size (in bytes) of the file on disk.		/// </summary>		[iOSVersion(5)]		public string NSMetadataItemFSSizeKey { get; private set; }				/// <summary>		/// The value is an NSDate object that contains the date and time that the file was created.		/// </summary>		[iOSVersion(5)]		public string NSMetadataItemFSCreationDateKey { get; private set; }				/// <summary>		/// The value is an NSDate object that contains the date and time that the file contents last changed.		/// </summary>		[iOSVersion(5)]		public string NSMetadataItemFSContentChangeDateKey { get; private set; }				/// <summary>		/// Attribute keys that describe cloud-related information about the item.		/// </summary>				/// <summary>		/// The value is an NSNumber object that contains a Boolean indicating whether the item is stored in the cloud.		/// </summary>		[iOSVersion(5)]		public string NSMetadataItemIsUbiquitousKey { get; private set; }				/// <summary>		/// The value is an NSNumber object that contains a Boolean indicating whether the item is currently in conflict with another version of the file somewhere else.		/// </summary>		[iOSVersion(5)]		public string NSMetadataUbiquitousItemHasUnresolvedConflictsKey { get; private set; }				/// <summary>		/// The value is an NSNumber object that contains a Boolean indicating whether the current version of the item has been downloaded and is available locally.		/// </summary>		[iOSVersion(7)]		public string NSMetadataUbiquitousItemIsDownloadedKey { get; private set; }				/// <summary>		/// The value is an NSNumber object that contains a Boolean indicating whether the item is currently being downloaded to the local device.		/// </summary>		[iOSVersion(5)]		public string NSMetadataUbiquitousItemIsDownloadingKey { get; private set; }				/// <summary>		/// The value is an NSNumber object that contains a Boolean indicating whether the item has been uploaded to the cloud.		/// </summary>		[iOSVersion(5)]		public string NSMetadataUbiquitousItemIsUploadedKey { get; private set; }				/// <summary>		/// The value is an NSNumber object that contains a Boolean indicating whether the current version of the item is currently being uploaded to the cloud.		/// </summary>		[iOSVersion(5)]		public string NSMetadataUbiquitousItemIsUploadingKey { get; private set; }				/// <summary>		/// The value is an NSNumber object that contains the percentage of the file that has already been downloaded from the cloud. The value is a double in the range 0.0 to 100.0.		/// </summary>		[iOSVersion(5)]		public string NSMetadataUbiquitousItemPercentDownloadedKey { get; private set; }				/// <summary>		/// The value is an NSNumber object that contains the percentage of the file that has already been uploaded to the cloud. The value is a double in the range 0.0 to 100.0.		/// </summary>		[iOSVersion(5)]		public string NSMetadataUbiquitousItemPercentUploadedKey { get; private set; }				/// <summary>		/// The value is a string constant that indicates the download status of the item.		/// </summary>		[iOSVersion(7)]		public string NSMetadataUbiquitousItemDownloadingStatusKey { get; private set; }				/// <summary>		/// The value is an NSError object that describes the problem that occurred when downloading the item from iCloud failed.		/// </summary>		[iOSVersion(7)]		public string NSMetadataUbiquitousItemDownloadingErrorKey { get; private set; }				/// <summary>		/// The value is an NSError object that describes the problem that occurred when uploading the item to iCloud failed.		/// </summary>		[iOSVersion(7)]		public string NSMetadataUbiquitousItemUploadingErrorKey { get; private set; }				/// <summary>		/// Possible values for the NSMetadataUbiquitousItemDownloadingStatusKey key.		/// </summary>				/// <summary>		/// A string used as the value for NSMetadataUbiquitousItemPercentUploadedKey to indicate that there is a local version of this item and it is the most up-to-date version known to this device.		/// </summary>		[iOSVersion(7)]		public string NSMetadataUbiquitousItemDownloadingStatusCurrent { get; private set; }				/// <summary>		/// A string used as the value for NSMetadataUbiquitousItemPercentUploadedKey to indicate that there is a local version of this item available.		/// </summary>		[iOSVersion(7)]		public string NSMetadataUbiquitousItemDownloadingStatusDownloaded { get; private set; }				/// <summary>		/// A string used as the value for NSMetadataUbiquitousItemPercentUploadedKey to indicate that this item has not been downloaded yet.		/// </summary>		[iOSVersion(7)]		public string NSMetadataUbiquitousItemDownloadingStatusNotDownloaded { get; private set; }	}}