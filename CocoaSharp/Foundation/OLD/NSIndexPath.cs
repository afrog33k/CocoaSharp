using ObjectiveC;using System;using SwiftSharp.Attributes;namespace Foundation{    //https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSIndexPath_Class/index.html#//apple_ref/occ/cl/NSIndexPath    /// <summary>    /// The NSIndexPath class represents the path to a specific node in a tree of nested array collections. This path is known as an index path.    /// </summary>    [iOSVersion(2)]    public class NSIndexPath : NSObject    {        /// <summary>        /// Initializes an allocated NSIndexPath object with a one-node index path.        /// </summary>        /// <param name="index">Index of the item in node 0 to point to.</param>        /// <returns>Initialized NSIndexPath object representing a one-node index path with index.</returns>        [iOSVersion(2)]        public NSIndexPath(int index) { }                /// <summary>        /// Initializes an allocated NSIndexPath object with an index path of a specific length.        /// </summary>        /// <param name="indexes">Array of indexes to make up the index path.</param>        /// <param name="length">Number of nodes to include in the index path.</param>        /// <returns>Initialized NSIndexPath object with indexes up to length.</returns>        [iOSVersion(2)]        public NSIndexPath(CConstPointer<int> indexes, int length) { }                /// <summary>        /// Initializes an allocated NSIndexPath object.        /// </summary>        /// <returns>Initialized NSIndexPath object.</returns>        [iOSVersion(7)]        public NSIndexPath() { }                /// <summary>        /// Provides the index at a particular node in the index path.        /// </summary>        /// <param name="node">Index value of the desired node. Node numbering starts at zero.</param>        /// <returns>The index value at node or NSNotFound if the node is outside the range of the index path.</returns>        [iOSVersion(2)]        [Export("indexAtPosition")]        public int IndexAtPosition(int node) { return 0; }                /// <summary>        /// Provides an index path containing the indexes in the receiving index path and another index.        /// </summary>        /// <param name="index">Index to append to the index path’s indexes.</param>        /// <returns>New NSIndexPath object containing the receiving index path’s indexes and index.</returns>        [iOSVersion(2)]        [Export("indexPathByAddingIndex")]        public NSIndexPath IndexPathByAddingIndex(int index) { return null; }                /// <summary>        /// Provides an index path with the indexes in the receiving index path, excluding the last one.        /// </summary>        /// <returns>New index path with the receiving index path’s indexes, excluding the last one.</returns>        [iOSVersion(2)]        [Export("indexPathByRemovingLastIndex")]        public NSIndexPath IndexPathByRemovingLastIndex() { return null; }                /// <summary>        /// Provides the number of indexes in the index path.        /// </summary>        /// <returns>Number of indexes in the index path.</returns>        [iOSVersion(2)]        [Export("length")]        public int Length { get; private set; }                /// <summary>        /// Copies the objects contained in the index path into indexes.        /// </summary>        /// <param name="indexes">Pointer to a C array of objects of size at least the length of the index path. On return, the index path’s indexes.</param>        [iOSVersion(2)]        [Export("getIndexes")]        public void GetIndexes(CMutablePointer<int> indexes) { }                /// <summary>        /// Indicates the depth-first traversal order of the receiving index path and another index path.        /// </summary>        /// <param name="indexPath">Index path to compare.   This value must not be nil. If the value is nil, the behavior is undefined.</param>        /// <returns>The depth-first traversal ordering of the receiving index path and indexPath.</returns>        [iOSVersion(2)]        [Export("compare")]
        public NSComparisonResult Compare(NSIndexPath indexPath) { return NSComparisonResult.OrderedSame; }    }}