using ObjectiveC;using System;using SwiftSharp.Attributes;namespace Foundation{	//https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSConditionLock_Class/index.html#//apple_ref/occ/cl/NSConditionLock	/// <summary>	/// The NSConditionLock class defines objects whose locks can be associated with specific, user-defined conditions. Using an NSConditionLock object, you can ensure that a thread can acquire a lock only if a certain condition is met. Once it has acquired the lock and executed the critical section of code, the thread can relinquish the lock and set the associated condition to something new. The conditions themselves are arbitrary: you define them as needed for your application.	/// </summary>	[iOSVersion(2)]	public class NSConditionLock : NSObject	{		/// <summary>		/// Initializes a newly allocated NSConditionLock object and sets its condition.		/// </summary>		/// <param name="condition">The user-defined condition for the lock. The value of condition is user-defined; see the class description for more information.</param>		/// <returns>An initialized condition lock object; may be different than the original receiver.</returns>		[iOSVersion(2)]		public NSConditionLock(int condition) { }				/// <summary>		/// Returns the condition associated with the receiver.		/// </summary>		/// <returns>The condition associated with the receiver. If no condition has been set, returns 0.</returns>		[iOSVersion(2)]		[Export("condition")]		public int Condition { get; private set; }				/// <summary>		/// Attempts to acquire a lock before a specified moment in time.		/// </summary>		/// <param name="limit">The date by which the lock must be acquired or the attempt will time out.</param>		/// <returns>true if the lock is acquired within the time limit, false otherwise.</returns>		[iOSVersion(2)]		[Export("lockBeforeDate")]		public bool LockBeforeDate(NSDate limit) { return false; }				/// <summary>		/// Attempts to acquire a lock.		/// </summary>		/// <param name="condition">The condition to match on.</param>		[iOSVersion(2)]		[Export("lockWhenCondition")]		public void LockWhenCondition(int condition) { }				/// <summary>		/// Attempts to acquire a lock before a specified moment in time.		/// </summary>		/// <param name="condition">The condition to match on.</param>		/// <param name="beforeDate">The date by which the lock must be acquired or the attempt will time out.</param>		/// <returns>true if the lock is acquired within the time limit, false otherwise.</returns>		[iOSVersion(2)]		[Export("lockWhenCondition")]		public bool LockWhenCondition(int condition, NSDate beforeDate) { return false; }				/// <summary>		/// Attempts to acquire a lock without regard to the receiver’s condition.		/// </summary>		/// <returns>true if the lock could be acquired, false otherwise.</returns>		[iOSVersion(2)]		[Export("tryLock")]		public bool TryLock() { return false; }				/// <summary>		/// Attempts to acquire a lock if the receiver’s condition is equal to the specified condition.		/// </summary>		/// <returns>true if the lock could be acquired, false otherwise.</returns>		[iOSVersion(2)]		[Export("tryLockWhenCondition")]		public bool TryLockWhenCondition(int condition) { return false; }				/// <summary>		/// Relinquishes the lock and sets the receiver’s condition.		/// </summary>		/// <param name="condition">The user-defined condition for the lock. The value of condition is user-defined; see the class description for more information.</param>		[iOSVersion(2)]		[Export("unlockWithCondition")]		public void UnlockWithCondition(int condition) { }				/// <summary>		/// Assigns or returns a name to the receiver.		/// </summary>
        /// <param name="newName">The new name for the receiver. This method makes a copy of the specified string.</param>
        /// <returns>The name of the receiver.</returns>		[iOSVersion(2)]		[Export("name")]		public string Name { get; set; }	}}