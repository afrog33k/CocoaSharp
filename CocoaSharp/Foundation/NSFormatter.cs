using ObjectiveC;using System;using SwiftSharp.Attributes;using System.Collections.Generic;namespace Foundation{    /// <summary>    /// NSFormatter is an abstract class that declares an interface for objects that create, interpret, and validate the textual representation of cell contents. The Foundation framework provides two concrete subclasses of NSFormatter to generate these objects: NSNumberFormatter and NSDateFormatter.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSFormatter_Class/index.html#//apple_ref/occ/cl/NSFormatter"/>    [iOSVersion(2)]    public class NSFormatter : NSLengthFormatter//, AnyObject, NSCoding, NSCopying, NSObjectProtocol    {        /// <summary>        /// The default implementation of this method raises an exception.        /// </summary>        /// <param name="anObject">The object for which a textual representation is returned.</param>        [iOSVersion(2)]        [Export("stringForObjectValue")]        public string StringForObjectValue(AnyObject anObject) { return default(string); }                /// <summary>        /// The default implementation returns nil to indicate that the formatter object does not provide an attributed string.        /// </summary>        /// <param name="anObject">The object for which a textual representation is returned.</param>        /// <param name="withDefaultAttributes">The default attributes to use for the returned attributed string.</param>        [iOSVersion(2)]        [Export("attributedStringForObjectValue")]        public NSAttributedString AttributedStringForObjectValue(AnyObject anObject, Dictionary<NSObject, AnyObject> withDefaultAttributes) { return default(NSAttributedString); }                /// <summary>        /// The default implementation of this method invokes stringForObjectValue:.        /// </summary>        /// <param name="anObject">The object for which to return an editing string.</param>        [iOSVersion(2)]        [Export("editingStringForObjectValue")]        public string EditingStringForObjectValue(AnyObject anObject) { return default(string); }                /// <summary>        /// The default implementation of this method raises an exception.        /// </summary>        /// <param name="anObject">If conversion is successful, upon return contains the object created from string.</param>        /// <param name="forString">The string to parse.</param>        /// <param name="errorDescription">If non-nil, if there is a error during the conversion, upon return contains an NSString object that describes the problem.</param>        [iOSVersion(2)]        [Export("getObjectValue")]        public bool GetObjectValue(AutoreleasingUnsafePointer<AnyObject> anObject, string forString, AutoreleasingUnsafePointer<string> errorDescription) { return default(bool); }                /// <summary>        /// Returns a Boolean value that indicates whether a partial string is valid.        /// </summary>        /// <param name="partialString">The text currently in a cell.</param>        /// <param name="newEditingString">If partialString needs to be modified, upon return contains the replacement string.</param>        /// <param name="errorDescription">If non-nil, if validation fails contains an NSString object that describes the problem.</param>        [iOSVersion(2)]        [Export("isPartialStringValid")]        public bool IsPartialStringValid(string partialString, AutoreleasingUnsafePointer<string> newEditingString, AutoreleasingUnsafePointer<string> errorDescription) { return default(bool); }                /// <summary>        /// This method should be implemented in subclasses that want to validate user changes to a string in a field, where the user changes are not necessarily at the end of the string, and preserve the selection (or set a different one, such as selecting the erroneous part of the string the user has typed).        /// </summary>        /// <param name="partialStringPtr">The new string to validate.</param>        /// <param name="proposedSelectedRange">The selection range that will be used if the string is accepted or replaced.</param>        /// <param name="originalString">The original string, before the proposed change.</param>        /// <param name="originalSelectedRange">The selection range over which the change is to take place.</param>        /// <param name="errorDescription">If non-nil, if validation fails contains an NSString object that describes the problem.</param>        [iOSVersion(2)]        [Export("isPartialStringValid")]        public bool IsPartialStringValid(AutoreleasingUnsafePointer<string> partialStringPtr, NSRangePointer proposedSelectedRange, string originalString, NSRange originalSelectedRange, AutoreleasingUnsafePointer<string> errorDescription) { return default(bool); }    }}