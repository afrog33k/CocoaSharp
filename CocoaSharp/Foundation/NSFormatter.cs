using ObjectiveC;using System;using SharpSwift.Attributes;using System.Collections.Generic;namespace Foundation{    /// <summary>    /// NSFormatter is an abstract class that declares an interface for objects that create, interpret, and validate the textual representation of cell contents. The Foundation framework provides two concrete subclasses of NSFormatter to generate these objects: NSNumberFormatter and NSDateFormatter.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSFormatter_Class/index.html#//apple_ref/occ/cl/NSFormatter"/>    [iOSVersion(2)]    [Export("")]    public class NSFormatter/* : NSDateFormatter*///, AnyObject, CVarArgType, Equatable, Hashable, NSCoding, NSCopying, NSObjectProtocol, Printable    {        public NSFormatter() { }        /// <summary>        /// The default implementation of this method raises an exception.        /// </summary>        /// <param name="anObject">The object for which a textual representation is returned.</param>        [iOSVersion(2)]        [Export("stringForObjectValue")]        [return:Optional]        public virtual string StringForObjectValue(AnyObject anObject) { return default(string); }                /// <summary>        /// The default implementation returns nil to indicate that the formatter object does not provide an attributed string.        /// </summary>        /// <param name="anObject">The object for which a textual representation is returned.</param>        /// <param name="withDefaultAttributes">The default attributes to use for the returned attributed string.</param>        [iOSVersion(2)]        [Export("attributedStringForObjectValue")]        [return:Optional]        public virtual NSAttributedString AttributedStringForObjectValue(AnyObject anObject, Dictionary<NSObject, AnyObject> withDefaultAttributes) { return default(NSAttributedString); }                /// <summary>        /// The default implementation of this method invokes stringForObjectValue:.        /// </summary>        /// <param name="anObject">The object for which to return an editing string.</param>        [iOSVersion(2)]        [Export("editingStringForObjectValue")]        public virtual string EditingStringForObjectValue(AnyObject anObject) { return default(string); }                /// <summary>        /// The default implementation of this method raises an exception.        /// </summary>        /// <param name="anObject">If conversion is successful, upon return contains the object created from string.</param>        /// <param name="forString">The string to parse.</param>        /// <param name="errorDescription">If non-nil, if there is a error during the conversion, upon return contains an NSString object that describes the problem.</param>        [iOSVersion(2)]        [Export("getObjectValue")]        public virtual bool GetObjectValue(AutoreleasingUnsafeMutablePointer<AnyObject> anObject, string forString, AutoreleasingUnsafeMutablePointer<string> errorDescription) { return default(bool); }                /// <summary>        /// Returns a Boolean value that indicates whether a partial string is valid.        /// </summary>        /// <param name="partialString">The text currently in a cell.</param>        /// <param name="newEditingString">If partialString needs to be modified, upon return contains the replacement string.</param>        /// <param name="errorDescription">If non-nil, if validation fails contains an NSString object that describes the problem.</param>        [iOSVersion(2)]        [Export("isPartialStringValid")]        public virtual bool IsPartialStringValid(string partialString, AutoreleasingUnsafeMutablePointer<string> newEditingString, AutoreleasingUnsafeMutablePointer<string> errorDescription) { return default(bool); }                /// <summary>        /// This method should be implemented in subclasses that want to validate user changes to a string in a field, where the user changes are not necessarily at the end of the string, and preserve the selection (or set a different one, such as selecting the erroneous part of the string the user has typed).        /// </summary>        /// <param name="partialStringPtr">The new string to validate.</param>        /// <param name="proposedSelectedRange">The selection range that will be used if the string is accepted or replaced.</param>        /// <param name="originalString">The original string, before the proposed change.</param>        /// <param name="originalSelectedRange">The selection range over which the change is to take place.</param>        /// <param name="errorDescription">If non-nil, if validation fails contains an NSString object that describes the problem.</param>        [iOSVersion(2)]        [Export("isPartialStringValid")]        public virtual bool IsPartialStringValid(AutoreleasingUnsafeMutablePointer<string> partialStringPtr, NSRangePointer proposedSelectedRange, string originalString, NSRange originalSelectedRange, AutoreleasingUnsafeMutablePointer<string> errorDescription) { return default(bool); }    }    /// <summary>    /// Specifies the width of the unit, determining the textual representation.    /// </summary>    public enum NSFormattingUnitStyle    {        /// <summary>        /// Specifies a short width.        /// The corresponding value is an NSInteger, equal to 1.        /// </summary>        [iOSVersion(8)]        Short,        /// <summary>        /// Specifies a medium width.        /// The corresponding value is an NSInteger, equal to 2.        /// </summary>        [iOSVersion(8)]        Medium,        /// <summary>        /// Specifies a long width.        /// The corresponding value is an NSInteger, equal to 3.        /// </summary>        [iOSVersion(8)]        Long,    }    /// <summary>    /// Specifies the capitalization context.    /// </summary>    public enum NSFormattingContext    {        /// <summary>        /// Specifies the capitalization context to be used is unknown.        /// This is the default value. The corresponding value is an NSInteger, equal to 0.        /// </summary>        [iOSVersion(8)]        Unknown,        /// <summary>        /// Specifies an undetermined format.        /// The capitalization context is determined dynamically from the set {NSFormattingContextStandalone, NSFormattingContextBeginningOfSentence, NSFormattingContextMiddleOfSentence}.        /// When the string proxy is used in stringWithFormat:, the formatter returns a string proxy for a generic string and then formats the string using NSFormattingContextUnknown. The formatter derives the context from the generic stringâ€™s location and then formats the string appropriately.        /// The corresponding value is an NSInteger, equal to 1.        /// </summary>        [iOSVersion(8)]        Dynamic,        /// <summary>        /// Specifies formatting for the beginning of a sentences.        /// The capitalization context if a date or date symbol is to be formatted with capitalization appropriate for stand-alone usage such as an isolated name on a calendar page.        /// The corresponding value is an NSInteger, equal to 2.        /// </summary>        [iOSVersion(8)]        Standalone,        /// <summary>        /// Specifies formatting for a list or menu.        /// The capitalization context if a date or date symbol is to be formatted with capitalization appropriate for a list or menu item.        /// The corresponding value is an NSInteger, equal to 3.        /// </summary>        [iOSVersion(8)]        ListItem,        /// <summary>        /// Specifies formatting for the beginning of a sentence.        /// The capitalization context if a date or date symbol is to be formatted with capitalization appropriate for the beginning of a sentence.        /// The corresponding value is an NSInteger, equal to 4.        /// </summary>        [iOSVersion(8)]        BeginningOfSentence,        /// <summary>        /// Specifies formatting for the middle of a sentence.        /// The capitalization context if a date or date symbol is to be formatted with capitalization appropriate for the middle of a sentence.        /// The corresponding value is an NSInteger, equal to 5.        /// </summary>        [iOSVersion(8)]        MiddleOfSentence,    }}