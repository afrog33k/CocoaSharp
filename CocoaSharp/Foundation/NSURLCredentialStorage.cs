using ObjectiveC;using System;using SharpSwift.Attributes;using System.Collections.Generic;namespace Foundation{    /// <summary>    /// NSURLCredentialStorage implements a singleton (shared object) that manages the credential storage.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSURLCredentialStorage_Class/index.html#//apple_ref/occ/cl/NSURLCredentialStorage"/>    [iOSVersion(2)]    public class NSURLCredentialStorage : NSObject//, AnyObject, NSObjectProtocol    {        /// <summary>        /// Returns the shared URL credential storage object.        /// </summary>        [iOSVersion(2)]        [Export("sharedCredentialStorage")]        public static NSURLCredentialStorage SharedCredentialStorage() { return default(NSURLCredentialStorage); }                /// <summary>        /// Returns the default credential for the specified protectionSpace.        /// </summary>        /// <param name="protectionSpace">The URL protection space of interest.</param>        [iOSVersion(2)]        [Export("defaultCredentialForProtectionSpace")]        public NSURLCredential DefaultCredentialForProtectionSpace(NSURLProtectionSpace protectionSpace) { return default(NSURLCredential); }                /// <summary>        /// Sets the default credential for a specified protection space.        /// </summary>        /// <param name="credential">The URL credential to set as the default for protectionSpace. If the receiver does not contain credential in the specified protectionSpace it will be added.</param>        /// <param name="forProtectionSpace">The protection space whose default credential is being set.</param>        [iOSVersion(2)]        [Export("setDefaultCredential")]        public void SetDefaultCredential(NSURLCredential credential, NSURLProtectionSpace forProtectionSpace) {  }                /// <summary>        /// Removes a specified credential from the credential storage for the specified protection space.        /// </summary>        /// <param name="credential">The credential to remove.</param>        /// <param name="forProtectionSpace">The protection space from which to remove the credential.</param>        [iOSVersion(2)]        [Export("removeCredential")]        public void RemoveCredential(NSURLCredential credential, NSURLProtectionSpace forProtectionSpace) {  }                /// <summary>        /// Removes a specified credential from the credential storage for the specified protection space using the given options.        /// </summary>        /// <param name="credential">The credential to remove.</param>        /// <param name="forProtectionSpace">The protection space from which to remove the credential.</param>        /// <param name="options">A dictionary containing options to consider when removing the credential.        ///   For possible keys, see Dictionary Key for Credential Removal Options. You should use this when trying to delete a credential that has the NSURLCredentialPersistenceSynchronizable policy.        ///     Note        ///     	When NSURLCredential objects that have a NSURLCredentialPersistenceSynchronizable policy        ///  are removed, the credential will be removed on all devices that contain this credential.</param>        [iOSVersion(7)]        [Export("removeCredential")]        public void RemoveCredential(NSURLCredential credential, NSURLProtectionSpace forProtectionSpace, Dictionary<NSObject, AnyObject> options) {  }                /// <summary>        /// Adds credential to the credential storage for the specified protectionSpace.        /// </summary>        /// <param name="credential">The credential to add. If a credential with the same user name already exists in protectionSpace, then credential replaces the existing object.</param>        /// <param name="forProtectionSpace">The protection space to which to add the credential.</param>        [iOSVersion(2)]        [Export("setCredential")]        public void SetCredential(NSURLCredential credential, NSURLProtectionSpace forProtectionSpace) {  }                /// <summary>        /// Returns a dictionary containing the credentials for the specified protection space.        /// </summary>        /// <param name="protectionSpace">The protection space whose credentials you want to retrieve.</param>        [iOSVersion(2)]        [Export("credentialsForProtectionSpace")]        public Dictionary<NSObject, AnyObject> CredentialsForProtectionSpace(NSURLProtectionSpace protectionSpace) { return default(Dictionary<NSObject, AnyObject>); }                /// <summary>        /// The credentials for all available protection spaces. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("allCredentials")]        public Dictionary<NSObject, AnyObject> AllCredentials { get; private set; }    }    /// <summary>    /// The notification object is the NSURLCredentialStorage instance. This notification does not contain a userInfo dictionary.    /// </summary>    [iOSVersion(2)]    public class NSURLCredentialStorageChangedNotification : NSNotification    {        public NSURLCredentialStorageChangedNotification() : base("", null) { }    }}