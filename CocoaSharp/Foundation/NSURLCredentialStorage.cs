using ObjectiveC;using System;using SwiftSharp.Attributes;namespace Foundation{    //https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSURLCredentialStorage_Class/index.html#//apple_ref/occ/cl/NSURLCredentialStorage    /// <summary>    /// NSURLCredentialStorage implements a singleton (shared object) that manages the credential storage.    /// </summary>    [iOSVersion(2)]    public class NSURLCredentialStorage : NSObject    {        /// <summary>        /// Returns the shared URL credential storage object.        /// </summary>        /// <returns>The shared NSURLCredentialStorage object.</returns>        [iOSVersion(2)]        [Export("sharedCredentialStorage")]        public static NSURLCredentialStorage SharedCredentialStorage() { return null; }                /// <summary>        /// Returns the default credential for the specified protectionSpace.        /// </summary>        /// <param name="protectionSpace">The URL protection space of interest.</param>        /// <returns>The default credential for protectionSpace or nil if no default has been set.</returns>        [iOSVersion(2)]        [Export("defaultCredentialForProtectionSpace")]        public NSURLCredential DefaultCredentialForProtectionSpace(NSURLProtectionSpace protectionSpace) { return null; }                /// <summary>        /// Sets the default credential for a specified protection space.        /// </summary>        /// <param name="credential">The URL credential to set as the default for protectionSpace. If the receiver does not contain credential in the specified protectionSpace it will be added.</param>        /// <param name="forProtectionSpace">The protection space whose default credential is being set.</param>        [iOSVersion(2)]        [Export("setDefaultCredential")]        public void SetDefaultCredential(NSURLCredential credential, NSURLProtectionSpace forProtectionSpace) { }                /// <summary>        /// Removes a specified credential from the credential storage for the specified protection space.        /// </summary>        /// <param name="credential">The credential to remove.</param>        /// <param name="forProtectionSpace">The protection space from which to remove the credential.</param>        [iOSVersion(2)]        [Export("removeCredential")]        public void RemoveCredential(NSURLCredential credential, NSURLProtectionSpace forProtectionSpace) { }                /// <summary>        /// Removes a specified credential from the credential storage for the specified protection space using the given options.        /// </summary>        /// <param name="credential">The credential to remove.</param>        /// <param name="forProtectionSpace">The protection space from which to remove the credential.</param>        /// <param name="options">A dictionary containing options to consider when removing the credential.   For possible keys, see Dictionary Key for Credential Removal Options. You should use this when trying to delete a credential that has the NSURLCredentialPersistenceSynchronizable policy.       Note     	When NSURLCredential objects that have a NSURLCredentialPersistenceSynchronizable policy are removed, the credential will be removed on all devices that contain this credential.</param>        [iOSVersion(7)]        [Export("removeCredential")]        public void RemoveCredential(NSURLCredential credential, NSURLProtectionSpace forProtectionSpace, NSDictionary options) { }                /// <summary>        /// Adds credential to the credential storage for the specified protectionSpace.        /// </summary>        /// <param name="credential">The credential to add. If a credential with the same user name already exists in protectionSpace, then credential replaces the existing object.</param>        /// <param name="forProtectionSpace">The protection space to which to add the credential.</param>        [iOSVersion(2)]        [Export("setCredential")]        public void SetCredential(NSURLCredential credential, NSURLProtectionSpace forProtectionSpace) { }                /// <summary>        /// Returns a dictionary containing the credentials for all available protection spaces.        /// </summary>        /// <returns>A dictionary containing the credentials for all available protection spaces. The dictionary has keys corresponding to the NSURLProtectionSpace objects. The values for the NSURLProtectionSpace keys consist of dictionaries where the keys are user name strings, and the value is the corresponding NSURLCredential object.</returns>        [iOSVersion(2)]        [Export("allCredentials")]        public NSDictionary AllCredentials { get; private set; }                /// <summary>        /// Returns a dictionary containing the credentials for the specified protection space.        /// </summary>        /// <param name="protectionSpace">The protection space whose credentials you want to retrieve.</param>        /// <returns>A dictionary containing the credentials for protectionSpace. The dictionaryâ€™s keys are user name strings, and the value is the corresponding NSURLCredential.</returns>        [iOSVersion(2)]        [Export("credentialsForProtectionSpace")]        public NSDictionary CredentialsForProtectionSpace(NSURLProtectionSpace protectionSpace) { return null; }                /// <summary>        /// Key used by the options dictionary passed in removeCredential:forProtectionSpace:options:.        /// </summary>        [Export("NSURLCredentialStorageRemoveSynchronizableCredentials")]        public string NSURLCredentialStorageRemoveSynchronizableCredentials { get; private set; }    }


    /// <summary>
    /// This notification is posted when the set of stored credentials changes.
    /// The notification object is the NSURLCredentialStorage instance. This notification does not contain a userInfo dictionary.
    /// </summary>
    [iOSVersion(2)]
    public class NSURLCredentialStorageChangedNotification : NSNotification
    {
        public NSURLCredentialStorageChangedNotification() : base("NSURLCredentialStorageChanged", null) { }
    }}