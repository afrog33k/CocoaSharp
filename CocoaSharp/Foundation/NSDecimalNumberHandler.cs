using ObjectiveC;using System;using SwiftSharp.Attributes;namespace Foundation{	//https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSDecimalNumberHandler_Class/index.html#//apple_ref/occ/cl/NSDecimalNumberHandler	/// <summary>	/// NSDecimalNumberHandler is a class that adopts the NSDecimalNumberBehaviors protocol. This class allows you to set the way an NSDecimalNumber object rounds off and handles errors, without having to create a custom class.	/// </summary>	[iOSVersion(2)]	public class NSDecimalNumberHandler : NSObject	{		/// <summary>		/// Returns the default instance of NSDecimalNumberHandler.		/// </summary>		/// <returns>The default instance of NSDecimalNumberHandler.</returns>		[iOSVersion(2)]		[Export("defaultDecimalNumberHandler")]		public static NSDecimalNumberHandler DefaultDecimalNumberHandler() { return null; }				/// <summary>		/// Returns an NSDecimalNumberHandler object with customized behavior.		/// </summary>		/// <param name="roundingMode">The rounding mode to use. There are four possible values: NSRoundUp, NSRoundDown, NSRoundPlain, and NSRoundBankers.</param>		/// <param name="scale">The number of digits a rounded value should have after its decimal point.</param>		/// <param name="raiseOnExactness">If true, in the event of an exactness error the handler will raise an exception, otherwise it will ignore the error and return control to the calling method.</param>		/// <param name="raiseOnOverflow">If true, in the event of an overflow error the handler will raise an exception, otherwise it will ignore the error and return control to the calling method</param>		/// <param name="raiseOnUnderflow">If true, in the event of an underflow error the handler will raise an exception, otherwise it will ignore the error and return control to the calling method</param>		/// <param name="raiseOnDivideByZero">If true, in the event of a divide by zero error the handler will raise an exception, otherwise it will ignore the error and return control to the calling method</param>		/// <returns>An NSDecimalNumberHandler object with customized behavior.</returns>		[iOSVersion(2)]		[Export("decimalNumberHandlerWithRoundingMode")]		public static NSDecimalNumberHandler DecimalNumberHandlerWithRoundingMode(NSRoundingMode roundingMode, CShort scale, bool raiseOnExactness, bool raiseOnOverflow, bool raiseOnUnderflow, bool raiseOnDivideByZero) { return null; }				/// <summary>		/// Returns an NSDecimalNumberHandler object initialized so it behaves as specified by the methodâ€™s arguments.		/// </summary>		/// <param name="roundingMode">The rounding mode to use. There are four possible values: NSRoundUp, NSRoundDown, NSRoundPlain, and NSRoundBankers.</param>		/// <param name="scale">The number of digits a rounded value should have after its decimal point.</param>		/// <param name="raiseOnExactness">If true, in the event of an exactness error the handler will raise an exception, otherwise it will ignore the error and return control to the calling method.</param>		/// <param name="raiseOnOverflow">If true, in the event of an overflow error the handler will raise an exception, otherwise it will ignore the error and return control to the calling method</param>		/// <param name="raiseOnUnderflow">If true, in the event of an underflow error the handler will raise an exception, otherwise it will ignore the error and return control to the calling method</param>		/// <param name="raiseOnDivideByZero">If true, in the event of a divide by zero error the handler will raise an exception, otherwise it will ignore the error and return control to the calling method</param>		/// <returns>An initialized NSDecimalNumberHandler object initialized with customized behavior. The returned object might be different than the original receiver.</returns>		[iOSVersion(2)]		public NSDecimalNumberHandler(NSRoundingMode roundingMode, CShort scale, bool raiseOnExactness, bool raiseOnOverflow, bool raiseOnUnderflow, bool raiseOnDivideByZero) { }	}}