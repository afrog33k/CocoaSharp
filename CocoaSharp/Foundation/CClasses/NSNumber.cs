using ObjectiveC;using System;using SwiftSharp.Attributes;namespace Foundation{    //https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSNumber_Class/index.html#//apple_ref/occ/cl/NSNumber    /// <summary>    /// NSNumber is a subclass of NSValue that offers a value as any C scalar (numeric) type. It defines a set of methods specifically for setting and accessing the value as a signed or unsigned char, short int, int, long int, long long int, float, or double or as a BOOL. (Note that number objects do not necessarily preserve the type they are created with.) It also defines a compare: method to determine the ordering of two NSNumber objects.    /// </summary>    [iOSVersion(2)]    public class NSNumber : NSValue    {        /// <summary>        /// Creates and returns an NSNumber object containing a given value, treating it as a BOOL.        /// </summary>        /// <param name="value">The value for the new number.</param>        /// <returns>An NSNumber object containing value, treating it as a BOOL.</returns>        [iOSVersion(2)]        [Export("numberWithBool")]        public static NSNumber NumberWithBool(bool value) { return null; }                /// <summary>        /// Creates and returns an NSNumber object containing a given value, treating it as a signed char.        /// </summary>        /// <param name="value">The value for the new number.</param>        /// <returns>An NSNumber object containing value, treating it as a signed char.</returns>        [iOSVersion(2)]        [Export("numberWithChar")]        public static NSNumber NumberWithChar(CChar value) { return null; }                /// <summary>        /// Creates and returns an NSNumber object containing a given value, treating it as a double.        /// </summary>        /// <param name="value">The value for the new number.</param>        /// <returns>An NSNumber object containing value, treating it as a double.</returns>        [iOSVersion(2)]        [Export("numberWithDouble")]        public static NSNumber NumberWithDouble(CDouble value) { return null; }                /// <summary>        /// Creates and returns an NSNumber object containing a given value, treating it as a float.        /// </summary>        /// <param name="value">The value for the new number.</param>        /// <returns>An NSNumber object containing value, treating it as a float.</returns>        [iOSVersion(2)]        [Export("numberWithFloat")]        public static NSNumber NumberWithFloat(CFloat value) { return null; }                /// <summary>        /// Creates and returns an NSNumber object containing a given value, treating it as a signed int.        /// </summary>        /// <param name="value">The value for the new number.</param>        /// <returns>An NSNumber object containing value, treating it as a signed int.</returns>        [iOSVersion(2)]        [Export("numberWithint")]        public static NSNumber NumberWithint(Cint value) { return null; }                /// <summary>        /// Creates and returns an NSNumber object containing a given value, treating it as an NSinteger.        /// </summary>        /// <param name="value">The value for the new number.</param>        /// <returns>An NSNumber object containing value, treating it as an NSinteger.</returns>        [iOSVersion(2)]        [Export("numberWithinteger")]        public static NSNumber NumberWithinteger(int value) { return null; }                /// <summary>        /// Creates and returns an NSNumber object containing a given value, treating it as a signed long.        /// </summary>        /// <param name="value">The value for the new number.</param>        /// <returns>An NSNumber object containing value, treating it as a signed long.</returns>        [iOSVersion(2)]        [Export("numberWithLong")]        public static NSNumber NumberWithLong(CLong value) { return null; }                /// <summary>        /// Creates and returns an NSNumber object containing a given value, treating it as a signed long long.        /// </summary>        /// <param name="value">The value for the new number.</param>        /// <returns>An NSNumber object containing value, treating it as a signed long long.</returns>        [iOSVersion(2)]        [Export("numberWithLongLong")]        public static NSNumber NumberWithLongLong(CLongLong value) { return null; }                /// <summary>        /// Creates and returns an NSNumber object containing value, treating it as a signed short.        /// </summary>        /// <param name="value">The value for the new number.</param>        /// <returns>An NSNumber object containing value, treating it as a signed short.</returns>        [iOSVersion(2)]        [Export("numberWithShort")]        public static NSNumber NumberWithShort(CShort value) { return null; }                /// <summary>        /// Creates and returns an NSNumber object containing a given value, treating it as an unsigned char.        /// </summary>        /// <param name="value">The value for the new number.</param>        /// <returns>An NSNumber object containing value, treating it as an unsigned char.</returns>        [iOSVersion(2)]        [Export("numberWithUnsignedChar")]        public static NSNumber NumberWithUnsignedChar(CUnsignedChar value) { return null; }                /// <summary>        /// Creates and returns an NSNumber object containing a given value, treating it as an unsigned int.        /// </summary>        /// <param name="value">The value for the new number.</param>        /// <returns>An NSNumber object containing value, treating it as an unsigned int.</returns>        [iOSVersion(2)]        [Export("numberWithUnsignedint")]        public static NSNumber NumberWithUnsignedint(CUnsignedint value) { return null; }                /// <summary>        /// Creates and returns an NSNumber object containing a given value, treating it as an NSUinteger.        /// </summary>        /// <param name="value">The value for the new number.</param>        /// <returns>An NSNumber object containing value, treating it as an NSUinteger.</returns>        [iOSVersion(2)]        [Export("numberWithUnsignedinteger")]        public static NSNumber NumberWithUnsignedinteger(int value) { return null; }                /// <summary>        /// Creates and returns an NSNumber object containing a given value, treating it as an unsigned long.        /// </summary>        /// <param name="value">The value for the new number.</param>        /// <returns>An NSNumber object containing value, treating it as an unsigned long.</returns>        [iOSVersion(2)]        [Export("numberWithUnsignedLong")]        public static NSNumber NumberWithUnsignedLong(CUnsignedLong value) { return null; }                /// <summary>        /// Creates and returns an NSNumber object containing a given value, treating it as an unsigned long long.        /// </summary>        /// <param name="value">The value for the new number.</param>        /// <returns>An NSNumber object containing value, treating it as an unsigned long long.</returns>        [iOSVersion(2)]        [Export("numberWithUnsignedLongLong")]        public static NSNumber NumberWithUnsignedLongLong(CUnsignedLongLong value) { return null; }                /// <summary>        /// Creates and returns an NSNumber object containing a given value, treating it as an unsigned short.        /// </summary>        /// <param name="value">The value for the new number.</param>        /// <returns>An NSNumber object containing value, treating it as an unsigned short.</returns>        [iOSVersion(2)]        [Export("numberWithUnsignedShort")]        public static NSNumber NumberWithUnsignedShort(CUnsignedShort value) { return null; }                /// <summary>        /// Returns an NSNumber object initialized to contain a given value, treated as a BOOL.        /// </summary>        /// <param name="bool">The value for the new number.</param>        /// <returns>An NSNumber object containing value, treating it as a BOOL.</returns>        [iOSVersion(2)]        public NSNumber(bool @bool) { }                /// <summary>        /// Returns an NSNumber object initialized to contain a given value, treated as a signed char.        /// </summary>        /// <param name="char">The value for the new number.</param>        /// <returns>An NSNumber object containing value, treating it as a signed char.</returns>        [iOSVersion(2)]        public NSNumber(CChar @char) { }                /// <summary>        /// Returns an NSNumber object initialized to contain value, treated as a double.        /// </summary>        /// <param name="double">The value for the new number.</param>        /// <returns>An NSNumber object containing value, treating it as a double.</returns>        [iOSVersion(2)]        public NSNumber(CDouble @double) { }                /// <summary>        /// Returns an NSNumber object initialized to contain a given value, treated as a float.        /// </summary>        /// <param name="float">The value for the new number.</param>        /// <returns>An NSNumber object containing value, treating it as a float.</returns>        [iOSVersion(2)]        public NSNumber(CFloat @float) { }                /// <summary>        /// Returns an NSNumber object initialized to contain a given value, treated as a signed int.        /// </summary>        /// <param name="int">The value for the new number.</param>        /// <returns>An NSNumber object containing value, treating it as a signed int.</returns>        [iOSVersion(2)]        public NSNumber(Cint @int) { }                /// <summary>        /// Returns an NSNumber object initialized to contain a given value, treated as an NSinteger.        /// </summary>        /// <param name="integer">The value for the new number.</param>        /// <returns>An NSNumber object containing value, treating it as an NSinteger.</returns>        [iOSVersion(2)]        public NSNumber(int integer) { }                /// <summary>        /// Returns an NSNumber object initialized to contain a given value, treated as a signed long.        /// </summary>        /// <param name="long">The value for the new number.</param>        /// <returns>An NSNumber object containing value, treating it as a signed long.</returns>        [iOSVersion(2)]        public NSNumber(CLong @long) { }                /// <summary>        /// Returns an NSNumber object initialized to contain value, treated as a signed long long.        /// </summary>        /// <param name="longLong">The value for the new number.</param>        /// <returns>An NSNumber object containing value, treating it as a signed long long.</returns>        [iOSVersion(2)]        public NSNumber(CLongLong longLong) { }                /// <summary>        /// Returns an NSNumber object initialized to contain a given value, treated as a signed short.        /// </summary>        /// <param name="short">The value for the new number.</param>        /// <returns>An NSNumber object containing value, treating it as a signed short.</returns>        [iOSVersion(2)]        public NSNumber(CShort @short) { }                /// <summary>        /// Returns an NSNumber object initialized to contain a given value, treated as an unsigned char.        /// </summary>        /// <param name="unsignedChar">The value for the new number.</param>        /// <returns>An NSNumber object containing value, treating it as an unsigned char.</returns>        [iOSVersion(2)]        public NSNumber(CUnsignedChar unsignedChar) { }                /// <summary>        /// Returns an NSNumber object initialized to contain a given value, treated as an unsigned int.        /// </summary>        /// <param name="unsignedint">The value for the new number.</param>        /// <returns>An NSNumber object containing value, treating it as an unsigned int.</returns>        [iOSVersion(2)]        public NSNumber(CUnsignedint unsignedint) { }                /// <summary>        /// Returns an NSNumber object initialized to contain a given value, treated as an NSUinteger.        /// </summary>        /// <param name="unsignedinteger">The value for the new number.</param>        /// <returns>An NSNumber object containing value, treating it as an NSUinteger.</returns>        [iOSVersion(2)]        public NSNumber(uint unsignedinteger) { }                /// <summary>        /// Returns an NSNumber object initialized to contain a given value, treated as an unsigned long.        /// </summary>        /// <param name="unsignedLong">The value for the new number.</param>        /// <returns>An NSNumber object containing value, treating it as an unsigned long.</returns>        [iOSVersion(2)]        public NSNumber(CUnsignedLong unsignedLong) { }                /// <summary>        /// Returns an NSNumber object initialized to contain a given value, treated as an unsigned long long.        /// </summary>        /// <param name="unsignedLongLong">The value for the new number.</param>        /// <returns>An NSNumber object containing value, treating it as an unsigned long long.</returns>        [iOSVersion(2)]        public NSNumber(CUnsignedLongLong unsignedLongLong) { }                /// <summary>        /// Returns an NSNumber object initialized to contain a given value, treated as an unsigned short.        /// </summary>        /// <param name="unsignedShort">The value for the new number.</param>        /// <returns>An NSNumber object containing value, treating it as an unsigned short.</returns>        [iOSVersion(2)]        public NSNumber(CUnsignedShort unsignedShort) { }                /// <summary>        /// Returns the receiver’s value as a BOOL.        /// </summary>        /// <returns>The receiver’s value as a BOOL, converting it as necessary.</returns>        [iOSVersion(2)]        [Export("boolValue")]        public bool BoolValue { get; private set; }                /// <summary>        /// Returns the receiver’s value as a char.        /// </summary>        /// <returns>The receiver’s value as a char, converting it as necessary.</returns>        [iOSVersion(2)]        [Export("charValue")]        public CChar CharValue { get; private set; }                /// <summary>        /// Returns the receiver’s value as a double.        /// </summary>        /// <returns>The receiver’s value as a double, converting it as necessary.</returns>        [iOSVersion(2)]        [Export("doubleValue")]        public CDouble DoubleValue { get; private set; }                /// <summary>        /// Returns the receiver’s value as a float.        /// </summary>        /// <returns>The receiver’s value as a float, converting it as necessary.</returns>        [iOSVersion(2)]        [Export("floatValue")]        public CFloat FloatValue { get; private set; }                /// <summary>        /// Returns the receiver’s value as an int.        /// </summary>        /// <returns>The receiver’s value as an int, converting it as necessary.</returns>        [iOSVersion(2)]        [Export("intValue")]        public Cint intValue { get; private set; }                /// <summary>        /// Returns the receiver’s value as an NSinteger.        /// </summary>        /// <returns>The receiver’s value as an NSinteger, converting it as necessary.</returns>        [iOSVersion(2)]        [Export("integerValue")]        public int integerValue { get; private set; }                /// <summary>        /// Returns the receiver’s value as a long long.        /// </summary>        /// <returns>The receiver’s value as a long long, converting it as necessary.</returns>        [iOSVersion(2)]        [Export("longLongValue")]        public CLongLong LongLongValue { get; private set; }                /// <summary>        /// Returns the receiver’s value as a long.        /// </summary>        /// <returns>The receiver’s value as a long, converting it as necessary.</returns>        [iOSVersion(2)]        [Export("longValue")]        public CLong LongValue { get; private set; }                /// <summary>        /// Returns the receiver’s value as a short.        /// </summary>        /// <returns>The receiver’s value as a short, converting it as necessary.</returns>        [iOSVersion(2)]        [Export("shortValue")]        public CShort ShortValue { get; private set; }                /// <summary>        /// Returns the receiver’s value as an unsigned char.        /// </summary>        /// <returns>The receiver’s value as an unsigned char, converting it as necessary.</returns>        [iOSVersion(2)]        [Export("unsignedCharValue")]        public CUnsignedChar UnsignedCharValue { get; private set; }                /// <summary>        /// Returns the receiver’s value as an NSUinteger.        /// </summary>        /// <returns>The receiver’s value as an NSUinteger, converting it as necessary.</returns>        [iOSVersion(2)]        [Export("unsignedintegerValue")]        public int UnsignedintegerValue { get; private set; }                /// <summary>        /// Returns the receiver’s value as an unsigned int.        /// </summary>        /// <returns>The receiver’s value as an unsigned int, converting it as necessary.</returns>        [iOSVersion(2)]        [Export("unsignedintValue")]        public CUnsignedint UnsignedintValue { get; private set; }                /// <summary>        /// Returns the receiver’s value as an unsigned long long.        /// </summary>        /// <returns>The receiver’s value as an unsigned long long, converting it as necessary.</returns>        [iOSVersion(2)]        [Export("unsignedLongLongValue")]        public CUnsignedLongLong UnsignedLongLongValue { get; private set; }                /// <summary>        /// Returns the receiver’s value as an unsigned long.        /// </summary>        /// <returns>The receiver’s value as an unsigned long, converting it as necessary.</returns>        [iOSVersion(2)]        [Export("unsignedLongValue")]        public CUnsignedLong UnsignedLongValue { get; private set; }                /// <summary>        /// Returns the receiver’s value as an unsigned short.        /// </summary>        /// <returns>The receiver’s value as an unsigned short, converting it as necessary.</returns>        [iOSVersion(2)]        [Export("unsignedShortValue")]        public CUnsignedShort UnsignedShortValue { get; private set; }                /// <summary>        /// Returns a string that represents the contents of the receiver for a given locale.        /// </summary>        /// <param name="aLocale">An object containing locale information with which to format the description. Use nil if you don’t want the description formatted.</param>        /// <returns>A string that represents the contents of the receiver formatted using the locale information in locale.</returns>        [iOSVersion(2)]        [Export("descriptionWithLocale")]        public string DescriptionWithLocale(AnyObject aLocale) { return ""; }                /// <summary>        /// Returns the receiver’s value as a human-readable string.        /// </summary>        /// <returns>The receiver’s value as a human-readable string, created by invoking descriptionWithLocale: where locale is nil.</returns>        [iOSVersion(2)]        [Export("stringValue")]        public string StringValue { get; private set; }                /// <summary>        /// Returns an NSComparisonResult value that indicates whether the receiver is greater than, equal to, or less than a given number.        /// </summary>        /// <param name="aNumber">The number with which to compare the receiver.   This value must not be nil. If the value is nil, the behavior is undefined and may change in future versions of OS X.</param>        /// <returns>NSOrderedAscending if the value of aNumber is greater than the receiver’s, NSOrderedSame if they’re equal, and NSOrderedDescending if the value of aNumber is less than the receiver’s.</returns>        [iOSVersion(2)]        [Export("compare")]
        public NSComparisonResult Compare(NSNumber aNumber) { return NSComparisonResult.OrderedSame; }                /// <summary>        /// Returns a Boolean value that indicates whether the receiver and a given number are equal.        /// </summary>        /// <param name="aNumber">The number with which to compare the receiver.</param>        /// <returns>true if the receiver and aNumber are equal, otherwise false.</returns>        [iOSVersion(2)]        [Export("isEqualToNumber")]        public bool IsEqualToNumber(NSNumber aNumber) { return false; }    }}