using ObjectiveC;using System;using SharpSwift.Attributes;using System.Collections.Generic;namespace Foundation{    /// <summary>    /// An NSExtensionContext object represents the host app context from which an app extension is invoked.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/Foundation/Reference/NSExtensionContext_Class/index.html#//apple_ref/occ/cl/NSExtensionContext"/>    [iOSVersion(8)]    [Export("")]    public class NSExtensionContext : NSObject//, AnyObject, CVarArgType, Equatable, Hashable, NSObjectProtocol, Printable    {        public NSExtensionContext() { }        /// <summary>        /// Tells the host app to cancel the app extension request, with a supplied error.        /// </summary>        /// <param name="error">The error object to return. It must be non-nil.</param>        [iOSVersion(8)]        [Export("cancelRequestWithError")]        public virtual void CancelRequestWithError(NSError error) {  }                /// <summary>        /// Tells the host app to complete the app extension request with an array of result items.        /// </summary>        /// <param name="items">An array of result items, each an NSExtensionItem object, to return to the host app.</param>        /// <param name="completionHandler">An optional block to be called when the request completes, performed as a background priority task.        ///   The block takes the following parameter:        ///       expired        ///   A Boolean value that indicates whether the system is terminating a previous invocation of the completionHandler block.        ///   This parameter is true when the system prematurely terminatates a completionHandler block that was previously invoked and had not otherwise expired.        ///     Important        ///     If the system calls your block with an expired value of true, you must immediately suspend your app extension. If you fail to do this, the system terminates your extensionâ€™s process.        ///   When your app extension exits, all concurrent requests being handled by the extension, serving the same or other host apps, are terminated.</param>        [iOSVersion(8)]        [Export("completeRequestReturningItems")]        public virtual void CompleteRequestReturningItems(AnyObject[] items, Action<bool> completionHandler) {  }                /// <summary>        /// Asks the system open a URL on behalf of the currently running app extension.        /// </summary>        /// <param name="URL">The URL to open.</param>        /// <param name="completionHandler">A block to be called when the URL has opened.        ///   The block takes the following parameter:        ///       success        ///   A Boolean value that indicates whether the open operation was successful.</param>        [iOSVersion(8)]        [Export("openURL")]        public virtual void OpenURL(NSURL URL, Action<bool> completionHandler) {  }                /// <summary>        /// The list of input NSExtensionItem objects associated with the context. (read-only)        /// </summary>        [iOSVersion(8)]        [Export("inputItems")]        public AnyObject[] InputItems { get; private set; }    }}