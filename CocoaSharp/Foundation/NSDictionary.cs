using ObjectiveC;using System;using SharpSwift.Attributes;using System.Collections.Generic;namespace Foundation{    /// <summary>    /// The NSDictionary class declares the programmatic interface to objects that manage immutable associations of keys and values. Use this class or its subclass NSMutableDictionary when you need a convenient and efficient way to retrieve data associated with an arbitrary key. NSDictionary creates static dictionaries, and NSMutableDictionary creates dynamic dictionaries. (For convenience, the term dictionary refers to any instance of one of these classes without specifying its exact class membership.)    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSDictionary_Class/index.html#//apple_ref/occ/cl/NSDictionary"/>    [iOSVersion(2)]    [Export("")]    public class NSDictionary : NSObject//, AnyObject, CVarArgType, DictionaryLiteralConvertible, Equatable, Hashable, NSCoding, NSCopying, NSFastEnumeration, NSMutableCopying, NSObjectProtocol, NSSecureCoding, Printable, Reflectable, SequenceType    {        /// <summary>        /// Creates and returns a dictionary containing a given key and value.        /// </summary>        /// <param name="@object">The value corresponding to aKey.        ///   If this value is nil, an NSInvalidArgumentException is raised.</param>        /// <param name="forKey">The key for anObject.        ///   If this value is nil, an NSInvalidArgumentException is raised.</param>        [iOSVersion(2)]        [Export("convenience init")]        public NSDictionary(AnyObject @object, NSCopying forKey) { }                /// <summary>        /// Initializes a newly allocated dictionary by placing in it the keys and values contained in another given dictionary.        /// </summary>        /// <param name="dictionary">A dictionary containing the keys and values with which to initialize the new dictionary.</param>        [iOSVersion(2)]        [Export("convenience init")]        public NSDictionary(Dictionary<NSObject, AnyObject> dictionary) { }                /// <summary>        /// Initializes a newly allocated dictionary using the objects contained in another given dictionary.        /// </summary>        /// <param name="dictionary">A dictionary containing the keys and values with which to initialize the new dictionary.</param>        /// <param name="copyItems">If true, each object in otherDictionary receives a copyWithZone: message to create a copy of the object—objects must conform to the NSCopying protocol. In a managed memory environment, this is instead of the retain message the object would otherwise receive. The object copy is then added to the returned dictionary.        ///   If false, then in a managed memory environment each object in otherDictionary simply receives a retain message when it is added to the returned dictionary.</param>        [iOSVersion(2)]        [Export("convenience init")]        public NSDictionary(Dictionary<NSObject, AnyObject> dictionary, bool copyItems) { }                /// <summary>        /// Initializes a newly allocated dictionary with entries constructed from the contents of the objects and keys arrays.        /// </summary>        /// <param name="objects">An array containing the values for the new dictionary.</param>        /// <param name="forKeys">An array containing the keys for the new dictionary. Each key is copied (using copyWithZone:; keys must conform to the NSCopying protocol), and the copy is added to the new dictionary.</param>        [iOSVersion(2)]        [Export("convenience init")]        public NSDictionary(AnyObject[] objects, AnyObject[] forKeys) { }                /// <summary>        /// Initializes a newly allocated dictionary with count entries.        /// </summary>        /// <param name="objects">A C array of values for the new dictionary.</param>        /// <param name="forKeys">A C array of keys for the new dictionary. Each key is copied (using copyWithZone:; keys must conform to the NSCopying protocol), and the copy is added to the new dictionary.</param>        /// <param name="count">The number of elements to use from the keys and objects arrays. count must not exceed the number of elements in objects or keys.</param>        [iOSVersion(2)]        public NSDictionary(UnsafePointer<AnyObject> objects, UnsafePointer<NSCopying> forKeys, int count) { }                /// <summary>        /// Initializes a newly allocated dictionary.        /// </summary>        [iOSVersion(7)]        public NSDictionary() { }                /// <summary>        /// Creates a shared key set object for the specified keys.        /// </summary>        /// <param name="keys">The array of keys. If the parameter is nil, an exception is thrown. If the array of keys is empty, an empty key set is returned.</param>        [iOSVersion(6)]        [Export("sharedKeySetForKeys")]        public static AnyObject SharedKeySetForKeys(AnyObject[] keys) { return default(AnyObject); }                /// <summary>        /// Returns a Boolean value that indicates whether the contents of the receiving dictionary are equal to the contents of another given dictionary.        /// </summary>        /// <param name="otherDictionary">The dictionary with which to compare the receiving dictionary.</param>        [iOSVersion(2)]        [Export("isEqualToDictionary")]        public virtual bool IsEqualToDictionary(Dictionary<NSObject, AnyObject> otherDictionary) { return default(bool); }                /// <summary>        /// Returns a new array containing the keys corresponding to all occurrences of a given object in the dictionary.        /// </summary>        /// <param name="anObject">The value to look for in the dictionary.</param>        [iOSVersion(2)]        [Export("allKeysForObject")]        public virtual AnyObject[] AllKeysForObject(AnyObject anObject) { return default(AnyObject[]); }                /// <summary>        /// Returns by reference C arrays of the keys and values in the dictionary.        /// </summary>        /// <param name="objects">Upon return, contains a C array of the values in the dictionary.</param>        /// <param name="andKeys">Upon return, contains a C array of the keys in the dictionary.</param>        [iOSVersion(2)]        [Export("getObjects")]        public virtual void GetObjects(AutoreleasingUnsafeMutablePointer<AnyObject> objects, AutoreleasingUnsafeMutablePointer<AnyObject> andKeys) {  }                /// <summary>        /// Returns the value associated with a given key.        /// </summary>        /// <param name="aKey">The key for which to return the corresponding value.</param>        [iOSVersion(2)]        [Export("objectForKey")]        [return:Optional]        public virtual AnyObject ObjectForKey(AnyObject aKey) { return default(AnyObject); }                /// <summary>        /// Returns the set of objects from the dictionary that corresponds to the specified keys as an NSArray.        /// </summary>        /// <param name="keys">An NSArray containing the keys for which to return corresponding values.</param>        /// <param name="notFoundMarker">The marker object to place in the corresponding element of the returned array if an object isn’t found in the dictionary to correspond to a given key.</param>        [iOSVersion(2)]        [Export("objectsForKeys")]        public virtual AnyObject[] ObjectsForKeys(AnyObject[] keys, AnyObject notFoundMarker) { return default(AnyObject[]); }                /// <summary>        /// Returns the value associated with a given key.        /// </summary>        /// <param name="key">The key for which to return the corresponding value. Note that when using key-value coding, the key must be a string (see Key-Value Coding Fundamentals in Key-Value Coding Programming Guide).</param>        [iOSVersion(2)]        [Export("valueForKey")]        [return:Optional]        public virtual AnyObject ValueForKey(string key) { return default(AnyObject); }                /// <summary>        /// Returns an enumerator object that lets you access each value in the dictionary.        /// </summary>        [iOSVersion(2)]        [Export("objectEnumerator")]        public virtual NSEnumerator ObjectEnumerator() { return default(NSEnumerator); }                /// <summary>        /// Applies a given block object to the entries of the dictionary.        /// </summary>        /// <param name="block">A block object to operate on entries in the dictionary.</param>        [iOSVersion(4)]        [Export("enumerateKeysAndObjectsUsingBlock")]        public virtual void EnumerateKeysAndObjectsUsingBlock(Action<AnyObject, AnyObject, UnsafeMutablePointer<ObjCBool>> block) {  }                /// <summary>        /// Applies a given block object to the entries of the dictionary.        /// </summary>        /// <param name="opts">Enumeration options.</param>        /// <param name="usingBlock">A block object to operate on entries in the dictionary.</param>        [iOSVersion(4)]        [Export("enumerateKeysAndObjectsWithOptions")]        public virtual void EnumerateKeysAndObjectsWithOptions(NSEnumerationOptions opts, Action<AnyObject, AnyObject, UnsafeMutablePointer<ObjCBool>> usingBlock) {  }                /// <summary>        /// Returns an array of the dictionary’s keys, in the order they would be in if the dictionary were sorted by its values.        /// </summary>        /// <param name="comparator">A selector that specifies the method to use to compare the values in the dictionary.        ///   The comparator method should return NSOrderedAscending if the dictionary value is smaller than the argument, NSOrderedDescending if the dictionary value is larger than the argument, and NSOrderedSame if they are equal.</param>        [iOSVersion(2)]        [Export("keysSortedByValueUsingSelector")]        public virtual AnyObject[] KeysSortedByValueUsingSelector(Selector comparator) { return default(AnyObject[]); }                /// <summary>        /// Returns an array of the dictionary’s keys, in the order they would be in if the dictionary were sorted by its values using a given comparator block.        /// </summary>        /// <param name="cmptr">A comparator block.</param>        [iOSVersion(4)]        [Export("keysSortedByValueUsingComparator")]        public virtual AnyObject[] KeysSortedByValueUsingComparator(NSComparator cmptr) { return default(AnyObject[]); }                /// <summary>        /// Returns an array of the dictionary’s keys, in the order they would be in if the dictionary were sorted by its values using a given comparator block and a specified set of options.        /// </summary>        /// <param name="opts">A bitmask of sort options.</param>        /// <param name="usingComparator">A comparator block.</param>        [iOSVersion(4)]        [Export("keysSortedByValueWithOptions")]        public virtual AnyObject[] KeysSortedByValueWithOptions(NSSortOptions opts, NSComparator usingComparator) { return default(AnyObject[]); }                /// <summary>        /// Returns the set of keys whose corresponding value satisfies a constraint described by a block object.        /// </summary>        /// <param name="predicate">A block object that specifies constraints for values in the dictionary.</param>        [iOSVersion(4)]        [Export("keysOfEntriesPassingTest")]        public virtual NSSet KeysOfEntriesPassingTest(Func<AnyObject, AnyObject, UnsafeMutablePointer<ObjCBool>, bool> predicate) { return default(NSSet); }                /// <summary>        /// Returns the set of keys whose corresponding value satisfies a constraint described by a block object.        /// </summary>        /// <param name="opts">A bit mask of enumeration options.</param>        /// <param name="passingTest">A block object that specifies constraints for values in the dictionary.</param>        [iOSVersion(4)]        [Export("keysOfEntriesWithOptions")]        public virtual NSSet KeysOfEntriesWithOptions(NSEnumerationOptions opts, Func<AnyObject, AnyObject, UnsafeMutablePointer<ObjCBool>, bool> passingTest) { return default(NSSet); }                /// <summary>        /// Writes a property list representation of the contents of the dictionary to a given path.        /// </summary>        /// <param name="path">The path at which to write the file.        ///   If path contains a tilde (~) character, you must expand it with stringByExpandingTildeInPath before invoking this method.</param>        /// <param name="atomically">A flag that specifies whether the file should be written atomically.        ///   If flag is true, the dictionary is written to an auxiliary file, and then the auxiliary file is renamed to path. If flag is false, the dictionary is written directly to path. The true option guarantees that path, if it exists at all, won’t be corrupted even if the system should crash during writing.</param>        [iOSVersion(2)]        [Export("writeToFile")]        public virtual bool WriteToFile(string path, bool atomically) { return default(bool); }                /// <summary>        /// Writes a property list representation of the contents of the dictionary to a given URL.        /// </summary>        /// <param name="aURL">The URL to which to write the dictionary.</param>        /// <param name="atomically">A flag that specifies whether the output should be written atomically.        ///   If flag is true, the dictionary is written to an auxiliary location, and then the auxiliary location is renamed to aURL. If flag is false, the dictionary is written directly to aURL. The true option guarantees that aURL, if it exists at all, won’t be corrupted even if the system should crash during writing. flag is ignored if aURL is of a type that cannot be written atomically.</param>        [iOSVersion(2)]        [Export("writeToURL")]        public virtual bool WriteToURL(NSURL aURL, bool atomically) { return default(bool); }                /// <summary>        /// Returns the value for the NSFileCreationDate key.        /// </summary>        [iOSVersion(2)]        [Export("fileCreationDate")]        [return:Optional]        public virtual NSDate FileCreationDate() { return default(NSDate); }                /// <summary>        /// Returns the value for the NSFileExtensionHidden key.        /// </summary>        [iOSVersion(2)]        [Export("fileExtensionHidden")]        public virtual bool FileExtensionHidden() { return default(bool); }                /// <summary>        /// Returns the value for the NSFileGroupOwnerAccountID key.        /// </summary>        [iOSVersion(2)]        [Export("fileGroupOwnerAccountID")]        [return:Optional]        public virtual NSNumber FileGroupOwnerAccountID() { return default(NSNumber); }                /// <summary>        /// Returns the value for the NSFileGroupOwnerAccountName key.        /// </summary>        [iOSVersion(2)]        [Export("fileGroupOwnerAccountName")]        [return:Optional]        public virtual string FileGroupOwnerAccountName() { return default(string); }                /// <summary>        /// Returns the value for the NSFileHFSCreatorCode key.        /// </summary>        [iOSVersion(2)]        [Export("fileHFSCreatorCode")]        public virtual OSType FileHFSCreatorCode() { return default(OSType); }                /// <summary>        /// Returns the value for the NSFileHFSTypeCode key.        /// </summary>        [iOSVersion(2)]        [Export("fileHFSTypeCode")]        public virtual OSType FileHFSTypeCode() { return default(OSType); }                /// <summary>        /// Returns the value for the NSFileAppendOnly key.        /// </summary>        [iOSVersion(2)]        [Export("fileIsAppendOnly")]        public virtual bool FileIsAppendOnly() { return default(bool); }                /// <summary>        /// Returns the value for the NSFileImmutable key.        /// </summary>        [iOSVersion(2)]        [Export("fileIsImmutable")]        public virtual bool FileIsImmutable() { return default(bool); }                /// <summary>        /// Returns the value for the key NSFileModificationDate.        /// </summary>        [iOSVersion(2)]        [Export("fileModificationDate")]        [return:Optional]        public virtual NSDate FileModificationDate() { return default(NSDate); }                /// <summary>        /// Returns the value for the NSFileOwnerAccountID key.        /// </summary>        [iOSVersion(2)]        [Export("fileOwnerAccountID")]        [return:Optional]        public virtual NSNumber FileOwnerAccountID() { return default(NSNumber); }                /// <summary>        /// Returns the value for the key NSFileOwnerAccountName.        /// </summary>        [iOSVersion(2)]        [Export("fileOwnerAccountName")]        [return:Optional]        public virtual string FileOwnerAccountName() { return default(string); }                /// <summary>        /// Returns the value for the key NSFilePosixPermissions.        /// </summary>        [iOSVersion(2)]        [Export("filePosixPermissions")]        public virtual int FilePosixPermissions() { return default(int); }                /// <summary>        /// Returns the value for the key NSFileSize.        /// </summary>        [iOSVersion(2)]        [Export("fileSize")]        public virtual UInt64 FileSize() { return default(UInt64); }                /// <summary>        /// Returns the value for the key NSFileSystemFileNumber.        /// </summary>        [iOSVersion(2)]        [Export("fileSystemFileNumber")]        public virtual int FileSystemFileNumber() { return default(int); }                /// <summary>        /// Returns the value for the key NSFileSystemNumber.        /// </summary>        [iOSVersion(2)]        [Export("fileSystemNumber")]        public virtual int FileSystemNumber() { return default(int); }                /// <summary>        /// Returns the value for the key NSFileType.        /// </summary>        [iOSVersion(2)]        [Export("fileType")]        [return:Optional]        public virtual string FileType() { return default(string); }                /// <summary>        /// Returns a string object that represents the contents of the dictionary, formatted as a property list.        /// </summary>        /// <param name="locale">An object that specifies options used for formatting each of the dictionary’s keys and values; pass nil if you don’t want them formatted.        ///   On iOS and OS X v10.5 and later, either an instance of NSDictionary or an NSLocale object may be used for locale. On OS X v10.4 and earlier it must be an instance of NSDictionary.</param>        [iOSVersion(2)]        [Export("descriptionWithLocale")]        public virtual string DescriptionWithLocale([Optional] AnyObject locale) { return default(string); }                /// <summary>        /// Returns a string object that represents the contents of the dictionary, formatted as a property list.        /// </summary>        /// <param name="locale">An object that specifies options used for formatting each of the dictionary’s keys and values; pass nil if you don’t want them formatted.        ///   On iOS and OS X v10.5 and later, either an instance of NSDictionary or an NSLocale object may be used for locale. On OS X v10.4 and earlier it must be an instance of NSDictionary.</param>        /// <param name="indent">Specifies a level of indentation, to make the output more readable: the indentation is (4 spaces) * level.</param>        [iOSVersion(2)]        [Export("descriptionWithLocale")]        public virtual string DescriptionWithLocale([Optional] AnyObject locale, int indent) { return default(string); }                /// <summary>        /// The number of entries in the dictionary (read-only)        /// </summary>        [iOSVersion(2)]        [Export("count")]        public int Count { get; private set; }                /// <summary>        /// A new array containing the dictionary’s keys, or an empty array if the dictionary has no entries (read-only)        /// </summary>        [iOSVersion(2)]        [Export("allKeys")]        public AnyObject[] AllKeys { get; private set; }                /// <summary>        /// A new array containing the dictionary’s values, or an empty array if the dictionary has no entries (read-only)        /// </summary>        [iOSVersion(2)]        [Export("allValues")]        public AnyObject[] AllValues { get; private set; }                /// <summary>        /// A string that represents the contents of the dictionary, formatted as a property list (read-only)        /// </summary>        [iOSVersion(2)]        [Export("description")]        public string Description { get; private set; }                /// <summary>        /// A string that represents the contents of the dictionary, formatted in .strings file format (read-only)        /// </summary>        [iOSVersion(2)]        [Export("descriptionInStringsFileFormat")]        public string DescriptionInStringsFileFormat { get; private set; }    }}