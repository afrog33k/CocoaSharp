using ObjectiveC;using System;using SwiftSharp.Attributes;using System.Collections.Generic;namespace Foundation{    /// <summary>    /// The NSMutableDictionary class declares the programmatic interface to objects that manage mutable associations of keys and values. It adds modification operations to the basic operations it inherits from NSDictionary. NSMutableDictionary is “toll-free bridged” with its Core Foundation counterpart, CFMutableDictionaryRef. See Toll-Free Bridging for more information.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSMutableDictionary_Class/index.html#//apple_ref/occ/cl/NSMutableDictionary"/>    [iOSVersion(2)]    public class NSMutableDictionary : NSDictionary//, AnyObject, DictionaryLiteralConvertible, NSCoding, NSCopying, NSFastEnumeration, NSMutableCopying, NSObjectProtocol, NSSecureCoding, Reflectable, Sequence    {        /// <summary>        /// Initializes a newly allocated mutable dictionary, allocating enough memory to hold numItems entries.        /// </summary>        /// <param name="capacity">The initial capacity of the initialized dictionary.</param>        [iOSVersion(2)]        public NSMutableDictionary(int capacity) { }                /// <summary>        /// Initializes a newly allocated mutable dictionary.        /// </summary>        [iOSVersion(7)]        public NSMutableDictionary() { }                /// <summary>        /// Creates a mutable dictionary which is optimized for dealing with a known set of keys.        /// </summary>        /// <param name="sharedKeySet">The keyset, created by the NSDictionary class method sharedKeySetForKeys:.         ///     Important        ///     If keyset is nil, an exception is raised. If keyset is not an object returned by sharedKeySetForKeys:, an exception is raised.</param>        [iOSVersion(6)]        public NSMutableDictionary(AnyObject sharedKeySet) { }                /// <summary>        /// Adds a given key-value pair to the dictionary.        /// </summary>        /// <param name="anObject">The value for aKey. A strong reference to the object is maintained by the dictionary.        ///     Important        ///     Raises an NSInvalidArgumentException if anObject is nil. If you need to represent a nil value in the dictionary, use NSNull.</param>        /// <param name="forKey">The key for value. The key is copied (using copyWithZone:; keys must conform to the NSCopying protocol). If aKey already exists in the dictionary, anObject takes its place.        ///     Important        ///     Raises an NSInvalidArgumentException if aKey is nil.</param>        [iOSVersion(2)]        [Export("setObject")]        public void SetObject(AnyObject anObject, NSCopying forKey) {  }                /// <summary>        /// Adds a given key-value pair to the dictionary.        /// </summary>        /// <param name="@object">The value for aKey. A strong reference to the object is maintained by the dictionary.        ///     Important        ///     Raises an NSInvalidArgumentException if anObject is nil. If you need to represent a nil value in the dictionary, use NSNull.</param>        /// <param name="forKeyedSubscript">The key for value. The key is copied (using copyWithZone:; keys must conform to the NSCopying protocol). If aKey already exists in the dictionary, anObject takes its place.        ///     Important        ///     Raises an NSInvalidArgumentException if aKey is nil.</param>        /// <param name="NAME_YOUR_PARAMS">DO NOT USE THIS PARAMETER - Instead make sure to name the parameters you're using.</param>        [iOSVersion(6)]        [Export("setObject")]        [IgnoreParameters("NAME_YOUR_PARAMS")]        public void SetObject(AnyObject @object, NSCopying forKeyedSubscript, bool NAME_YOUR_PARAMS = false) {  }                /// <summary>        /// Adds a given key-value pair to the dictionary.        /// </summary>        /// <param name="value">The value for key.</param>        /// <param name="forKey">The key for value. Note that when using key-value coding, the key must be a string (see Key-Value Coding Fundamentals).</param>        [iOSVersion(2)]        [Export("setValue")]        public void SetValue(AnyObject value, string forKey) {  }                /// <summary>        /// Adds to the receiving dictionary the entries from another dictionary.        /// </summary>        /// <param name="otherDictionary">The dictionary from which to add entries</param>        [iOSVersion(2)]        [Export("addEntriesFromDictionary")]        public void AddEntriesFromDictionary(Dictionary<NSObject, AnyObject> otherDictionary) {  }                /// <summary>        /// Sets the contents of the receiving dictionary to entries in a given dictionary.        /// </summary>        /// <param name="otherDictionary">A dictionary containing the new entries.</param>        [iOSVersion(2)]        [Export("setDictionary")]        public void SetDictionary(Dictionary<NSObject, AnyObject> otherDictionary) {  }                /// <summary>        /// Removes a given key and its associated value from the dictionary.        /// </summary>        /// <param name="aKey">The key to remove.        ///     Important        ///     Raises an NSInvalidArgumentException if aKey is nil.</param>        [iOSVersion(2)]        [Export("removeObjectForKey")]        public void RemoveObjectForKey(AnyObject aKey) {  }                /// <summary>        /// Empties the dictionary of its entries.        /// </summary>        [iOSVersion(2)]        [Export("removeAllObjects")]        public void RemoveAllObjects() {  }                /// <summary>        /// Removes from the dictionary entries specified by elements in a given array.        /// </summary>        /// <param name="keyArray">An array of objects specifying the keys to remove.</param>        [iOSVersion(2)]        [Export("removeObjectsForKeys")]        public void RemoveObjectsForKeys(AnyObject[] keyArray) {  }    }}