using ObjectiveC;using System;using SwiftSharp.Attributes;using System.Collections.Generic;namespace Foundation{	/// <summary>	/// The NSPredicate class is used to define logical conditions used to constrain a search either for a fetch or for in-memory filtering.	/// </summary>	/// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSPredicate_Class/index.html#//apple_ref/occ/cl/NSPredicate"/>	[iOSVersion(3)]	public class NSPredicate : NSObject//, AnyObject, NSCoding, NSCopying, NSObjectProtocol, NSSecureCoding	{		/// <summary>		/// Creates and returns a new predicate by substituting the values in a given array into a format string and parsing the result.		/// </summary>		/// <param name="format">The format string for the new predicate.</param>		/// <param name="argumentArray">The arguments to substitute into predicateFormat. Values are substituted into predicateFormat in the order they appear in the array.</param>		[iOSVersion(3)]		public NSPredicate(string format, AnyObject[] argumentArray) { }				/// <summary>		/// Creates and returns a new predicate by substituting the values in an argument list into a format string and parsing the result.		/// </summary>		/// <param name="format">The format string for the new predicate.</param>		/// <param name="arguments">The arguments to substitute into predicateFormat. Values are substituted into predicateFormat in the order they appear in the argument list.</param>		[iOSVersion(3)]		public NSPredicate(string format, CVaListPointer arguments) { }				/// <summary>		/// Returns a copy of the receiver with the receiver’s variables substituted by values specified in a given substitution variables dictionary.		/// </summary>		/// <param name="variables">The substitution variables dictionary. The dictionary must contain key-value pairs for all variables in the receiver.</param>		[iOSVersion(3)]		[Export("predicateWithSubstitutionVariables")]		public Self PredicateWithSubstitutionVariables(Dictionary<NSObject, AnyObject> variables) { return default(Self); }				/// <summary>		/// Creates and returns a predicate that always evaluates to a given value.		/// </summary>		/// <param name="value">The value to which the new predicate should evaluate.</param>		[iOSVersion(3)]		public NSPredicate(bool value) { }				/// <summary>		/// Creates and returns a predicate that evaluates using a specified block object and bindings dictionary.		/// </summary>		/// <param name="block">The block is applied to the object to be evaluated.		///   The block takes two arguments:		///       evaluatedObject		///   The object to be evaluated.		///       bindings		///   The substitution variables dictionary. The dictionary must contain key-value pairs for all variables in the receiver.		///   The block returns true if the evaluatedObject evaluates to true, otherwise false.</param>		[iOSVersion(4)]		public NSPredicate(Func<AnyObject, Dictionary<NSObject, AnyObject>, bool> block) { }				/// <summary>		/// Returns a Boolean value that indicates whether a given object matches the conditions specified by the receiver.		/// </summary>		/// <param name="@object">The object against which to evaluate the receiver.</param>		[iOSVersion(3)]		[Export("evaluateWithObject")]		public bool EvaluateWithObject(AnyObject @object) { return default(bool); }				/// <summary>		/// Returns a Boolean value that indicates whether a given object matches the conditions specified by the receiver after substituting in the values in a given variables dictionary.		/// </summary>		/// <param name="@object">The object against which to evaluate the receiver.</param>		/// <param name="substitutionVariables">The substitution variables dictionary. The dictionary must contain key-value pairs for all variables in the receiver.</param>		[iOSVersion(3)]		[Export("evaluateWithObject")]		public bool EvaluateWithObject(AnyObject @object, Dictionary<NSObject, AnyObject> substitutionVariables) { return default(bool); }				/// <summary>		/// Force a predicate that was securely decoded to allow evaluation.		/// </summary>		[iOSVersion(7)]		[Export("allowEvaluation")]		public void AllowEvaluation() {  }				/// <summary>		/// The receiver’s format string. (read-only)		/// </summary>		[iOSVersion(3)]		[Export("predicateFormat")]		public string PredicateFormat { get; private set; }	}}