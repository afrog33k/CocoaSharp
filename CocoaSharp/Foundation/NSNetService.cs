using ObjectiveC;using System;using SharpSwift.Attributes;using System.Collections.Generic;namespace Foundation{    /// <summary>    /// The NSNetService class represents a network service, either one your application publishes or is a client of. This class and the NSNetServiceBrowser class use multicast DNS to convey information about network services to and from your application. The API of NSNetService provides a convenient way to publish the services offered by your application and to resolve the socket address for a service.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSNetService_Class/index.html#//apple_ref/occ/cl/NSNetService"/>    [iOSVersion(2)]    [Export("")]    public class NSNetService : NSObject//, AnyObject, CVarArgType, Equatable, Hashable, NSObjectProtocol, Printable    {        public NSNetService() { }        /// <summary>        /// Returns an NSData object representing a TXT record formed from a given dictionary.        /// </summary>        /// <param name="txtDictionary">A dictionary containing a TXT record.</param>        [iOSVersion(2)]        [Export("dataFromTXTRecordDictionary")]        public static NSData DataFromTXTRecordDictionary(Dictionary<NSObject, AnyObject> txtDictionary) { return default(NSData); }                /// <summary>        /// Returns a dictionary representing a TXT record given as an NSData object.        /// </summary>        /// <param name="txtData">A data object encoding a TXT record.</param>        [iOSVersion(2)]        [Export("dictionaryFromTXTRecordData")]        public static Dictionary<NSObject, AnyObject> DictionaryFromTXTRecordData(NSData txtData) { return default(Dictionary<NSObject, AnyObject>); }                /// <summary>        /// Creates a pair of input and output streams for the receiver and returns a Boolean value that indicates whether they were retrieved successfully.        /// </summary>        /// <param name="inputStream">Upon return, the input stream for the receiver. Pass NULL if you do not need this stream.</param>        /// <param name="outputStream">Upon return, the output stream for the receiver. Pass NULL if you do not need this stream.</param>        [iOSVersion(2)]        [Export("getInputStream")]        public virtual bool GetInputStream(UnsafeMutablePointer<NSInputStream> inputStream, UnsafeMutablePointer<NSOutputStream> outputStream) { return default(bool); }                /// <summary>        /// Returns the TXT record for the receiver.        /// </summary>        [iOSVersion(2)]        [return:Unwrapped]        public virtual NSData TXTRecordData() { return default(NSData); }                /// <summary>        /// Sets the TXT record for the receiver, and returns a Boolean value that indicates whether the operation was successful.        /// </summary>        /// <param name="recordData">The TXT record for the receiver.</param>        [iOSVersion(2)]        [Export("setTXTRecordData")]        public virtual bool SetTXTRecordData([Unwrapped] NSData recordData) { return default(bool); }                /// <summary>        /// Adds the service to the specified run loop.        /// </summary>        /// <param name="aRunLoop">The run loop to which to add the receiver.</param>        /// <param name="forMode">The run loop mode to which to add the receiver. Possible values for mode are discussed in the &quot;Constants&quot; section of NSRunLoop.</param>        [iOSVersion(2)]        [Export("scheduleInRunLoop")]        public virtual void ScheduleInRunLoop(NSRunLoop aRunLoop, string forMode) {  }                /// <summary>        /// Removes the service from the given run loop for a given mode.        /// </summary>        /// <param name="aRunLoop">The run loop from which to remove the receiver.</param>        /// <param name="forMode">The run loop mode from which to remove the receiver. Possible values for mode are discussed in the &quot;Constants&quot; section of NSRunLoop.</param>        [iOSVersion(2)]        [Export("removeFromRunLoop")]        public virtual void RemoveFromRunLoop(NSRunLoop aRunLoop, string forMode) {  }                /// <summary>        /// Attempts to advertise the receiver’s on the network.        /// </summary>        [iOSVersion(2)]        [Export("publish")]        public virtual void Publish() {  }                /// <summary>        /// Attempts to advertise the receiver on the network, with the given options.        /// </summary>        /// <param name="serviceOptions">Options for the receiver. The supported options are described in NSNetServiceOptions.</param>        [iOSVersion(2)]        [Export("publishWithOptions")]        public virtual void PublishWithOptions(NSNetServiceOptions serviceOptions) {  }                /// <summary>        /// Starts a resolve process of a finite duration for the service.        /// </summary>        /// <param name="timeout">The maximum number of seconds to attempt a resolve. A value of 0.0 indicates no timeout and a resolve process of indefinite duration.</param>        [iOSVersion(2)]        [Export("resolveWithTimeout")]        public virtual void ResolveWithTimeout(NSTimeInterval timeout) {  }                /// <summary>        /// Starts the monitoring of TXT-record updates for the receiver.        /// </summary>        [iOSVersion(2)]        [Export("startMonitoring")]        public virtual void StartMonitoring() {  }                /// <summary>        /// Halts a currently running attempt to publish or resolve a service.        /// </summary>        [iOSVersion(2)]        [Export("stop")]        public virtual void Stop() {  }                /// <summary>        /// Stops the monitoring of TXT-record updates for the receiver.        /// </summary>        [iOSVersion(2)]        [Export("stopMonitoring")]        public virtual void StopMonitoring() {  }                /// <summary>        /// A read-only array containing NSData objects, each of which contains a socket address for the service. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("addresses")]        public AnyObject[] Addresses { get; private set; }                /// <summary>        /// A string containing the domain for this service. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("domain")]        [Unwrapped]        public string Domain { get; private set; }                /// <summary>        /// A string containing the name of this service. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("name")]        public string Name { get; private set; }                /// <summary>        /// The type of the published service. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("type")]        public string Type { get; private set; }                /// <summary>        /// The delegate for the receiver.        /// </summary>        [iOSVersion(2)]        [Export("delegate")]        [Optional]        public NSNetServiceDelegate Delegate { get; set; }                /// <summary>        /// The port on which the service is listening for connections. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("port")]        public int Port { get; private set; }                /// <summary>        /// A string containing the DNS hostname for this service. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("hostName")]        [Optional]        public string HostName { get; private set; }    }    /// <summary>    /// These constants specify options for a network service.    /// </summary>    public enum NSNetServiceOptions    {        /// <summary>        /// Specifies that the network service should not rename itself in the event of a name collision.        /// </summary>        [iOSVersion(2)]        NoAutoRename,        /// <summary>        /// Specifies that a TCP listener should be started for both IPv4 and IPv6 on the port specified by this service. If the listening port can&#39;t be opened, the service calls its delegate’s netService:didNotPublish: method to report the error.        /// The listener supports only TCP connections. If the service’s type does not end with _tcp, publication fails with NSNetServicesBadArgumentError.        /// Whenever a client connects to the listening socket, the service calls its delegate’s netService:didAcceptConnectionWithInputStream:outputStream: method with a pair of NSStream objects.        /// </summary>        [iOSVersion(7)]        ListenForConnections,    }    /// <summary>    /// These constants identify errors that can occur when accessing net services.    /// </summary>    public enum NSNetServicesError    {        /// <summary>        /// An unknown error occurred.        /// </summary>        [iOSVersion(2)]        UnknownError,        /// <summary>        /// The service could not be published because the name is already in use. The name could be in use locally or on another system.        /// </summary>        [iOSVersion(2)]        CollisionError,        /// <summary>        /// The service could not be found on the network.        /// </summary>        [iOSVersion(2)]        NotFoundError,        /// <summary>        /// The net service cannot process the request at this time. No additional information about the network state is known.        /// </summary>        [iOSVersion(2)]        ActivityInProgress,        /// <summary>        /// An invalid argument was used when creating the NSNetService object.        /// </summary>        [iOSVersion(2)]        BadArgumentError,        /// <summary>        /// The client canceled the action.        /// </summary>        [iOSVersion(2)]        CancelledError,        /// <summary>        /// The net service was improperly configured.        /// </summary>        [iOSVersion(2)]        InvalidError,        /// <summary>        /// The net service has timed out.        /// </summary>        [iOSVersion(2)]        TimeoutError,    }}