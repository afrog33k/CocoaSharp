using ObjectiveC;using System;using SwiftSharp.Attributes;namespace Foundation{	//https://developer.apple.com/library/prerelease/ios/documentation/Foundation/Reference/NSURLSessionConfiguration_class/index.html#//apple_ref/occ/cl/NSURLSessionConfiguration	/// <summary>	/// An NSURLSessionConfiguration object defines the behavior and policies to use when uploading and downloading data using an NSURLSession object. When uploading or downloading data, creating a configuration object is always the first step you must take. You use this object to configure the timeout values, caching policies, connection requirements, and other types of information that you intend to use with your NSURLSession object.	/// </summary>	[iOSVersion(7)]	public class NSURLSessionConfiguration : NSObject	{		/// <summary>		/// Returns a newly created default session configuration object.		/// </summary>		/// <returns>A new configuration object for managing upload and download tasks using the default options.</returns>		[iOSVersion(7)]		[Export("defaultSessionConfiguration")]		public static NSURLSessionConfiguration DefaultSessionConfiguration() { return null; }				/// <summary>		/// Returns a session configuration that uses no persistent storage for caches, cookies, or credentials.		/// </summary>		/// <returns>A configuration object optimized for transferring data to and from your appâ€™s memory.</returns>		[iOSVersion(7)]		[Export("ephemeralSessionConfiguration")]		public static NSURLSessionConfiguration EphemeralSessionConfiguration() { return null; }				/// <summary>		/// Returns a session configuration object that allows HTTP and HTTPS uploads or downloads to be performed in the background.		/// </summary>		/// <param name="identifier">The unique identifier for the configuration object. This parameter must not be nil or an empty string.</param>		/// <returns>A configuration object that causes upload and download tasks to be performed by the system in a separate process.</returns>		[iOSVersion(8)]		[Export("backgroundSessionConfigurationWithIdentifier")]		public static NSURLSessionConfiguration BackgroundSessionConfigurationWithIdentifier(string identifier) { return null; }				/// <summary>		/// The background session identifier of the configuration object. (read-only)		/// </summary>		[iOSVersion(7)]		[Export("identifier")]		public string Identifier { get; private set; }				/// <summary>		/// A dictionary of additional headers to send with requests.		/// </summary>		[iOSVersion(7)]		[Export("HTTPAdditionalHeaders")]		public NSDictionary HTTPAdditionalHeaders { get; set; }				/// <summary>		/// The type of network service.		/// </summary>		[iOSVersion(7)]		[Export("networkServiceType")]		public NSURLRequestNetworkServiceType NetworkServiceType { get; set; }				/// <summary>		/// A Boolean value that determines whether connections should be made over a cellular network.		/// </summary>		[iOSVersion(7)]		[Export("allowsCellularAccess")]		public bool AllowsCellularAccess { get; set; }				/// <summary>		/// The timeout interval to use when waiting for additional data.		/// </summary>		[iOSVersion(7)]		[Export("timeoutintervalForRequest")]		public NSTimeinterval TimeoutintervalForRequest { get; set; }				/// <summary>		/// The maximum amount of time that a resource request should be allowed to take.		/// </summary>		[iOSVersion(7)]		[Export("timeoutintervalForResource")]		public NSTimeinterval TimeoutintervalForResource { get; set; }				/// <summary>		/// A policy constant that determines when cookies should be accepted.		/// </summary>		[iOSVersion(7)]		[Export("HTTPCookieAcceptPolicy")]		public NSHTTPCookieAcceptPolicy HTTPCookieAcceptPolicy { get; set; }				/// <summary>		/// The cookie store for storing cookies within this session.		/// </summary>		[iOSVersion(7)]		[Export("HTTPCookieStorage")]		public NSHTTPCookieStorage HTTPCookieStorage { get; set; }				/// <summary>		/// A Boolean value that determines whether requests should contain cookies from the cookie store.		/// </summary>		[iOSVersion(7)]		[Export("HTTPShouldSetCookies")]		public bool HTTPShouldSetCookies { get; set; }				/// <summary>		/// The maximum TLS protocol version that the client should request when making connections in this session.		/// </summary>		[iOSVersion(7)]		[Export("TLSMaximumSupportedProtocol")]		public SSLProtocol TLSMaximumSupportedProtocol { get; set; }				/// <summary>		/// The minimum TLS protocol that should be accepted during protocol negotiation.		/// </summary>		[iOSVersion(7)]		[Export("TLSMinimumSupportedProtocol")]		public SSLProtocol TLSMinimumSupportedProtocol { get; set; }				/// <summary>		/// A credential store that provides credentials for authentication.		/// </summary>		[iOSVersion(7)]		[Export("URLCredentialStorage")]		public NSURLCredentialStorage URLCredentialStorage { get; set; }				/// <summary>		/// The URL cache for providing cached responses to requests within the session.		/// </summary>		[iOSVersion(7)]		[Export("URLCache")]		public NSURLCache URLCache { get; set; }				/// <summary>		/// A predefined constant that determines when to return a response from the cache.		/// </summary>		[iOSVersion(7)]		[Export("requestCachePolicy")]		public NSURLRequestCachePolicy RequestCachePolicy { get; set; }				/// <summary>		/// A Boolean value that indicates whether the app should be resumed or launched in the background when transfers finish.		/// </summary>		[iOSVersion(7)]		[Export("sessionSendsLaunchEvents")]		public bool SessionSendsLaunchEvents { get; set; }				/// <summary>		/// A Boolean value that determines whether background tasks can be scheduled at the discretion of the system for optimal performance.		/// </summary>		[iOSVersion(7)]		[Export("discretionary")]		public bool Discretionary { get; set; }				/// <summary>		/// An array of extra protocol subclasses that handle requests in a session.		/// </summary>		[iOSVersion(7)]		[Export("protocolClasses")]		public AnyObject[] ProtocolClasses { get; set; }				/// <summary>		/// The maximum number of simultaneous connections to make to a given host.		/// </summary>		[iOSVersion(7)]		[Export("HTTPMaximumConnectionsPerHost")]		public int HTTPMaximumConnectionsPerHost { get; set; }				/// <summary>		/// A Boolean value that determines whether the session should use HTTP pipelining.		/// </summary>		[iOSVersion(7)]		[Export("HTTPShouldUsePipelining")]		public bool HTTPShouldUsePipelining { get; set; }				/// <summary>		/// A dictionary containing information about the proxy to use within this session.		/// </summary>		[iOSVersion(7)]		[Export("connectionProxyDictionary")]		public NSDictionary ConnectionProxyDictionary { get; set; }	}}