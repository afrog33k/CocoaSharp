using ObjectiveC;using System;using SharpSwift.Attributes;using System.Collections.Generic;namespace Foundation{    /// <summary>    /// NSMutableURLRequest is a subclass of NSURLRequest provided to aid developers who may find it more convenient to mutate a single request object for a series of URL load requests instead of creating an immutable NSURLRequest object for each load.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSMutableURLRequest_Class/index.html#//apple_ref/occ/cl/NSMutableURLRequest"/>    [iOSVersion(2)]    [Export("")]    public class NSMutableURLRequest : NSURLRequest//, AnyObject, CVarArgType, Equatable, Hashable, NSCoding, NSCopying, NSMutableCopying, NSObjectProtocol, NSSecureCoding, Printable    {        public NSMutableURLRequest() { }        /// <summary>        /// Adds an HTTP header to the receiver’s HTTP header dictionary.        /// </summary>        /// <param name="value">The value for the header field.</param>        /// <param name="forHTTPHeaderField">The name of the header field. In keeping with the HTTP RFC, HTTP header field names are case-insensitive.</param>        [iOSVersion(2)]        [Export("addValue")]        public virtual void AddValue([Optional] string value, string forHTTPHeaderField) {  }                /// <summary>        /// Sets the specified HTTP header field.        /// </summary>        /// <param name="value">The new value for the header field. Any existing value for the field is replaced by the new value.</param>        /// <param name="forHTTPHeaderField">The name of the header field to set. In keeping with the HTTP RFC, HTTP header field names are case-insensitive.</param>        [iOSVersion(2)]        [Export("setValue")]        public virtual void SetValue([Optional] string value, string forHTTPHeaderField) {  }                /// <summary>        /// The cache policy of the receiver.        /// </summary>        [iOSVersion(8)]        [Export("cachePolicy")]        public NSURLRequestCachePolicy CachePolicy { get; set; }                /// <summary>        /// The main document URL for the receiver.        /// </summary>        [iOSVersion(8)]        [Export("mainDocumentURL")]        [Optional]        public NSURL MainDocumentURL { get; set; }                /// <summary>        /// The network service type of the connection.        /// </summary>        [iOSVersion(4)]        [Export("networkServiceType")]        public NSURLRequestNetworkServiceType NetworkServiceType { get; set; }                /// <summary>        /// The receiver’s timeout interval, in seconds.        /// </summary>        [iOSVersion(8)]        [Export("timeoutInterval")]        public NSTimeInterval TimeoutInterval { get; set; }                /// <summary>        /// The URL of the receiver        /// </summary>        [iOSVersion(8)]        [Optional]        public NSURL URL { get; set; }                /// <summary>        /// A boolean value that indicates whether the connection can use the device’s cellular radio (if present).        /// </summary>        [iOSVersion(6)]        [Export("allowsCellularAccess")]        public bool AllowsCellularAccess { get; set; }                /// <summary>        /// The receiver&#39;s header fields.        /// </summary>        [iOSVersion(8)]        [Export("allHTTPHeaderFields")]        public Dictionary<NSObject, AnyObject> AllHTTPHeaderFields { get; set; }                /// <summary>        /// The request body of the receiver.        /// </summary>        [iOSVersion(8)]        [Optional]        public NSData HTTPBody { get; set; }                /// <summary>        /// The request body as an input stream.        /// </summary>        [iOSVersion(8)]        [Optional]        public NSInputStream HTTPBodyStream { get; set; }                /// <summary>        /// The receiver’s HTTP request method.        /// </summary>        [iOSVersion(8)]        public string HTTPMethod { get; set; }                /// <summary>        /// A boolean value that indicates whether the receiver should use the default cookie handling for the request.        /// </summary>        [iOSVersion(8)]        public bool HTTPShouldHandleCookies { get; set; }                /// <summary>        /// A boolean value that indicates whether the request can continue transmitting data before receiving a response from an earlier transmission.        /// </summary>        [iOSVersion(4)]        public bool HTTPShouldUsePipelining { get; set; }    }}