using ObjectiveC;using System;using SwiftSharp.Attributes;namespace Foundation{	//https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSMutableURLRequest_Class/index.html#//apple_ref/occ/cl/NSMutableURLRequest	/// <summary>	/// NSMutableURLRequest is a subclass of NSURLRequest provided to aid developers who may find it more convenient to mutate a single request object for a series of URL load requests instead of creating an immutable NSURLRequest object for each load.	/// </summary>	[iOSVersion(2)]	public class NSMutableURLRequest : NSURLRequest	{		/// <summary>		/// Sets the cache policy of the receiver.		/// </summary>		/// <param name="policy">The new cache policy.</param>		[iOSVersion(2)]		[Export("cachePolicy")]		public NSURLRequestCachePolicy CachePolicy { get; set; }				/// <summary>		/// Sets the main document URL for the receiver.		/// </summary>		/// <param name="theURL">The new main document URL. Can be nil.</param>		[iOSVersion(2)]		[Export("mainDocumentURL")]		public NSURL MainDocumentURL { get; set; }				/// <summary>		/// Sets the network service type of the connection.		/// </summary>		/// <param name="networkServiceType">The network service type.</param>		[iOSVersion(4)]		[Export("networkServiceType")]		public NSURLRequestNetworkServiceType NetworkServiceType { get; set; }				/// <summary>		/// Sets the receiver’s timeout interval, in seconds.		/// </summary>		/// <param name="timeoutinterval">The timeout interval, in seconds. If during a connection attempt the request remains idle for longer than the timeout interval, the request is considered to have timed out. The default timeout interval is 60 seconds.       Note     	In iOS versions prior to iOS 6, the minimum (and default) timeout interval for any request containing a request body was 240 seconds.   	       As a general rule, you should not use short timeout intervals, and instead, should provide an easy way for the user to cancel a long-running operation. For more information, read Designing for Real-World Networks.</param>		[iOSVersion(2)]		[Export("timeoutinterval")]		public NSTimeinterval Timeoutinterval { get; set; }				/// <summary>		/// Sets whether the connection can use the device’s cellular radio (if present).		/// </summary>		/// <param name="allow">true if the device’s cellular radio can be used; false otherwise;</param>		[iOSVersion(6)]		[Export("allowsCellularAccess")]		public bool AllowsCellularAccess { get; set; }				/// <summary>		/// Adds an HTTP header to the receiver’s HTTP header dictionary.		/// </summary>		/// <param name="value">The value for the header field.</param>		/// <param name="forHTTPHeaderField">The name of the header field. In keeping with the HTTP RFC, HTTP header field names are case-insensitive.</param>		[iOSVersion(2)]		[Export("addValue")]		public void AddValue(string value, string forHTTPHeaderField) { }				/// <summary>		/// Replaces the receiver's header fields with the passed values.		/// </summary>		/// <param name="headerFields">A dictionary with the new header fields. HTTP header fields must be string values; therefore, each object and key in the headerFields dictionary must be a subclass of NSString. If either the key or value for a key-value pair is not a subclass of NSString, the key-value pair is skipped.</param>		[iOSVersion(2)]		[Export("allHTTPHeaderFields")]		public NSDictionary AllHTTPHeaderFields { get; set; }				/// <summary>		/// Sets the specified HTTP header field.		/// </summary>		/// <param name="value">The new value for the header field. Any existing value for the field is replaced by the new value.</param>		/// <param name="forHTTPHeaderField">The name of the header field to set. In keeping with the HTTP RFC, HTTP header field names are case-insensitive.</param>		[iOSVersion(2)]		[Export("setValue")]		public void SetValue(string value, string forHTTPHeaderField) { }	}}