using ObjectiveC;using System;using SwiftSharp.Attributes;namespace Foundation{	//https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSException_Class/index.html#//apple_ref/occ/cl/NSException	/// <summary>	/// NSException is used to implement exception handling and contains information about an exception. An exception is a special condition that interrupts the normal flow of program execution. Each application can interrupt the program for different reasons. For example, one application might interpret saving a file in a directory that is write-protected as an exception. In this sense, the exception is equivalent to an error. Another application might interpret the user’s key-press (for example, Control-C) as an exception: an indication that a long-running process should be aborted.	/// </summary>	[iOSVersion(2)]	public class NSException : NSObject	{		/// <summary>		/// Creates and raises an exception with the specified name, reason, and arguments.		/// </summary>		/// <param name="name">The name of the exception.</param>		/// <param name="format">A human-readable message string (that is, the exception reason) with conversion specifications for the variable arguments in argList.</param>		/// <param name="arguments">Variable information to be inserted into the formatted exception reason (in the manner of vprintf).</param>		[iOSVersion(2)]		[Export("raise")]		public static void Raise(string name, string format, CVaListPointer arguments) { }				/// <summary>		/// Initializes and returns a newly allocated exception object.		/// </summary>		/// <param name="name">The name of the exception.</param>		/// <param name="reason">A human-readable message string summarizing the reason for the exception.</param>		/// <param name="userInfo">A dictionary containing user-defined information relating to the exception</param>		/// <returns>The created NSException object or nil if the object couldn't be created.</returns>		[iOSVersion(2)]		public NSException(string name, string reason, NSDictionary userInfo) { }				/// <summary>		/// Raises the receiver, causing program flow to jump to the local exception handler.		/// </summary>		[iOSVersion(2)]		[Export("raise")]		public void Raise() { }				/// <summary>		/// Returns an NSString object used to uniquely identify the receiver.		/// </summary>		[iOSVersion(2)]		[Export("name")]		public string Name { get; private set; }				/// <summary>		/// Returns an NSString object containing a “human-readable” reason for the receiver.		/// </summary>		[iOSVersion(2)]		[Export("reason")]		public string Reason { get; private set; }				/// <summary>		/// Returns an NSDictionary object containing application-specific data pertaining to the receiver.		/// </summary>		[iOSVersion(2)]		[Export("userInfo")]		public NSDictionary UserInfo { get; private set; }				/// <summary>		/// Returns the call return addresses related to a raised exception.		/// </summary>		/// <returns>An array of NSNumber objects encapsulating NSUinteger values. Each value is a call frame return address. The array of stack frames starts at the point at which the exception was first raised, with the first items being the most recent stack frames.</returns>		[iOSVersion(2)]		[Export("callStackReturnAddresses")]		public AnyObject[] CallStackReturnAddresses { get; private set; }				/// <summary>		/// Returns an array containing the current call symbols.		/// </summary>		/// <returns>An array containing the current call stack symbols.</returns>		[iOSVersion(4)]		[Export("callStackSymbols")]		public AnyObject[] CallStackSymbols { get; private set; }	}}