using ObjectiveC;using System;using SwiftSharp.Attributes;namespace Foundation{	//https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSUserDefaults_Class/index.html#//apple_ref/occ/cl/NSUserDefaults	/// <summary>	/// The NSUserDefaults class provides a programmatic interface for interacting with the defaults system. The defaults system allows an application to customize its behavior to match a user’s preferences. For example, you can allow users to determine what units of measurement your application displays or how often documents are automatically saved. Applications record such preferences by assigning values to a set of parameters in a user’s defaults database. The parameters are referred to as defaults since they’re commonly used to determine an application’s default state at startup or the way it acts by default.	/// </summary>	[iOSVersion(2)]	public class NSUserDefaults : NSObject	{		/// <summary>		/// Returns the shared defaults object.		/// </summary>		/// <returns>The shared defaults object.</returns>		[iOSVersion(2)]		[Export("standardUserDefaults")]		public static NSUserDefaults StandardUserDefaults() { return null; }				/// <summary>		/// Synchronizes any changes made to the shared user defaults object and releases it from memory.		/// </summary>		[iOSVersion(2)]		[Export("resetStandardUserDefaults")]		public static void ResetStandardUserDefaults() { }				/// <summary>		/// Returns an NSUserDefaults object initialized with the defaults for the current user account.		/// </summary>		/// <returns>An initialized NSUserDefaults object whose argument and registration domains are already set up.</returns>		[iOSVersion(2)]		public NSUserDefaults() { }				/// <summary>		/// Returns an NSUserDefaults object initialized with the defaults for the specified user account.				 		  Deprecation Statement		  		 This method was never implemented to return anything but the defaults for the current user. Use standardUserDefaults instead.		/// </summary>		/// <param name="user">The name of the user account.</param>		/// <returns>An initialized NSUserDefaults object whose argument and registration domains are already set up. If the current user does not have access to the specified user account, this method returns nil.</returns>		[Obsolete]		[iOSVersion(2)]		public NSUserDefaults(string user) { }				/// <summary>		/// Adds the contents of the specified dictionary to the registration domain.		/// </summary>		/// <param name="dictionary">The dictionary of keys and values you want to register.</param>		[iOSVersion(2)]		[Export("registerDefaults")]		public void RegisterDefaults(NSDictionary dictionary) { }				/// <summary>		/// Returns the array associated with the specified key.		/// </summary>		/// <param name="defaultName">A key in the current user's defaults database.</param>		/// <returns>The array associated with the specified key, or nil if the key does not exist or its value is not an NSArray object.</returns>		[iOSVersion(2)]		[Export("arrayForKey")]		public AnyObject[] ArrayForKey(string defaultName) { return null; }				/// <summary>		/// Returns the Boolean value associated with the specified key.		/// </summary>		/// <param name="defaultName">A key in the current user's defaults database.</param>		/// <returns>If a boolean value is associated with defaultName in the user defaults, that value is returned. Otherwise, false is returned.</returns>		[iOSVersion(2)]		[Export("boolForKey")]		public bool BoolForKey(string defaultName) { return false; }				/// <summary>		/// Returns the data object associated with the specified key.		/// </summary>		/// <param name="defaultName">A key in the current user's defaults database.</param>		/// <returns>The data object associated with the specified key, or nil if the key does not exist or its value is not an NSData object.</returns>		[iOSVersion(2)]		[Export("dataForKey")]		public NSData DataForKey(string defaultName) { return null; }				/// <summary>		/// Returns the dictionary object associated with the specified key.		/// </summary>		/// <param name="defaultName">A key in the current user's defaults database.</param>		/// <returns>The dictionary object associated with the specified key, or nil if the key does not exist or its value is not an NSDictionary object.</returns>		[iOSVersion(2)]		[Export("dictionaryForKey")]		public NSDictionary DictionaryForKey(string defaultName) { return null; }				/// <summary>		/// Returns the floating-point value associated with the specified key.		/// </summary>		/// <param name="defaultName">A key in the current user's defaults database.</param>		/// <returns>The floating-point value associated with the specified key. If the key does not exist, this method returns 0.</returns>		[iOSVersion(2)]		[Export("floatForKey")]		public CFloat FloatForKey(string defaultName) { return null; }				/// <summary>		/// Returns the integer value associated with the specified key..		/// </summary>		/// <param name="defaultName">A key in the current user's defaults database.</param>		/// <returns>The integer value associated with the specified key. If the specified key does not exist, this method returns 0.</returns>		[iOSVersion(2)]		[Export("integerForKey")]		public int integerForKey(string defaultName) { return 0; }				/// <summary>		/// Returns the object associated with the first occurrence of the specified default.		/// </summary>		/// <param name="defaultName">A key in the current user's defaults database.</param>		/// <returns>The object associated with the specified key, or nil if the key was not found.</returns>		[iOSVersion(2)]		[Export("objectForKey")]		public AnyObject ObjectForKey(string defaultName) { return null; }				/// <summary>		/// Returns the array of strings associated with the specified key.		/// </summary>		/// <param name="defaultName">A key in the current user's defaults database.</param>		/// <returns>The array of NSString objects, or nil if the specified default does not exist, the default does not contain an array, or the array does not contain NSString objects.</returns>		[iOSVersion(2)]		[Export("stringArrayForKey")]		public AnyObject[] StringArrayForKey(string defaultName) { return null; }				/// <summary>		/// Returns the string associated with the specified key.		/// </summary>		/// <param name="defaultName">A key in the current user's defaults database.</param>		/// <returns>For string values, the string associated with the specified key. For number values, the string value of the number. Returns nil if the default does not exist or is not a string or number value.</returns>		[iOSVersion(2)]		[Export("stringForKey")]		public string StringForKey(string defaultName) { return ""; }				/// <summary>		/// Returns the double value associated with the specified key.		/// </summary>		/// <param name="defaultName">A key in the current user's defaults database.</param>		/// <returns>The double value associated with the specified key. If the key does not exist, this method returns 0.</returns>		[iOSVersion(2)]		[Export("doubleForKey")]		public CDouble DoubleForKey(string defaultName) { return null; }				/// <summary>		/// Returns the NSURL instance associated with the specified key.		/// </summary>		/// <param name="defaultName">A key in the current user's defaults database.</param>		/// <returns>The NSURL instance value associated with the specified key. If the key does not exist, this method returns nil.</returns>		[Export("URLForKey")]		public NSURL URLForKey(string defaultName) { return null; }				/// <summary>		/// Sets the value of the specified default key to the specified Boolean value.		/// </summary>		/// <param name="value">The Boolean value to store in the defaults database.</param>		/// <param name="forKey">The key with which to associate with the value.</param>		[iOSVersion(2)]		[Export("setBool")]		public void SetBool(bool value, string forKey) { }				/// <summary>		/// Sets the value of the specified default key to the specified floating-point value.		/// </summary>		/// <param name="value">The floating-point value to store in the defaults database.</param>		/// <param name="forKey">The key with which to associate with the value.</param>		[iOSVersion(2)]		[Export("setFloat")]		public void SetFloat(CFloat value, string forKey) { }				/// <summary>		/// Sets the value of the specified default key to the specified integer value.		/// </summary>		/// <param name="value">The integer value to store in the defaults database.</param>		/// <param name="forKey">The key with which to associate with the value.</param>		[iOSVersion(2)]		[Export("setinteger")]		public void Setinteger(int value, string forKey) { }				/// <summary>		/// Sets the value of the specified default key in the standard application domain.		/// </summary>		/// <param name="value">The object to store in the defaults database.</param>		/// <param name="forKey">The key with which to associate with the value.</param>		[iOSVersion(2)]		[Export("setObject")]		public void SetObject(AnyObject value, string forKey) { }				/// <summary>		/// Sets the value of the specified default key to the double value.		/// </summary>		/// <param name="value">The double value.</param>		/// <param name="forKey">The key with which to associate with the value.</param>		[iOSVersion(2)]		[Export("setDouble")]		public void SetDouble(CDouble value, string forKey) { }				/// <summary>		/// Sets the value of the specified default key to the specified URL.		/// </summary>		/// <param name="url">The NSURL to store in the defaults database.</param>		/// <param name="forKey">The key with which to associate with the value.</param>		[Export("setURL")]		public void SetURL(NSURL url, string forKey) { }				/// <summary>		/// Removes the value of the specified default key in the standard application domain.		/// </summary>		/// <param name="defaultName">The key whose value you want to remove.</param>		[iOSVersion(2)]		[Export("removeObjectForKey")]		public void RemoveObjectForKey(string defaultName) { }				/// <summary>		/// Writes any modifications to the persistent domains to disk and updates all unmodified persistent domains to what is on disk.		/// </summary>		/// <returns>true if the data was saved successfully to disk, otherwise false.</returns>		[iOSVersion(2)]		[Export("synchronize")]		public bool Synchronize() { return false; }				/// <summary>		/// Returns a dictionary containing the keys and values in the specified persistent domain.		/// </summary>		/// <param name="domainName">The domain whose keys and values you want.</param>		/// <returns>A dictionary containing the keys. The keys are names of defaults and the value corresponding to each key is a property list object (NSData, NSString, NSNumber, NSDate, NSArray, or NSDictionary).</returns>		[iOSVersion(2)]		[Export("persistentDomainForName")]		public NSDictionary PersistentDomainForName(string domainName) { return null; }				/// <summary>		/// Returns an array of the current persistent domain names.				 		  Deprecation Statement		  		 Instead of using this method, you should track the domains you add if you want to later retrieve them with persistentDomainForName:.		/// </summary>		/// <returns>An array of NSString objects containing the domain names.</returns>		[Obsolete]		[iOSVersion(2)]		[Export("persistentDomainNames")]		public AnyObject[] PersistentDomainNames() { return null; }				/// <summary>		/// Removes the contents of the specified persistent domain from the user’s defaults.		/// </summary>		/// <param name="domainName">The domain whose keys and values you want.</param>		[iOSVersion(2)]		[Export("removePersistentDomainForName")]		public void RemovePersistentDomainForName(string domainName) { }				/// <summary>		/// Sets the dictionary for the specified persistent domain.		/// </summary>		/// <param name="domain">The dictionary of keys and values you want to assign to the domain.</param>		/// <param name="forName">The domain whose keys and values you want to set. This value should be equal to your application's bundle identifier.</param>		[iOSVersion(2)]		[Export("setPersistentDomain")]		public void SetPersistentDomain(NSDictionary domain, string forName) { }				/// <summary>		/// Returns a Boolean value indicating whether the specified key is managed by an administrator.		/// </summary>		/// <param name="key">The key whose status you want to check.</param>		/// <returns>true if the value of the specified key is managed by an administrator, otherwise false.</returns>		[iOSVersion(2)]		[Export("objectIsForcedForKey")]		public bool ObjectIsForcedForKey(string key) { return false; }				/// <summary>		/// Returns a Boolean value indicating whether the key in the specified domain is managed by an administrator.		/// </summary>		/// <param name="key">The key whose status you want to check.</param>		/// <param name="inDomain">The domain of the key.</param>		/// <returns>true if the key is managed by an administrator in the specified domain, otherwise false.</returns>		[iOSVersion(2)]		[Export("objectIsForcedForKey")]		public bool ObjectIsForcedForKey(string key, string inDomain) { return false; }				/// <summary>		/// Returns a dictionary that contains a union of all key-value pairs in the domains in the search list.		/// </summary>		/// <returns>A dictionary containing the keys. The keys are names of defaults and the value corresponding to each key is a property list object (NSData, NSString, NSNumber, NSDate, NSArray, or NSDictionary).</returns>		[iOSVersion(2)]		[Export("dictionaryRepresentation")]		public NSDictionary DictionaryRepresentation() { return null; }				/// <summary>		/// Removes the specified volatile domain from the user’s defaults.		/// </summary>		/// <param name="domainName">The volatile domain you want to remove.</param>		[iOSVersion(2)]		[Export("removeVolatileDomainForName")]		public void RemoveVolatileDomainForName(string domainName) { }				/// <summary>		/// Sets the dictionary for the specified volatile domain.		/// </summary>		/// <param name="domain">The dictionary of keys and values you want to assign to the domain.</param>		/// <param name="forName">The domain whose keys and values you want to set.</param>		[iOSVersion(2)]		[Export("setVolatileDomain")]		public void SetVolatileDomain(NSDictionary domain, string forName) { }				/// <summary>		/// Returns the dictionary for the specified volatile domain.		/// </summary>		/// <param name="domainName">The domain whose keys and values you want.</param>		/// <returns>The dictionary of keys and values belonging to the domain. The keys in the dictionary are names of defaults, and the value corresponding to each key is a property list object (NSData, NSString, NSNumber, NSDate, NSArray, or NSDictionary).</returns>		[iOSVersion(2)]		[Export("volatileDomainForName")]		public NSDictionary VolatileDomainForName(string domainName) { return null; }				/// <summary>		/// Returns an array of the current volatile domain names.		/// </summary>		/// <returns>An array of NSString objects with the volatile domain names.</returns>		[iOSVersion(2)]		[Export("volatileDomainNames")]		public AnyObject[] VolatileDomainNames { get; private set; }				/// <summary>		/// Inserts the specified domain name into the receiver’s search list.		/// </summary>		/// <param name="suiteName">The domain name to insert. This domain is inserted after the application domain.</param>		[iOSVersion(2)]		[Export("addSuiteNamed")]		public void AddSuiteNamed(string suiteName) { }				/// <summary>		/// Removes the specified domain name from the receiver’s search list.		/// </summary>		/// <param name="suiteName">The domain name to remove.</param>		[iOSVersion(2)]		[Export("removeSuiteNamed")]		public void RemoveSuiteNamed(string suiteName) { }				/// <summary>		/// These constants specify various user defaults domains.		/// </summary>				/// <summary>		/// The domain consisting of defaults meant to be seen by all applications.		/// </summary>		[iOSVersion(2)]		public string NSGlobalDomain { get; private set; }				/// <summary>		/// The domain consisting of defaults parsed from the application’s arguments. These are one or more pairs of the form -default value included in the command-line invocation of the application.		/// </summary>		[iOSVersion(2)]		public string NSArgumentDomain { get; private set; }				/// <summary>		/// The domain consisting of a set of temporary defaults whose values can be set by the application to ensure that searches will always be successful.		/// </summary>		[iOSVersion(2)]		public string NSRegistrationDomain { get; private set; }								WHAT	}}