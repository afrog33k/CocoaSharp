using ObjectiveC;using System;using SharpSwift.Attributes;using System.Collections.Generic;namespace Foundation{    /// <summary>    /// The NSMetadataQuery class encapsulates the functionality provided by the MDQuery opaque type for querying the Spotlight metadata.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSMetadataQuery_Class/index.html#//apple_ref/occ/cl/NSMetadataQuery"/>    [iOSVersion(5)]    [Export("")]    public class NSMetadataQuery : NSObject//, AnyObject, CVarArgType, Equatable, Hashable, NSObjectProtocol, Printable    {        public NSMetadataQuery() { }        /// <summary>        /// Attempts to start the query.        /// </summary>        [iOSVersion(5)]        [Export("startQuery")]        public virtual bool StartQuery() { return default(bool); }                /// <summary>        /// Stops the receiver’s current query from gathering any further results.        /// </summary>        [iOSVersion(5)]        [Export("stopQuery")]        public virtual void StopQuery() {  }                /// <summary>        /// Returns the query result at a specific index.        /// </summary>        /// <param name="index">The index of the desired result in the query result array.</param>        [iOSVersion(5)]        [Export("resultAtIndex")]        public virtual AnyObject ResultAtIndex(int index) { return default(AnyObject); }                /// <summary>        /// Returns the index of a query result object in the receiver’s results array.        /// </summary>        /// <param name="result">The query result object being inquired about.</param>        [iOSVersion(5)]        [Export("indexOfResult")]        public virtual int IndexOfResult(AnyObject result) { return default(int); }                /// <summary>        /// Enumerates the current set of results using the given block.        /// </summary>        /// <param name="block">The block to execute for each current result.</param>        [iOSVersion(7)]        [Export("enumerateResultsUsingBlock")]        public virtual void EnumerateResultsUsingBlock(Action<AnyObject, int, UnsafeMutablePointer<ObjCBool>> block) {  }                /// <summary>        /// Enumerates the current set of results using the given options and block.        /// </summary>        /// <param name="opts">Options for the enumeration. For a complete list of options, see NSEnumerationOptions.</param>        /// <param name="usingBlock">The block to execute for each current result.</param>        [iOSVersion(7)]        [Export("enumerateResultsWithOptions")]        public virtual void EnumerateResultsWithOptions(NSEnumerationOptions opts, Action<AnyObject, int, UnsafeMutablePointer<ObjCBool>> usingBlock) {  }                /// <summary>        /// Returns the value for the attribute name attrName at the index in the results specified by idx.        /// </summary>        /// <param name="attributeName">The attribute of the result object at index being inquired about. The attribute must be specified in valueListAttributes, as a sorting key in a specified sort descriptor, or as one of the grouping attributes specified set for the query.</param>        /// <param name="forResultAtIndex">The index of the desired return object in the query results array.</param>        [iOSVersion(5)]        [Export("valueOfAttribute")]        [return:Optional]        public virtual AnyObject ValueOfAttribute(string attributeName, int forResultAtIndex) { return default(AnyObject); }                /// <summary>        /// Enables updates to the query results.        /// </summary>        [iOSVersion(5)]        [Export("enableUpdates")]        public virtual void EnableUpdates() {  }                /// <summary>        /// Disables updates to the query results.        /// </summary>        [iOSVersion(5)]        [Export("disableUpdates")]        public virtual void DisableUpdates() {  }                /// <summary>        /// An array containing the search scopes.        /// </summary>        [iOSVersion(5)]        [Export("searchScopes")]        public AnyObject[] SearchScopes { get; set; }                /// <summary>        /// The predicate used to filter query results.        /// </summary>        [iOSVersion(5)]        [Export("predicate")]        [Optional]        public NSPredicate Predicate { get; set; }                /// <summary>        /// An array of sort descriptor objects.        /// </summary>        [iOSVersion(5)]        [Export("sortDescriptors")]        public AnyObject[] SortDescriptors { get; set; }                /// <summary>        /// An array of attributes whose values are gathered by the query.        /// </summary>        [iOSVersion(5)]        [Export("valueListAttributes")]        public AnyObject[] ValueListAttributes { get; set; }                /// <summary>        /// An array of grouping attributes. (read-only)        /// </summary>        [iOSVersion(5)]        [Export("groupingAttributes")]        public AnyObject[] GroupingAttributes { get; set; }                /// <summary>        /// The interval at which notification of updated results occurs.        /// </summary>        [iOSVersion(5)]        [Export("notificationBatchingInterval")]        public NSTimeInterval NotificationBatchingInterval { get; set; }                /// <summary>        /// The query’s delegate.        /// </summary>        [iOSVersion(5)]        [Export("delegate")]        [Optional]        public NSMetadataQueryDelegate Delegate { get; set; }                /// <summary>        /// An array of objects that define the query’s scope.        /// </summary>        [iOSVersion(7)]        [Export("searchItems")]        public AnyObject[] SearchItems { get; set; }                /// <summary>        /// A Boolean value that indicates whether the query has started. (read-only)        /// </summary>        [iOSVersion(8)]        [Export("started")]        public bool Started { get; private set; }                /// <summary>        /// A Boolean value that indicates whether the receiver is in the initial gathering phase of the query. (read-only)        /// </summary>        [iOSVersion(8)]        [Export("gathering")]        public bool Gathering { get; private set; }                /// <summary>        /// A Boolean value that indicates whether the query has stopped. (read-only)        /// </summary>        [iOSVersion(8)]        [Export("stopped")]        public bool Stopped { get; private set; }                /// <summary>        /// An array containing the query’s results. (read-only)        /// </summary>        [iOSVersion(5)]        [Export("results")]        public AnyObject[] Results { get; private set; }                /// <summary>        /// The number of results returned by the query. (read-only)        /// </summary>        [iOSVersion(5)]        [Export("resultCount")]        public int ResultCount { get; private set; }                /// <summary>        /// An array containing hierarchical groups of query results. (read-only)        /// </summary>        [iOSVersion(5)]        [Export("groupedResults")]        public AnyObject[] GroupedResults { get; private set; }                /// <summary>        /// A dictionary containing the value lists generated by the query. (read-only)        /// </summary>        [iOSVersion(5)]        [Export("valueLists")]        public Dictionary<NSObject, AnyObject> ValueLists { get; private set; }                /// <summary>        /// The queue on which query result notifications are posted.        /// </summary>        [iOSVersion(7)]        [Export("operationQueue")]        [Optional]        public NSOperationQueue OperationQueue { get; set; }    }    /// <summary>    /// Posted when the receiver has finished with the initial result-gathering phase of the query.    /// </summary>    public class NSMetadataQueryDidFinishGatheringNotification : NSNotification    {        public NSMetadataQueryDidFinishGatheringNotification() : base("", null) { }    }    /// <summary>    /// Posted when the receiver begins with the initial result-gathering phase of the query.    /// </summary>    public class NSMetadataQueryDidStartGatheringNotification : NSNotification    {        public NSMetadataQueryDidStartGatheringNotification() : base("", null) { }    }    /// <summary>    /// Posted when the receiver’s results have changed during the live-update phase of the query.    /// </summary>    public class NSMetadataQueryDidUpdateNotification : NSNotification    {        public NSMetadataQueryDidUpdateNotification() : base("", null) { }    }    /// <summary>    /// Posted as the receiver is collecting results during the initial result-gathering phase of the query.    /// </summary>    public class NSMetadataQueryGatheringProgressNotification : NSNotification    {        public NSMetadataQueryGatheringProgressNotification() : base("", null) { }    }}