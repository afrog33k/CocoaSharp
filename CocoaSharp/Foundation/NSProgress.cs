using ObjectiveC;using System;using SwiftSharp.Attributes;namespace Foundation{	//https://developer.apple.com/library/prerelease/ios/documentation/Foundation/Reference/NSProgress_Class/index.html#//apple_ref/occ/cl/NSProgress	/// <summary>	/// The NSProgress class provides a self-contained mechanism for progress reporting. It makes it easy for code that does work to report the progress of that work, and for user interface code to observe that progress for presentation to the user. Specifically, it can be used to show the user a progress bar and explanatory text, both updated properly as progress is made. It also allows work to be cancelled or paused by the user.	/// </summary>	[iOSVersion(7)]	public class NSProgress : NSObject	{		/// <summary>		/// Initializes a newly allocated NSProgress instance.		/// </summary>		/// <param name="parent">The parent NSProgress object, if any, to notify when reporting progress or to consult when checking for cancellation.   The only valid values are [NSProgress currentProgress] or nil.</param>		/// <param name="userInfo">The user information dictionary for the progress object. May be nil.</param>		[iOSVersion(7)]		public NSProgress(NSProgress parent, NSDictionary userInfo) { }				/// <summary>		/// Creates and returns an NSProgress instance, initialized using initWithParent:userInfo:.		/// </summary>		/// <param name="totalUnitCount">The total number of units of work to be carried out.</param>		[iOSVersion(7)]		public NSProgress Init(int64 totalUnitCount) { }				/// <summary>		/// Returns the NSProgress instance, if any, associated with the current thread by a previous invocation of becomeCurrentWithPendingUnitCount:.		/// </summary>		/// <returns>The NSProgress instance associated with the current thread, if any.</returns>		[iOSVersion(7)]		[Export("currentProgress")]		public static NSProgress CurrentProgress() { return null; }				/// <summary>		/// Sets the receiver as the current progress object of the current thread and specifies the portion of work to be performed by the next child progress object of the receiver.		/// </summary>		/// <param name="unitCount">The number of units of work to be carried out by the next progress object that is initialized by invoking the initWithParent:userInfo: method in the current thread with the receiver set as the parent. This number represents the portion of work to be performed in relation to the total number of units of work to be performed by the receiver (represented by the value of the receiver’s totalUnitCount property). The units of work represented by this parameter must be the same units of work that are used in the receiver’s totalUnitCount property.</param>		[iOSVersion(7)]		[Export("becomeCurrentWithPendingUnitCount")]		public void BecomeCurrentWithPendingUnitCount(int64 unitCount) { }				/// <summary>		/// Balance the most recent previous invocation of becomeCurrentWithPendingUnitCount: on the same thread by restoring the current progress object to what it was before becomeCurrentWithPendingUnitCount: was invoked.		/// </summary>		[iOSVersion(7)]		[Export("resignCurrent")]		public void ResignCurrent() { }				/// <summary>		/// The total number of units of work tracked for the current progress.		/// </summary>		[iOSVersion(7)]		[Export("totalUnitCount")]		public int64 TotalUnitCount { get; set; }				/// <summary>		/// The number of units of work for the current job that have already been completed.		/// </summary>		[iOSVersion(7)]		[Export("completedUnitCount")]		public int64 CompletedUnitCount { get; set; }				/// <summary>		/// A localized description of progress tracked by the receiver.		/// </summary>		[iOSVersion(7)]		[Export("localizedDescription")]		public string LocalizedDescription { get; set; }				/// <summary>		/// A more specific localized description of progress tracked by the receiver.		/// </summary>		[iOSVersion(7)]		[Export("localizedAdditionalDescription")]		public string LocalizedAdditionalDescription { get; set; }				/// <summary>		/// The fraction of the overall work completed by this progress object, including work done by any children it may have. (read-only)		/// </summary>		[iOSVersion(7)]		[Export("fractionCompleted")]		public CDouble FractionCompleted { get; private set; }				/// <summary>		/// Indicates whether the receiver is tracking work that can be cancelled.		/// </summary>		[iOSVersion(7)]		[Export("cancellable")]		public bool Cancellable { get; set; }				/// <summary>		/// Indicates whether the receiver is tracking work that has been cancelled. (read-only)		/// </summary>		[iOSVersion(7)]		[Export("cancelled")]		public bool Cancelled { get; private set; }				/// <summary>		/// Cancel progress tracking.		/// </summary>		[iOSVersion(7)]		[Export("cancel")]		public void Cancel() { }				/// <summary>		/// The block to invoke when progress is cancelled.		/// </summary>		[iOSVersion(7)]		[Export("cancellationHandler")]		public (() CancellationHandler { get; set; }				/// <summary>		/// Indicates whether the receiver is tracking work that can be paused.		/// </summary>		[iOSVersion(7)]		[Export("pausable")]		public bool Pausable { get; set; }				/// <summary>		/// Indicates whether the receiver is tracking work that has been paused. (read-only)		/// </summary>		[iOSVersion(7)]		[Export("paused")]		public bool Paused { get; private set; }				/// <summary>		/// Pause progress tracking.		/// </summary>		[iOSVersion(7)]		[Export("pause")]		public void Pause() { }				/// <summary>		/// The block to invoke when progress is paused.		/// </summary>		[iOSVersion(7)]		[Export("pausingHandler")]		public (() PausingHandler { get; set; }				/// <summary>		/// Indicates whether the tracked progress is indeterminate. (read-only)		/// </summary>		[iOSVersion(7)]		[Export("indeterminate")]		public bool Indeterminate { get; private set; }				/// <summary>		/// A string identifying the kind of progress being made.		/// </summary>		[iOSVersion(7)]		[Export("kind")]		public string Kind { get; set; }				/// <summary>		/// Set a value in the userInfo dictionary.		/// </summary>		/// <param name="objectOrNil">The object to set for the given key, or nil to remove an existing entry in the dictionary.</param>		/// <param name="forKey">The key to use to store the given object.</param>		[iOSVersion(7)]		[Export("setUserInfoObject")]		public void SetUserInfoObject(AnyObject objectOrNil, string forKey) { }				/// <summary>		/// A dictionary of arbitrary values associated with the receiver.		/// </summary>		/// <returns>A a KVO-compliant dictionary that changes in response to setUserInfoObject:forKey:.</returns>		[iOSVersion(7)]		[Export("userInfo")]		public NSDictionary UserInfo { get; private set; }				/// <summary>		/// Set values for these keys in the user info dictionary to affect the auto-generated localizedAdditionalDescription string.		/// </summary>				/// <summary>		/// The corresponding value is an NSNumber instance representing the time remaining, in seconds.		/// </summary>		[iOSVersion(7)]		public string NSProgressEstimatedTimeRemainingKey { get; private set; }				/// <summary>		/// The corresponding value is an NSNumber instance indicating the speed of data processing, in bytes per second.		/// </summary>		[iOSVersion(7)]		public string NSProgressThroughputKey { get; private set; }				/// <summary>		/// When working with files, set this string for the kind of progress.		/// </summary>		[Export("NSProgressKindFile")]		public string NSProgressKindFile { get; private set; }				/// <summary>		/// Set values for these keys in the user info dictionary to provide more information about file operations for the auto-generated localizedDescription and localizedAdditionalDescription strings.		/// </summary>				/// <summary>		/// A value is required for this key in the user info dictionary when the progress kind is set to NSProgressKindFile. The corresponding value must be one of the entries listed in “File operation kinds”.		/// </summary>		[iOSVersion(7)]		public string NSProgressFileOperationKindKey { get; private set; }				/// <summary>		/// The corresponding value must be an NSNumber containing an integer to represent the total number of files affected. This entry is optional; if you set a value for this key, the auto-generated localizedAdditionalDescription string will make use of it.		/// </summary>		[iOSVersion(7)]		public string NSProgressFileTotalCountKey { get; private set; }				/// <summary>		/// The corresponding value must be an NSNumber containing an integer to represent the number of completed files. This entry is optional; if you set a value for this key, the auto-generated localizedAdditionalDescription string will make use of it.		/// </summary>		[iOSVersion(7)]		public string NSProgressFileCompletedCountKey { get; private set; }				/// <summary>		/// When tracking file operations with the progress kind set to NSProgressKindFile, you must provide a value for the NSProgressFileOperationKindKey in the user info dictionary. There are four possible values.		/// </summary>				/// <summary>		/// The progress is tracking a file download operation.		/// </summary>		[iOSVersion(7)]		public string NSProgressFileOperationKindDownloading { get; private set; }				/// <summary>		/// The progress is tracking file decompression after a download.		/// </summary>		[iOSVersion(7)]		public string NSProgressFileOperationKindDecompressingAfterDownloading { get; private set; }				/// <summary>		/// The progress is tracking the receipt of a file from another source.		/// </summary>		[iOSVersion(7)]		public string NSProgressFileOperationKindReceiving { get; private set; }				/// <summary>		/// The progress is tracking the copying of a file from source to destination.		/// </summary>		[iOSVersion(7)]		public string NSProgressFileOperationKindCopying { get; private set; }	}}