using ObjectiveC;using System;using SwiftSharp.Attributes;namespace Foundation{	//https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSNotificationCenter_Class/index.html#//apple_ref/occ/cl/NSNotificationCenter	/// <summary>	/// An NSNotificationCenter object (or simply, notification center) provides a mechanism for broadcasting information within a program. An NSNotificationCenter object is essentially a notification dispatch table.	/// </summary>	[iOSVersion(2)]	public class NSNotificationCenter : NSObject	{		/// <summary>		/// Returns the process’s default notification center.		/// </summary>		/// <returns>The current process’s default notification center, which is used for system notifications.</returns>		[iOSVersion(2)]		[Export("defaultCenter")]		public static NSNotificationCenter DefaultCenter() { return null; }				/// <summary>		/// Adds an entry to the receiver’s dispatch table with a notification queue and a block to add to the queue, and optional criteria: notification name and sender.		/// </summary>		/// <param name="name">The name of the notification for which to register the observer; that is, only notifications with this name are used to add the block to the operation queue.   If you pass nil, the notification center doesn’t use a notification’s name to decide whether to add the block to the operation queue.</param>		/// <param name="object">The object whose notifications you want to add the block to the operation queue.   If you pass nil, the notification center doesn’t use a notification’s sender to decide whether to add the block to the operation queue.</param>		/// <param name="queue">The operation queue to which block should be added.   If you pass nil, the block is run synchronously on the posting thread.</param>		/// <param name="usingBlock">The block to be executed when the notification is received.   The block is copied by the notification center and (the copy) held until the observer registration is removed.   The block takes one argument:           notification              The notification.</param>		/// <returns>An opaque object to act as the observer.</returns>		[iOSVersion(4)]		[Export("addObserverForName")]		public NSObjectProtocol AddObserverForName(string name, AnyObject @object, NSOperationQueue queue, Action<NSNotification> usingBlock) { return null; }				/// <summary>		/// Adds an entry to the receiver’s dispatch table with an observer, a notification selector and optional criteria: notification name and sender.		/// </summary>		/// <param name="notificationObserver">Object registering as an observer. This value must not be nil.</param>		/// <param name="selector">Selector that specifies the message the receiver sends notificationObserver to notify it of the notification posting. The method specified by notificationSelector must have one and only one argument (an instance of NSNotification).</param>		/// <param name="name">The name of the notification for which to register the observer; that is, only notifications with this name are delivered to the observer.   If you pass nil, the notification center doesn’t use a notification’s name to decide whether to deliver it to the observer.</param>		/// <param name="object">The object whose notifications the observer wants to receive; that is, only notifications sent by this sender are delivered to the observer.   If you pass nil, the notification center doesn’t use a notification’s sender to decide whether to deliver it to the observer.</param>		[iOSVersion(2)]		[Export("addObserver")]		public void AddObserver(AnyObject notificationObserver, Selector selector, string name, AnyObject @object) { }				/// <summary>		/// Removes all the entries specifying a given observer from the receiver’s dispatch table.		/// </summary>		/// <param name="notificationObserver">The observer to remove. Must not be nil.</param>		[iOSVersion(2)]		[Export("removeObserver")]		public void RemoveObserver(AnyObject notificationObserver) { }				/// <summary>		/// Removes matching entries from the receiver’s dispatch table.		/// </summary>		/// <param name="notificationObserver">Observer to remove from the dispatch table. Specify an observer to remove only entries for this observer. Must not be nil, or message will have no effect.</param>		/// <param name="name">Name of the notification to remove from dispatch table. Specify a notification name to remove only entries that specify this notification name. When nil, the receiver does not use notification names as criteria for removal.</param>		/// <param name="object">Sender to remove from the dispatch table. Specify a notification sender to remove only entries that specify this sender. When nil, the receiver does not use notification senders as criteria for removal.</param>		[iOSVersion(2)]		[Export("removeObserver")]		public void RemoveObserver(AnyObject notificationObserver, string name, AnyObject @object) { }				/// <summary>		/// Posts a given notification to the receiver.		/// </summary>		/// <param name="notification">The notification to post. This value must not be nil.</param>		[iOSVersion(2)]		[Export("postNotification")]		public void PostNotification(NSNotification notification) { }				/// <summary>		/// Creates a notification with a given name and sender and posts it to the receiver.		/// </summary>		/// <param name="notificationName">The name of the notification.</param>		/// <param name="object">The object posting the notification.</param>		[iOSVersion(2)]		[Export("postNotificationName")]		public void PostNotificationName(string notificationName, AnyObject @object) { }				/// <summary>		/// Creates a notification with a given name, sender, and information and posts it to the receiver.		/// </summary>		/// <param name="notificationName">The name of the notification.</param>		/// <param name="object">The object posting the notification.</param>		/// <param name="userInfo">Information about the the notification. May be nil.</param>		[iOSVersion(2)]		[Export("postNotificationName")]		public void PostNotificationName(string notificationName, AnyObject @object, NSDictionary userInfo) { }	}}