using ObjectiveC;using System;using SwiftSharp.Attributes;namespace Foundation{	//https://developer.apple.com/library/prerelease/ios/documentation/Foundation/Reference/NSUbiquitousKeyValueStore_class/index.html#//apple_ref/occ/cl/NSUbiquitousKeyValueStore	/// <summary>	/// Use the iCloud key-value store to make preference, configuration, and app-state data available to every instance of your app on every device connected to a userâ€™s iCloud account. You can store scalar values such as BOOL, as well as values containing any of the property list object types: NSNumber, NSString, NSDate, NSData, NSArray, and NSDictionary.	/// </summary>	[iOSVersion(5)]	public class NSUbiquitousKeyValueStore : NSObject	{		/// <summary>		/// Returns the shared iCloud key-value store object.		/// </summary>		/// <returns>The shared iCloud key-value store object.</returns>		[iOSVersion(5)]		[Export("defaultStore")]		public static NSUbiquitousKeyValueStore DefaultStore() { return null; }				/// <summary>		/// Returns the array associated with the specified key.		/// </summary>		/// <param name="aKey">A key in the key-value store.</param>		/// <returns>The array associated with the specified key, or nil if the key was not found or its value is not an NSArray object.</returns>		[iOSVersion(5)]		[Export("arrayForKey")]		public AnyObject[] ArrayForKey(string aKey) { return null; }				/// <summary>		/// Returns the Boolean value associated with the specified key.		/// </summary>		/// <param name="aKey">A key in the key-value store.</param>		/// <returns>If a Boolean value is associated with the specified key, that value is returned. If the key was not found, this method returns false.</returns>		[iOSVersion(5)]		[Export("boolForKey")]		public bool BoolForKey(string aKey) { return false; }				/// <summary>		/// Returns the data object associated with the specified key.		/// </summary>		/// <param name="aKey">A key in the key-value store.</param>		/// <returns>The data object associated with the specified key or nil if the key was not found or its value is not an NSData object.</returns>		[iOSVersion(5)]		[Export("dataForKey")]		public NSData DataForKey(string aKey) { return null; }				/// <summary>		/// Returns the dictionary object associated with the specified key.		/// </summary>		/// <param name="aKey">A key in the key-value store.</param>		/// <returns>The dictionary object associated with the specified key or nil if the key was not found or its value is not an NSDictionary object.</returns>		[iOSVersion(5)]		[Export("dictionaryForKey")]		public NSDictionary DictionaryForKey(string aKey) { return null; }				/// <summary>		/// Returns the double value associated with the specified key.		/// </summary>		/// <param name="aKey">A key in the key-value store.</param>		/// <returns>The double value associated with the specified key or 0 if the key was not found. If the key exists but does not contain a numerical value, this method returns 0.</returns>		[iOSVersion(5)]		[Export("doubleForKey")]		public CDouble DoubleForKey(string aKey) { return null; }				/// <summary>		/// Returns the long long value associated with the specified key.		/// </summary>		/// <param name="aKey">A key in the key-value store.</param>		/// <returns>The long long value associated with the specified key or 0 if the key was not found. If the key exists but does not contain a numerical value, this method returns 0.</returns>		[iOSVersion(5)]		[Export("longLongForKey")]		public CLongLong LongLongForKey(string aKey) { return null; }				/// <summary>		/// Returns the object associated with the specified key.		/// </summary>		/// <param name="aKey">A key in the key-value store.</param>		/// <returns>The object associated with the specified key or nil if the key was not found.</returns>		[iOSVersion(5)]		[Export("objectForKey")]		public AnyObject ObjectForKey(string aKey) { return null; }				/// <summary>		/// Returns the string associated with the specified key.		/// </summary>		/// <param name="aKey">A key in the key-value store.</param>		/// <returns>The string associated with the specified key or nil if the key was not found or its value is not an NSString object.</returns>		[iOSVersion(5)]		[Export("stringForKey")]		public string StringForKey(string aKey) { return ""; }				/// <summary>		/// Sets an array object for the specified key in the key-value store.		/// </summary>		/// <param name="anArray">An array whose contents can be stored in a property list format. In other words, the objects in the array must be of the types NSNumber, NSString, NSDate, NSData, NSArray, or NSDictionary. The total size (in bytes) of the array and its contents must not exceed the per-key size limits.</param>		/// <param name="forKey">The key under which to store the value. The length of this key must not exceed 64 bytes using UTF8 encoding.</param>		[iOSVersion(5)]		[Export("setArray")]		public void SetArray(AnyObject[] anArray, string forKey) { }				/// <summary>		/// Sets a Boolean value for the specified key in the key-value store.		/// </summary>		/// <param name="value">The Boolean value to store.</param>		/// <param name="forKey">The key under which to store the value. The length of this key must not exceed 64 bytes using UTF8 encoding.\</param>		[iOSVersion(5)]		[Export("setBool")]		public void SetBool(bool value, string forKey) { }				/// <summary>		/// Sets a data object for the specified key in the key-value store.		/// </summary>		/// <param name="aData">The data object to store. The total size of this data object (including any object overhead) must not exceed 1 MB.</param>		/// <param name="forKey">The key under which to store the value. The length of this key must not exceed 64 bytes using UTF8 encoding.</param>		[iOSVersion(5)]		[Export("setData")]		public void SetData(NSData aData, string forKey) { }				/// <summary>		/// Sets a dictionary object for the specified key in the key-value store.		/// </summary>		/// <param name="aDictionary">A dictionary whose contents can be stored in a property list format. In other words, the objects in the dictionary must be of the types NSNumber, NSString, NSDate, NSData, NSArray, or NSDictionary. The total size (in bytes) of the dictionary and its contents must not exceed the per-key size limits.</param>		/// <param name="forKey">The key under which to store the value. The length of this key must not exceed 64 bytes using UTF8 encoding.</param>		[iOSVersion(5)]		[Export("setDictionary")]		public void SetDictionary(NSDictionary aDictionary, string forKey) { }				/// <summary>		/// Sets a double value for the specified key in the key-value store.		/// </summary>		/// <param name="value">The double value to store.</param>		/// <param name="forKey">The key under which to store the value. The length of this key must not exceed 64 bytes using UTF8 encoding.</param>		[iOSVersion(5)]		[Export("setDouble")]		public void SetDouble(CDouble value, string forKey) { }				/// <summary>		/// Sets a long long value for the specified key in the key-value store.		/// </summary>		/// <param name="value">The long long value to store.</param>		/// <param name="forKey">The key under which to store the value. The length of this key must not exceed 64 bytes using UTF8 encoding.</param>		[iOSVersion(5)]		[Export("setLongLong")]		public void SetLongLong(CLongLong value, string forKey) { }				/// <summary>		/// Sets an object for the specified key in the key-value store.		/// </summary>		/// <param name="anObject">The object you want to store. The type of the object must be one of the property list types: NSNumber, NSString, NSDate, NSData, NSArray, or NSDictionary. The total size (in bytes) of the object must not exceed the per-key size limits.</param>		/// <param name="forKey">The key under which to store the value. The length of this key must not exceed 64 bytes using UTF8 encoding.</param>		[iOSVersion(5)]		[Export("setObject")]		public void SetObject(AnyObject anObject, string forKey) { }				/// <summary>		/// Sets a string object for the specified key in the key-value store.		/// </summary>		/// <param name="aString">The string you want to store. The total size (in bytes) of the string must not exceed the per-key size limits.</param>		/// <param name="forKey">The key under which to store the value. The length of this key must not exceed 64 bytes using UTF8 encoding.</param>		[iOSVersion(5)]		[Export("setString")]		public void SetString(string aString, string forKey) { }				/// <summary>		/// Explicitly synchronizes in-memory keys and values with those stored on disk.		/// </summary>		/// <returns>true if the in-memory and on-disk keys and values were synchronized, or false if an error occurred. For example, this method returns false if an app was not built with the proper entitlement requests.</returns>		[iOSVersion(5)]		[Export("synchronize")]		public bool Synchronize() { return false; }				/// <summary>		/// Removes the value associated with the specified key from the key-value store.		/// </summary>		/// <param name="aKey">The key corresponding to the value you want to remove.</param>		[iOSVersion(5)]		[Export("removeObjectForKey")]		public void RemoveObjectForKey(string aKey) { }				/// <summary>		/// Returns a dictionary containing all of the key-value pairs in the key-value store.		/// </summary>		/// <returns>A dictionary containing the key and value data in the key-value store.</returns>		[iOSVersion(5)]		[Export("dictionaryRepresentation")]		public NSDictionary DictionaryRepresentation { get; private set; }				/// <summary>		/// These keys can be included in the user info dictionary of the NSUbiquitousKeyValueStoreDidChangeExternallyNotification notification.		/// </summary>				/// <summary>		/// The value of this key indicates the reason the key-value store changed, as described in Change Reason Values .		/// </summary>		[iOSVersion(5)]		public string NSUbiquitousKeyValueStoreChangeReasonKey { get; private set; }				/// <summary>		/// The value of this key is an array of NSString objects, where each is the name of a key that changed in the key-value store.		/// </summary>		[iOSVersion(5)]		public string NSUbiquitousKeyValueStoreChangedKeysKey { get; private set; }				/// <summary>		/// Possible values associated with the NSUbiquitousKeyValueStoreChangeReasonKey key.		/// </summary>				/// <summary>		/// A value changed in iCloud. This occurs when another device, running another instance of your app and attached to the same iCloud account, uploads a new value.		/// </summary>		[iOSVersion(5)]		public int { get } NSUbiquitousKeyValueStoreServerChange { get; private set; }				/// <summary>		/// Your attempt to write to key-value storage was discarded because an initial download from iCloud has not yet happened. That is, before you can first write key-value data, the system must ensure that your appâ€™s local, on-disk cache matches the truth in iCloud.		/// </summary>		[iOSVersion(5)]		public int { get } NSUbiquitousKeyValueStoreInitialSyncChange { get; private set; }				/// <summary>		/// Your appâ€™s key-value store has exceeded its space quota on the iCloud server.		/// </summary>		[iOSVersion(5)]		public int { get } NSUbiquitousKeyValueStoreQuotaViolationChange { get; private set; }				/// <summary>		/// The user has changed the primary iCloud account. The keys and values in the local key-value store have been replaced with those from the new account, regardless of the relative timestamps.		/// </summary>		[iOSVersion(6)]		public int { get } NSUbiquitousKeyValueStoreAccountChange { get; private set; }								WHAT	}}