using ObjectiveC;using System;using SharpSwift.Attributes;using System.Collections.Generic;namespace Foundation{    /// <summary>    /// An NSURLConnection object lets you load the contents of a URL by providing a URL request object. The interface for NSURLConnection is sparse, providing only the controls to start and cancel asynchronous loads of a URL request. You perform most of your configuration on the URL request object itself.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSURLConnection_Class/index.html#//apple_ref/occ/cl/NSURLConnection"/>    [iOSVersion(2)]    [Export("")]    public class NSURLConnection : NSObject//, AnyObject, CVarArgType, Equatable, Hashable, NSObjectProtocol, Printable    {        public NSURLConnection() { }        /// <summary>        /// Returns whether a request can be handled based on a preflight evaluation.        /// </summary>        /// <param name="request">The request to evaluate. The connection deep-copies the request on creation.</param>        [iOSVersion(2)]        [Export("canHandleRequest")]        public static bool CanHandleRequest(NSURLRequest request) { return default(bool); }                /// <summary>        /// Performs a synchronous load of the specified URL request.        /// </summary>        /// <param name="request">The URL request to load. The request object is deep-copied as part of the initialization process. Changes made to request after this method returns do not affect the request that is used for the loading process.</param>        /// <param name="returningResponse">Out parameter for the URL response returned by the server.</param>        /// <param name="error">Out parameter used if an error occurs while processing the request. May be NULL.</param>        [iOSVersion(2)]        [Export("sendSynchronousRequest")]        [return:Optional]        public static NSData SendSynchronousRequest(NSURLRequest request, AutoreleasingUnsafeMutablePointer<NSURLResponse> returningResponse, NSErrorPointer error) { return default(NSData); }                /// <summary>        /// Loads the data for a URL request and executes a handler block on an operation queue when the request completes or fails.        /// </summary>        /// <param name="request">The URL request to load. The request object is deep-copied as part of the initialization process. Changes made to request after this method returns do not affect the request that is used for the loading process.</param>        /// <param name="queue">The operation queue to which the handler block is dispatched when the request completes or failed.</param>        /// <param name="completionHandler">The handler block to execute.</param>        [iOSVersion(5)]        [Export("sendAsynchronousRequest")]        public static void SendAsynchronousRequest(NSURLRequest request, [Unwrapped] NSOperationQueue queue, Action<NSURLResponse, NSData, NSError> completionHandler) {  }                /// <summary>        /// Causes the connection to begin loading data, if it has not already.        /// </summary>        [iOSVersion(2)]        [Export("start")]        public virtual void Start() {  }                /// <summary>        /// Cancels an asynchronous load of a request.        /// </summary>        [iOSVersion(2)]        [Export("cancel")]        public virtual void Cancel() {  }                /// <summary>        /// Determines the run loop and mode that the connection uses to call methods on its delegate.        /// </summary>        /// <param name="aRunLoop">The NSRunLoop instance to use when calling delegate methods.</param>        /// <param name="forMode">The mode in which to call delegate methods.</param>        [iOSVersion(2)]        [Export("scheduleInRunLoop")]        public virtual void ScheduleInRunLoop(NSRunLoop aRunLoop, string forMode) {  }                /// <summary>        /// Determines the operation queue that is used to call methods on the connectionâ€™s delegate.        /// </summary>        /// <param name="queue">The operation queue to use when calling delegate methods.</param>        [iOSVersion(5)]        [Export("setDelegateQueue")]        public virtual void SetDelegateQueue([Unwrapped] NSOperationQueue queue) {  }                /// <summary>        /// Causes the connection to stop calling delegate methods in the specified run loop and mode.        /// </summary>        /// <param name="aRunLoop">The run loop instance to unschedule.</param>        /// <param name="forMode">The mode to unschedule.</param>        [iOSVersion(2)]        [Export("unscheduleFromRunLoop")]        public virtual void UnscheduleFromRunLoop(NSRunLoop aRunLoop, string forMode) {  }                /// <summary>        /// A deep copy of the original connection request. (read-only)        /// </summary>        [iOSVersion(5)]        [Export("originalRequest")]        public NSURLRequest OriginalRequest { get; private set; }                /// <summary>        /// The current connection request. (read-only)        /// </summary>        [iOSVersion(5)]        [Export("currentRequest")]        public NSURLRequest CurrentRequest { get; private set; }    }}