using ObjectiveC;using System;using SharpSwift.Attributes;using System.Collections.Generic;namespace Foundation{    /// <summary>    /// An NSURLConnection object lets you load the contents of a URL by providing a URL request object. The interface for NSURLConnection is sparse, providing only the controls to start and cancel asynchronous loads of a URL request. You perform most of your configuration on the URL request object itself.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSURLConnection_Class/index.html#//apple_ref/occ/cl/NSURLConnection"/>    [iOSVersion(2)]    public class NSURLConnection : NSObject//, AnyObject, NSObjectProtocol    {        /// <summary>        /// Returns whether a request can be handled based on a preflight evaluation.        /// </summary>        /// <param name="request">The request to evaluate. The connection deep-copies the request on creation.</param>        [iOSVersion(2)]        [Export("canHandleRequest")]        public static bool CanHandleRequest(NSURLRequest request) { return default(bool); }                /// <summary>        /// Performs a synchronous load of the specified URL request.        /// </summary>        /// <param name="request">The URL request to load. The request object is deep-copied as part of the initialization process. Changes made to request after this method returns do not affect the request that is used for the loading process.</param>        /// <param name="returningResponse">Out parameter for the URL response returned by the server.</param>        /// <param name="error">Out parameter used if an error occurs while processing the request. May be NULL.</param>        [iOSVersion(2)]        [Export("sendSynchronousRequest")]        public static NSData SendSynchronousRequest(NSURLRequest request, AutoreleasingUnsafePointer<NSURLResponse> returningResponse, NSErrorPointer error) { return default(NSData); }                /// <summary>        /// Creates and returns an initialized URL connection and begins to load the data for the URL request.        /// </summary>        /// <param name="request">The URL request to load. The request object is deep-copied as part of the initialization process. Changes made to request after this method returns do not affect the request that is used for the loading process.</param>        /// <param name="@delegate">The delegate object for the connection. The connection calls methods on this delegate as the load progresses. Delegate methods are called on the same thread that called this method. For the connection to work correctly, the calling thread’s run loop must be operating in the default run loop mode.</param>        [iOSVersion(2)]        [Export("connectionWithRequest")]        public static NSURLConnection ConnectionWithRequest(NSURLRequest request, AnyObject @delegate) { return default(NSURLConnection); }                /// <summary>        /// Returns an initialized URL connection and begins to load the data for the URL request.        /// </summary>        /// <param name="request">The URL request to load. The request object is deep-copied as part of the initialization process. Changes made to request after this method returns do not affect the request that is used for the loading process.</param>        /// <param name="@delegate">The delegate object for the connection. The connection calls methods on this delegate as the load progresses. Delegate methods are called on the same thread that called this method. By default, for the connection to work correctly, the calling thread’s run loop must be operating in the default run loop mode. See scheduleInRunLoop:forMode: to change the run loop and mode.</param>        [iOSVersion(2)]        public NSURLConnection(NSURLRequest request, AnyObject @delegate) { }                /// <summary>        /// Returns an initialized URL connection and begins to load the data for the URL request, if specified.        /// </summary>        /// <param name="request">The URL request to load. The request object is deep-copied as part of the initialization process. Changes made to request after this method returns do not affect the request that is used for the loading process.</param>        /// <param name="@delegate">The delegate object for the connection. The connection calls methods on this delegate as the load progresses.</param>        /// <param name="startImmediately">true if the connection should begin loading data immediately, otherwise false. If you pass false, the connection is not scheduled with a run loop. You can then schedule the connection in the run loop and mode of your choice by calling scheduleInRunLoop:forMode:.</param>        [iOSVersion(2)]        public NSURLConnection(NSURLRequest request, AnyObject @delegate, bool startImmediately) { }                /// <summary>        /// Loads the data for a URL request and executes a handler block on an operation queue when the request completes or fails.        /// </summary>        /// <param name="request">The URL request to load. The request object is deep-copied as part of the initialization process. Changes made to request after this method returns do not affect the request that is used for the loading process.</param>        /// <param name="queue">The operation queue to which the handler block is dispatched when the request completes or failed.</param>        /// <param name="completionHandler">The handler block to execute.</param>        [iOSVersion(5)]        [Export("sendAsynchronousRequest")]        public static void SendAsynchronousRequest(NSURLRequest request, NSOperationQueue queue, Action<NSURLResponse, NSData, NSError> completionHandler) {  }                /// <summary>        /// Causes the connection to begin loading data, if it has not already.        /// </summary>        [iOSVersion(2)]        [Export("start")]        public void Start() {  }                /// <summary>        /// Cancels an asynchronous load of a request.        /// </summary>        [iOSVersion(2)]        [Export("cancel")]        public void Cancel() {  }                /// <summary>        /// Determines the run loop and mode that the connection uses to call methods on its delegate.        /// </summary>        /// <param name="aRunLoop">The NSRunLoop instance to use when calling delegate methods.</param>        /// <param name="forMode">The mode in which to call delegate methods.</param>        [iOSVersion(2)]        [Export("scheduleInRunLoop")]        public void ScheduleInRunLoop(NSRunLoop aRunLoop, string forMode) {  }                /// <summary>        /// Determines the operation queue that is used to call methods on the connection’s delegate.        /// </summary>        /// <param name="queue">The operation queue to use when calling delegate methods.</param>        [iOSVersion(5)]        [Export("setDelegateQueue")]        public void SetDelegateQueue(NSOperationQueue queue) {  }                /// <summary>        /// Causes the connection to stop calling delegate methods in the specified run loop and mode.        /// </summary>        /// <param name="aRunLoop">The run loop instance to unschedule.</param>        /// <param name="forMode">The mode to unschedule.</param>        [iOSVersion(2)]        [Export("unscheduleFromRunLoop")]        public void UnscheduleFromRunLoop(NSRunLoop aRunLoop, string forMode) {  }                /// <summary>        /// A deep copy of the original connection request. (read-only)        /// </summary>        [iOSVersion(5)]        [Export("originalRequest")]        public NSURLRequest OriginalRequest { get; private set; }                /// <summary>        /// The current connection request. (read-only)        /// </summary>        [iOSVersion(5)]        [Export("currentRequest")]        public NSURLRequest CurrentRequest { get; private set; }    }}