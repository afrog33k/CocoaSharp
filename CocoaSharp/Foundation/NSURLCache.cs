using ObjectiveC;using System;using SharpSwift.Attributes;using System.Collections.Generic;namespace Foundation{    /// <summary>    /// The NSURLCache class implements the caching of responses to URL load requests by mapping NSURLRequest objects to NSCachedURLResponse objects. It provides a composite in-memory and on-disk cache, and lets you manipulate the sizes of both the in-memory and on-disk portions. You can also control the path where cache data is stored persistently.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSURLCache_Class/index.html#//apple_ref/occ/cl/NSURLCache"/>    [iOSVersion(2)]    public class NSURLCache : NSObject//, AnyObject, NSObjectProtocol    {        /// <summary>        /// Returns the shared NSURLCache instance.        /// </summary>        [iOSVersion(2)]        [Export("sharedURLCache")]        public static NSURLCache SharedURLCache() { return default(NSURLCache); }                /// <summary>        /// Sets the shared NSURLCache instance to a specified cache object.        /// </summary>        /// <param name="cache">The cache object to use as the shared cache object.</param>        [iOSVersion(2)]        [Export("setSharedURLCache")]        public static void SetSharedURLCache(NSURLCache cache) {  }                /// <summary>        /// Initializes an NSURLCache object with the specified values.        /// </summary>        /// <param name="memoryCapacity">The memory capacity of the cache, in bytes.</param>        /// <param name="diskCapacity">The disk capacity of the cache, in bytes.</param>        /// <param name="diskPath">In OS X, path is the location at which to store the on-disk cache.        ///   In iOS, path is the name of a subdirectory of the application’s default cache directory in which to store the on-disk cache (the subdirectory is created if it does not exist).</param>        [iOSVersion(2)]        public NSURLCache(int memoryCapacity, int diskCapacity, string diskPath) { }                /// <summary>        /// Returns the cached URL response in the cache for the specified URL request.        /// </summary>        /// <param name="request">The URL request whose cached response is desired.</param>        [iOSVersion(2)]        [Export("cachedResponseForRequest")]        public NSCachedURLResponse CachedResponseForRequest(NSURLRequest request) { return default(NSCachedURLResponse); }                /// <summary>        /// Stores a cached URL response for a specified request        /// </summary>        /// <param name="cachedResponse">The cached URL response to store.</param>        /// <param name="forRequest">The request for which the cached URL response is being stored.</param>        [iOSVersion(2)]        [Export("storeCachedResponse")]        public void StoreCachedResponse(NSCachedURLResponse cachedResponse, NSURLRequest forRequest) {  }                /// <summary>        /// Clears the receiver’s cache, removing all stored cached URL responses.        /// </summary>        [iOSVersion(2)]        [Export("removeAllCachedResponses")]        public void RemoveAllCachedResponses() {  }                /// <summary>        /// Removes the cached URL response for a specified URL request.        /// </summary>        /// <param name="request">The URL request whose cached URL response should be removed. If there is no corresponding cached URL response, no action is taken.</param>        [iOSVersion(2)]        [Export("removeCachedResponseForRequest")]        public void RemoveCachedResponseForRequest(NSURLRequest request) {  }                /// <summary>        /// Returns the current size of the receiver’s on-disk cache, in bytes.        /// </summary>        [iOSVersion(2)]        [Export("currentDiskUsage")]        public int CurrentDiskUsage { get; private set; }                /// <summary>        /// Returns the capacity of the receiver’s on-disk cache, in bytes.        /// </summary>        [iOSVersion(2)]        [Export("diskCapacity")]        public int DiskCapacity { get; set; }                /// <summary>        /// Returns the current size of the receiver’s in-memory cache, in bytes.        /// </summary>        [iOSVersion(2)]        [Export("currentMemoryUsage")]        public int CurrentMemoryUsage { get; private set; }                /// <summary>        /// Returns the capacity of the receiver’s in-memory cache, in bytes.        /// </summary>        [iOSVersion(2)]        [Export("memoryCapacity")]        public int MemoryCapacity { get; set; }    }}