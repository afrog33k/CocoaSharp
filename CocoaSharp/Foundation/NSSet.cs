using ObjectiveC;using System;using SwiftSharp.Attributes;namespace Foundation{	//https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSSet_Class/index.html#//apple_ref/occ/cl/NSSet	/// <summary>	/// The NSSet, NSMutableSet, and NSCountedSet classes declare the programmatic interface to an unordered collection of objects.	/// </summary>	[iOSVersion(2)]	public class NSSet : NSObject	{		/// <summary>		/// Creates and returns a set that contains a single given object.		/// </summary>		/// <param name="object">The object to add to the new set. object receives a retain message after being added to the set.</param>		/// <returns>A new set that contains a single member, object.</returns>		[iOSVersion(2)]		public NSSet(AnyObject @object) { }				/// <summary>		/// Returns a new set formed by adding a given object to the receiving set.		/// </summary>		/// <param name="anObject">The object to add to the set.</param>		/// <returns>A new set formed by adding anObject to the receiving set.</returns>		[iOSVersion(2)]		[Export("setByAddingObject")]		public NSSet SetByAddingObject(AnyObject anObject) { return null; }				/// <summary>		/// Returns a new set formed by adding the objects in a given set to the receiving set.		/// </summary>		/// <param name="other">The set of objects to add to the receiving set.</param>		/// <returns>A new set formed by adding the objects in other to the receiving set.</returns>		[iOSVersion(2)]		[Export("setByAddingObjectsFromSet")]		public NSSet SetByAddingObjectsFromSet(NSSet other) { return null; }				/// <summary>		/// Returns a new set formed by adding the objects in a given array to the receiving set.		/// </summary>		/// <param name="other">The array of objects to add to the set.</param>		/// <returns>A new set formed by adding the objects in other to the receiving set.</returns>		[iOSVersion(2)]		[Export("setByAddingObjectsFromArray")]		public NSSet SetByAddingObjectsFromArray(AnyObject[] other) { return null; }				/// <summary>		/// Initializes a newly allocated set with the objects that are contained in a given array.		/// </summary>		/// <param name="array">An array of objects to add to the new set. If the same object appears more than once in array, it is represented only once in the returned set. Each object receives a retain message as it is added to the set.</param>		/// <returns>An initialized set with the contents of array. The returned set might be different than the original receiver.</returns>		[iOSVersion(2)]		public NSSet(AnyObject[] array) { }				/// <summary>		/// Initializes a newly allocated set with a specified number of objects from a given C array of objects.		/// </summary>		/// <param name="objects">A C array of objects to add to the new set. If the same object appears more than once in objects, it is added only once to the returned set. Each object receives a retain message as it is added to the set.</param>		/// <param name="count">The number of objects from objects to add to the new set.</param>		/// <returns>An initialized set containing cnt objects from the list of objects specified by objects. The returned set might be different than the original receiver.</returns>		[iOSVersion(2)]		public NSSet(CConstPointer<AnyObject?> objects, int count) { }				/// <summary>		/// Initializes a newly allocated set and adds to it objects from another given set.		/// </summary>		/// <param name="set">A set containing objects to add to the receiving set. Each object is retained as it is added.</param>		/// <returns>An initialized objects set containing the objects from set. The returned set might be different than the original receiver.</returns>		[iOSVersion(2)]		public NSSet(NSSet set) { }				/// <summary>		/// Initializes a newly allocated set and adds to it members of another given set.		/// </summary>		/// <param name="set">A set containing objects to add to the new set.</param>		/// <param name="copyItems">If true, each object in set receives a copyWithZone: message to create a copy of the object—objects must conform to the NSCopying protocol. In a managed memory environment, this is instead of the retain message the object would otherwise receive. The object copy is then added to the returned set.   If false, then in a managed memory environment each object in set simply receives a retain message when it is added to the returned set.</param>		/// <returns>An initialized set that contains the members of set. The returned set might be different than the original receiver.</returns>		[iOSVersion(2)]		public NSSet(NSSet set, bool copyItems) { }				/// <summary>		/// Initializes a newly allocated set.		/// </summary>		/// <returns>A set.</returns>		[iOSVersion(7)]		public NSSet() { }				/// <summary>		/// Returns the number of members in the set.		/// </summary>		/// <returns>The number of members in the set.</returns>		[iOSVersion(2)]		[Export("count")]		public int Count { get; private set; }				/// <summary>		/// Returns an array containing the set’s members, or an empty array if the set has no members.		/// </summary>		/// <returns>An array containing the set’s members, or an empty array if the set has no members. The order of the objects in the array isn’t defined.</returns>		[iOSVersion(2)]		[Export("allObjects")]		public AnyObject[] AllObjects { get; private set; }				/// <summary>		/// Returns one of the objects in the set, or nil if the set contains no objects.		/// </summary>		/// <returns>One of the objects in the set, or nil if the set contains no objects. The object returned is chosen at the set’s convenience—the selection is not guaranteed to be random.</returns>		[iOSVersion(2)]		[Export("anyObject")]		public AnyObject AnyObject() { return null; }				/// <summary>		/// Returns a Boolean value that indicates whether a given object is present in the set.		/// </summary>		/// <param name="anObject">The object for which to test membership of the set.</param>		/// <returns>true if anObject is present in the set, otherwise false.</returns>		[iOSVersion(2)]		[Export("containsObject")]		public bool ContainsObject(AnyObject anObject) { return false; }				/// <summary>		/// Evaluates a given predicate against each object in the receiving set and returns a new set containing the objects for which the predicate returns true.		/// </summary>		/// <param name="predicate">A predicate.</param>		/// <returns>A new set containing the objects in the receiving set for which predicate returns true.</returns>		[iOSVersion(3)]		[Export("filteredSetUsingPredicate")]		public NSSet FilteredSetUsingPredicate(NSPredicate predicate) { return null; }				/// <summary>		/// Sends a message specified by a given selector to each object in the set.		/// </summary>		/// <param name="aSelector">A selector that specifies the message to send to the members of the set. The method must not take any arguments. It should not have the side effect of modifying the set. This value must not be NULL.</param>		[iOSVersion(2)]		[Export("makeObjectsPerformSelector")]		public void MakeObjectsPerformSelector(Selector aSelector) { }				/// <summary>		/// Sends a message specified by a given selector to each object in the set.		/// </summary>		/// <param name="aSelector">A selector that specifies the message to send to the set's members. The method must take a single argument of type id. The method should not, as a side effect, modify the set. The value must not be NULL.</param>		/// <param name="withObject">The object to pass as an argument to the method specified by aSelector.</param>		[iOSVersion(2)]		[Export("makeObjectsPerformSelector")]		public void MakeObjectsPerformSelector(Selector aSelector, AnyObject withObject) { }				/// <summary>		/// Determines whether the set contains an object equal to a given object, and returns that object if it is present.		/// </summary>		/// <param name="object">The object for which to test for membership of the set.</param>		/// <returns>If the set contains an object equal to object (as determined by isEqual:) then that object (typically this will be object), otherwise nil.</returns>		[iOSVersion(2)]		[Export("member")]		public AnyObject Member(AnyObject @object) { return null; }				/// <summary>		/// Returns an enumerator object that lets you access each object in the set.		/// </summary>		/// <returns>An enumerator object that lets you access each object in the set.</returns>		[iOSVersion(2)]		[Export("objectEnumerator")]		public NSEnumerator ObjectEnumerator() { return null; }				/// <summary>		/// Executes a given Block using each object in the set.		/// </summary>		/// <param name="block">The Block to apply to elements in the set.   The Block takes two arguments:           obj              The element in the set.                stop              A reference to a Boolean value. The block can set the value to true to stop further processing of the set. The stop argument is an out-only argument. You should only ever set this Boolean to YES within the Block.        The Block returns a Boolean value that indicates whether obj passed the test.</param>		[iOSVersion(4)]		[Export("enumerateObjectsUsingBlock")]		public void EnumerateObjectsUsingBlock(Action<AnyObject, CMutablePointer<ObjCBool>> block) { }				/// <summary>		/// Executes a given Block using each object in the set, using the specified enumeration options.		/// </summary>		/// <param name="opts">A bitmask that specifies the options for the enumeration.</param>		/// <param name="usingBlock">The Block to apply to elements in the set.   The Block takes two arguments:           obj              The element in the set.                stop              A reference to a Boolean value. The block can set the value to true to stop further processing of the set. The stop argument is an out-only argument. You should only ever set this Boolean to YES within the Block.        The Block returns a Boolean value that indicates whether obj passed the test.</param>		[iOSVersion(4)]		[Export("enumerateObjectsWithOptions")]		public void EnumerateObjectsWithOptions(NSEnumerationOptions opts, Action<AnyObject, CMutablePointer<ObjCBool>> usingBlock) { }				/// <summary>		/// Returns a set of object that pass a test in a given Block.		/// </summary>		/// <param name="predicate">The block to apply to elements in the array.   The block takes three arguments:           obj              The element in the set.                stop              A reference to a Boolean value. The block can set the value to true to stop further processing of the set. The stop argument is an out-only argument. You should only ever set this Boolean to YES within the Block.        The Block returns a Boolean value that indicates whether obj passed the test.</param>		/// <returns>An NSSet containing objects that pass the test.</returns>		[iOSVersion(4)]		[Export("objectsPassingTest")]		public NSSet ObjectsPassingTest(Func<AnyObject, CMutablePointer<ObjCBool>, bool> predicate) { return null; }				/// <summary>		/// Returns a set of object that pass a test in a given Block, using the specified enumeration options.		/// </summary>		/// <param name="opts">A bitmask that specifies the options for the enumeration.</param>		/// <param name="passingTest">The Block to apply to elements in the set.   The Block takes two arguments:           obj              The element in the set.                stop              A reference to a Boolean value. The block can set the value to true to stop further processing of the set. The stop argument is an out-only argument. You should only ever set this Boolean to YES within the Block.        The Block returns a Boolean value that indicates whether obj passed the test.</param>		/// <returns>An NSSet containing objects that pass the test.</returns>		[iOSVersion(4)]		[Export("objectsWithOptions")]		public NSSet ObjectsWithOptions(NSEnumerationOptions opts, Func<AnyObject, CMutablePointer<ObjCBool>, bool> passingTest) { return null; }				/// <summary>		/// Returns a Boolean value that indicates whether every object in the receiving set is also present in another given set.		/// </summary>		/// <param name="otherSet">The set with which to compare the receiving set.</param>		/// <returns>true if every object in the receiving set is also present in otherSet, otherwise false.</returns>		[iOSVersion(2)]		[Export("isSubsetOfSet")]		public bool IsSubsetOfSet(NSSet otherSet) { return false; }				/// <summary>		/// Returns a Boolean value that indicates whether at least one object in the receiving set is also present in another given set.		/// </summary>		/// <param name="otherSet">The set with which to compare the receiving set.</param>		/// <returns>true if at least one object in the receiving set is also present in otherSet, otherwise false.</returns>		[iOSVersion(2)]		[Export("intersectsSet")]		public bool intersectsSet(NSSet otherSet) { return false; }				/// <summary>		/// Compares the receiving set to another set.		/// </summary>		/// <param name="otherSet">The set with which to compare the receiving set.</param>		/// <returns>true if the contents of otherSet are equal to the contents of the receiving set, otherwise false.</returns>		[iOSVersion(2)]		[Export("isEqualToSet")]		public bool IsEqualToSet(NSSet otherSet) { return false; }				/// <summary>		/// Return a set containing the results of invoking valueForKey: on each of the receiving set's members.		/// </summary>		/// <param name="key">The name of one of the properties of the receiving set's members.</param>		/// <returns>A set containing the results of invoking valueForKey: (with the argument key) on each of the receiving set's members.</returns>		[iOSVersion(2)]		[Export("valueForKey")]		public AnyObject ValueForKey(string key) { return null; }				/// <summary>		/// Invokes setValue:forKey: on each of the set’s members.		/// </summary>		/// <param name="value">The value for the property identified by key.</param>		/// <param name="forKey">The name of one of the properties of the set's members.</param>		[iOSVersion(2)]		[Export("setValue")]		public void SetValue(AnyObject value, string forKey) { }				/// <summary>		/// Returns an array of the set’s content sorted as specified by a given array of sort descriptors.		/// </summary>		/// <param name="sortDescriptors">An array of NSSortDescriptor objects.</param>		/// <returns>An NSArray containing the set’s content sorted as specified by sortDescriptors.</returns>		[iOSVersion(4)]		[Export("sortedArrayUsingDescriptors")]		public AnyObject[] SortedArrayUsingDescriptors(AnyObject[] sortDescriptors) { return null; }				/// <summary>		/// Raises an exception.		/// </summary>		/// <param name="observer">The object to register for KVO notifications. The observer must implement the key-value observing method observeValueForKeyPath:ofObject:change:context:.</param>		/// <param name="forKeyPath">The key path, relative to the set, of the property to observe. This value must not be nil.</param>		/// <param name="options">A combination of the NSKeyValueObservingOptions values that specifies what is included in observation notifications. For possible values, see NSKeyValueObservingOptions.</param>		/// <param name="context">Arbitrary data that is passed to observer in observeValueForKeyPath:ofObject:change:context:.</param>		[iOSVersion(2)]		[Export("addObserver")]		public void AddObserver(NSObject observer, string forKeyPath, NSKeyValueObservingOptions options, CMutableVoidPointer context) { }				/// <summary>		/// Raises an exception.		/// </summary>		/// <param name="observer">The object to remove as an observer.</param>		/// <param name="forKeyPath">A key-path, relative to the set, for which observer is registered to receive KVO change notifications. This value must not be nil.</param>		/// <param name="context">Arbitrary data that is passed to observer in observeValueForKeyPath:ofObject:change:context:.</param>		[iOSVersion(5)]		[Export("removeObserver")]		public void RemoveObserver(NSObject observer, string forKeyPath, CMutableVoidPointer context) { }				/// <summary>		/// Raises an exception.		/// </summary>		/// <param name="observer">The object to remove as an observer.</param>		/// <param name="forKeyPath">A key-path, relative to the set, for which observer is registered to receive KVO change notifications. This value must not be nil.</param>		[iOSVersion(2)]		[Export("removeObserver")]		public void RemoveObserver(NSObject observer, string forKeyPath) { }				/// <summary>		/// Returns a string that represents the contents of the set, formatted as a property list.		/// </summary>		/// <returns>A string that represents the contents of the set, formatted as a property list.</returns>		[iOSVersion(2)]		[Export("description")]		public string Description { get; private set; }				/// <summary>		/// Returns a string that represents the contents of the set, formatted as a property list.		/// </summary>		/// <param name="locale">On iOS and OS X v10.5 and later, either an instance of NSDictionary or an NSLocale object may be used for locale.On OS X v10.4 and earlier it must be an instance of NSDictionary.</param>		/// <returns>A string that represents the contents of the set, formatted as a property list.</returns>		[iOSVersion(2)]		[Export("descriptionWithLocale")]		public string DescriptionWithLocale(AnyObject locale) { return ""; }	}}