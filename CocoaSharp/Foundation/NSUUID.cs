using ObjectiveC;using System;using SwiftSharp.Attributes;using System.Collections.Generic;namespace Foundation{	/// <summary>	/// The NSUUID class creates UUID strings that are to uniquely identify types, interfaces, and other items.	/// </summary>	/// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/Foundation/Reference/NSUUID_Class/index.html#//apple_ref/occ/cl/NSUUID"/>	[iOSVersion(6)]	public class NSUUID : NSObject//, AnyObject, NSCoding, NSCopying, NSObjectProtocol, NSSecureCoding	{		/// <summary>		/// Create and returns a new UUID with RFC 4122 version 4 random bytes.		/// </summary>		[iOSVersion(6)]		public static Self UUID() { return default(Self); }				/// <summary>		/// Create and returns a new UUID with RFC 4122 version 4 random bytes.		/// </summary>		[iOSVersion(6)]		public NSUUID() { }				/// <summary>		/// Creates and returns a new UUID with the given bytes.		/// </summary>		/// <param name="UUIDBytes">Raw UUID bytes to use to create the UUID.</param>		[iOSVersion(6)]		[Export("convenience init")]		public NSUUID(ConstUnsafePointer<UInt8> UUIDBytes) { }				/// <summary>		/// Creates and returns a new UUID from the formatted string.		/// </summary>		/// <param name="UUIDString">The source string containing the UUID. The standard format for UUIDs represented in ASCII is a string punctuated by hyphens, for example 68753A44-4D6F-1226-9C60-0050E4C00067.</param>		[iOSVersion(6)]		[Export("convenience init")]		public NSUUID(string UUIDString) { }				/// <summary>		/// Returns the UUIDs bytes.		/// </summary>		/// <param name="uuid">The value of uuid represented as raw bytes.</param>		[iOSVersion(6)]		[Export("getUUIDBytes")]		public void GetUUIDBytes(UnsafePointer<UInt8> uuid) {  }				/// <summary>		/// The UUID as a string. (read-only)		/// </summary>		[iOSVersion(6)]		public string UUIDString { get; private set; }	}}