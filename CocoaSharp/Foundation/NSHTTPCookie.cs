using ObjectiveC;using System;using SwiftSharp.Attributes;namespace Foundation{	//https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSHTTPCookie_Class/index.html#//apple_ref/occ/cl/NSHTTPCookie	/// <summary>	/// An NSHTTPCookie object represents an HTTP cookie. It is an immutable object, initialized from a dictionary containing the cookie attributes.	/// </summary>	[iOSVersion(2)]	public class NSHTTPCookie : NSObject	{		/// <summary>		/// Returns an array of NSHTTPCookie objects corresponding to the provided response header fields for the provided URL.		/// </summary>		/// <param name="headerFields">The header fields used to create the NSHTTPCookie objects.</param>		/// <param name="forURL">The URL associated with the created cookies.</param>		/// <returns>The array of created cookies.</returns>		[iOSVersion(2)]		[Export("cookiesWithResponseHeaderFields")]		public static AnyObject[] CookiesWithResponseHeaderFields(NSDictionary headerFields, NSURL forURL) { return null; }				/// <summary>		/// Creates and initializes an NSHTTPCookie object using the provided properties.		/// </summary>		/// <param name="properties">The properties for the new cookie object, expressed as key value pairs.</param>		/// <returns>The newly created cookie object. Returns nil if the provided properties are invalid.</returns>		[iOSVersion(2)]		[Export("cookieWithProperties")]		public static NSHTTPCookie CookieWithProperties(NSDictionary properties) { return null; }				/// <summary>		/// Returns an initialized NSHTTPCookie object using the provided properties.		/// </summary>		/// <param name="properties">The properties for the new cookie object, expressed as key value pairs.</param>		/// <returns>The initialized cookie object. Returns nil if the provided properties are invalid.</returns>		[iOSVersion(2)]		public NSHTTPCookie(NSDictionary properties) { }				/// <summary>		/// Returns a dictionary of header fields corresponding to a provided array of cookies.		/// </summary>		/// <param name="cookies">The cookies from which the header fields are created.</param>		/// <returns>The dictionary of header fields created from the provided cookies.</returns>		[iOSVersion(2)]		[Export("requestHeaderFieldsWithCookies")]		public static NSDictionary RequestHeaderFieldsWithCookies(AnyObject[] cookies) { return null; }				/// <summary>		/// Returns the receiver's comment string.		/// </summary>		/// <returns>The receiver’s comment string or nil if the cookie has no comment. This string is suitable for presentation to the user, explaining the contents and purpose of this cookie.</returns>		[iOSVersion(2)]		[Export("comment")]		public string Comment { get; private set; }				/// <summary>		/// Returns the receiver’s comment URL.		/// </summary>		/// <returns>The receiver’s comment URL or nil if the cookie has none. This value specifies a URL which is suitable for presentation to the user as a link for further information about this cookie.</returns>		[iOSVersion(2)]		[Export("commentURL")]		public NSURL CommentURL { get; private set; }				/// <summary>		/// Returns the domain of the receiver’s cookie.		/// </summary>		/// <returns>The domain of the receiver’s cookie.</returns>		[iOSVersion(2)]		[Export("domain")]		public string Domain { get; private set; }				/// <summary>		/// Returns the receiver’s expiration date.		/// </summary>		/// <returns>The receiver’s expiration date, or nil if there is no specific expiration date such as in the case of “session-only” cookies. The expiration date is the date when the cookie should be deleted.</returns>		[iOSVersion(2)]		[Export("expiresDate")]		public NSDate ExpiresDate { get; private set; }				/// <summary>		/// Returns the receiver’s name.		/// </summary>		/// <returns>The receiver's name.</returns>		[iOSVersion(2)]		[Export("name")]		public string Name { get; private set; }				/// <summary>		/// Returns the receiver’s path.		/// </summary>		/// <returns>The receiver's path.</returns>		[iOSVersion(2)]		[Export("path")]		public string Path { get; private set; }				/// <summary>		/// Returns the receiver's port list.		/// </summary>		/// <returns>The list of ports for the cookie, returned as an array of NSNumber objects containing integers. If the cookie has no port list this method returns nil and the cookie will be sent to any port. Otherwise, the cookie is only sent to ports specified in the port list.</returns>		[iOSVersion(2)]		[Export("portList")]		public AnyObject[] PortList { get; private set; }				/// <summary>		/// Returns the receiver’s cookie properties.		/// </summary>		/// <returns>A dictionary representation of the receiver’s cookie properties.</returns>		[iOSVersion(2)]		[Export("properties")]		public NSDictionary Properties { get; private set; }				/// <summary>		/// Returns the receiver’s value.		/// </summary>		/// <returns>The receiver's value.</returns>		[iOSVersion(2)]		[Export("value")]		public string Value { get; private set; }				/// <summary>		/// Returns the receiver’s version.		/// </summary>		/// <returns>The receiver's version. Version 0 maps to “old-style” Netscape cookies. Version 1 maps to RFC 2965 cookies.</returns>		[iOSVersion(2)]		[Export("version")]		public int Version { get; private set; }				/// <summary>		/// These constants define the supported keys in a cookie attributes dictionary.		/// </summary>				/// <summary>		/// An NSString object containing the comment for the cookie.		/// </summary>		[iOSVersion(2)]		public string NSHTTPCookieComment { get; private set; }				/// <summary>		/// An NSURL object or NSString object containing the comment URL for the cookie.		/// </summary>		[iOSVersion(2)]		public string NSHTTPCookieCommentURL { get; private set; }				/// <summary>		/// An NSString object stating whether the cookie should be discarded at the end of the session.		/// </summary>		[iOSVersion(2)]		public string NSHTTPCookieDiscard { get; private set; }				/// <summary>		/// An NSString object containing the domain for the cookie.		/// </summary>		[iOSVersion(2)]		public string NSHTTPCookieDomain { get; private set; }				/// <summary>		/// An NSDate object or NSString object specifying the expiration date for the cookie.		/// </summary>		[iOSVersion(2)]		public string NSHTTPCookieExpires { get; private set; }				/// <summary>		/// An NSString object containing an integer value stating how long in seconds the cookie should be kept, at most.		/// </summary>		[iOSVersion(2)]		public string NSHTTPCookieMaximumAge { get; private set; }				/// <summary>		/// An NSString object containing the name of the cookie. This cookie attribute is required.		/// </summary>		[iOSVersion(2)]		public string NSHTTPCookieName { get; private set; }				/// <summary>		/// An NSURL or NSString object containing the URL that set this cookie.		/// </summary>		[iOSVersion(2)]		public string NSHTTPCookieOriginURL { get; private set; }				/// <summary>		/// An NSString object containing the path for the cookie.		/// </summary>		[iOSVersion(2)]		public string NSHTTPCookiePath { get; private set; }				/// <summary>		/// An NSString object containing comma-separated integer values specifying the ports for the cookie.		/// </summary>		[iOSVersion(2)]		public string NSHTTPCookiePort { get; private set; }				/// <summary>		/// An NSString object indicating that the cookie should be transmitted only over secure channels.		/// </summary>		[iOSVersion(2)]		public string NSHTTPCookieSecure { get; private set; }				/// <summary>		/// An NSString object containing the value of the cookie.		/// </summary>		[iOSVersion(2)]		public string NSHTTPCookieValue { get; private set; }				/// <summary>		/// An NSString object that specifies the version of the cookie.		/// </summary>		[iOSVersion(2)]		public string NSHTTPCookieVersion { get; private set; }	}}