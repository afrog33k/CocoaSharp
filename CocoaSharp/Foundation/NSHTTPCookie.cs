using ObjectiveC;using System;using SharpSwift.Attributes;using System.Collections.Generic;namespace Foundation{    /// <summary>    /// An NSHTTPCookie object represents an HTTP cookie. It is an immutable object, initialized from a dictionary containing the cookie attributes.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSHTTPCookie_Class/index.html#//apple_ref/occ/cl/NSHTTPCookie"/>    [iOSVersion(2)]    [Export("")]    public class NSHTTPCookie : NSObject//, AnyObject, CVarArgType, Equatable, Hashable, NSObjectProtocol, Printable    {        public NSHTTPCookie() { }        /// <summary>        /// Returns an array of NSHTTPCookie objects corresponding to the provided response header fields for the provided URL.        /// </summary>        /// <param name="headerFields">The header fields used to create the NSHTTPCookie objects.</param>        /// <param name="forURL">The URL associated with the created cookies.</param>        [iOSVersion(2)]        [Export("cookiesWithResponseHeaderFields")]        public static AnyObject[] CookiesWithResponseHeaderFields(Dictionary<NSObject, AnyObject> headerFields, NSURL forURL) { return default(AnyObject[]); }                /// <summary>        /// Returns a dictionary of header fields corresponding to a provided array of cookies.        /// </summary>        /// <param name="cookies">The cookies from which the header fields are created.</param>        [iOSVersion(2)]        [Export("requestHeaderFieldsWithCookies")]        public static Dictionary<NSObject, AnyObject> RequestHeaderFieldsWithCookies(AnyObject[] cookies) { return default(Dictionary<NSObject, AnyObject>); }                /// <summary>        /// The receiver&#39;s comment string. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("comment")]        [Optional]        public string Comment { get; private set; }                /// <summary>        /// The receiver’s comment URL. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("commentURL")]        [Optional]        public NSURL CommentURL { get; private set; }                /// <summary>        /// The domain of the receiver’s cookie. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("domain")]        public string Domain { get; private set; }                /// <summary>        /// The receiver’s expiration date. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("expiresDate")]        [Unwrapped]        public NSDate ExpiresDate { get; private set; }                /// <summary>        /// A boolean value that indicates whether the receiver should only be sent to HTTP servers per RFC 2965. (read-only)        /// </summary>        [iOSVersion(8)]        public bool HTTPOnly { get; private set; }                /// <summary>        /// A boolean value that indicates whether this cookie should only be sent over secure channels. (read-only)        /// </summary>        [iOSVersion(8)]        [Export("secure")]        public bool Secure { get; private set; }                /// <summary>        /// A boolean value that indicates whether the receiver should be discarded at the end of the session (regardless of expiration date). (read-only)        /// </summary>        [iOSVersion(8)]        [Export("sessionOnly")]        public bool SessionOnly { get; private set; }                /// <summary>        /// The receiver’s name. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("name")]        public string Name { get; private set; }                /// <summary>        /// The receiver’s path. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("path")]        [Optional]        public string Path { get; private set; }                /// <summary>        /// The receiver&#39;s port list. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("portList")]        public AnyObject[] PortList { get; private set; }                /// <summary>        /// The receiver’s cookie properties. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("properties")]        public Dictionary<NSObject, AnyObject> Properties { get; private set; }                /// <summary>        /// The receiver’s value. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("value")]        [Optional]        public string Value { get; private set; }                /// <summary>        /// The receiver’s version. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("version")]        public int Version { get; private set; }    }}