using ObjectiveC;using System;using SharpSwift.Attributes;using System.Collections.Generic;using Foundation;using CoreGraphics;namespace UIKit{    /// <summary>    /// An instance of the UIButton class  implements a button on the touch screen. A button intercepts touch events and sends an action message to a target object when tapped. Methods for setting the target and action are inherited from UIControl. This class provides methods for setting the title, image, and other appearance properties of a button. By using these accessors, you can specify a different appearance for each button state.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIButton_Class/index.html#//apple_ref/occ/cl/UIButton"/>    [iOSVersion(2)]    public class UIButton : UIControl//, AnyObject, NSCoding, NSObjectProtocol, Reflectable, UIAccessibilityIdentification, UIAppearance, UIAppearanceContainer, UICoordinateSpace, UIDynamicItem, UITraitEnvironment    {        /// <summary>        /// Creates and returns a new button of the specified type.        /// </summary>        /// <param name="buttonType">The button type. See UIButtonType for the possible values.</param>        [iOSVersion(2)]        [Export("buttonWithType")]        public static AnyObject ButtonWithType(UIButtonType buttonType) { return default(AnyObject); }                /// <summary>        /// Returns the title associated with the specified state.        /// </summary>        /// <param name="state">The state that uses the title. The possible values are described in UIControlState.</param>        [iOSVersion(2)]        [Export("titleForState")]        public string TitleForState(UIControlState state) { return default(string); }                /// <summary>        /// Sets the title to use for the specified state.        /// </summary>        /// <param name="title">The title to use for the specified state.</param>        /// <param name="forState">The state that uses the specified title. The possible values are described in UIControlState.</param>        [iOSVersion(2)]        [Export("setTitle")]        public void SetTitle(string title, UIControlState forState) {  }                /// <summary>        /// Returns the styled title associated with the specified state.        /// </summary>        /// <param name="state">The state that uses the styled title. The possible values are described in UIControlState.</param>        [iOSVersion(6)]        [Export("attributedTitleForState")]        public NSAttributedString AttributedTitleForState(UIControlState state) { return default(NSAttributedString); }                /// <summary>        /// Sets the styled title to use for the specified state.        /// </summary>        /// <param name="title">The styled text string so use for the title.</param>        /// <param name="forState">The state that uses the specified title. The possible values are described in UIControlState.</param>        [iOSVersion(6)]        [Export("setAttributedTitle")]        public void SetAttributedTitle(NSAttributedString title, UIControlState forState) {  }                /// <summary>        /// Returns the title color used for a state.        /// </summary>        /// <param name="state">The state that uses the title color. The possible values are described in UIControlState.</param>        [iOSVersion(2)]        [Export("titleColorForState")]        public UIColor TitleColorForState(UIControlState state) { return default(UIColor); }                /// <summary>        /// Sets the color of the title to use for the specified state.        /// </summary>        /// <param name="color">The color of the title to use for the specified state.</param>        /// <param name="forState">The state that uses the specified color. The possible values are described in UIControlState.</param>        [iOSVersion(2)]        [Export("setTitleColor")]        public void SetTitleColor(UIColor color, UIControlState forState) {  }                /// <summary>        /// Returns the shadow color of the title used for a state.        /// </summary>        /// <param name="state">The state that uses the title shadow color. The possible values are described in UIControlState.</param>        [iOSVersion(2)]        [Export("titleShadowColorForState")]        public UIColor TitleShadowColorForState(UIControlState state) { return default(UIColor); }                /// <summary>        /// Sets the color of the title shadow to use for the specified state.        /// </summary>        /// <param name="color">The color of the title shadow to use for the specified state.</param>        /// <param name="forState">The state that uses the specified color. The possible values are described in UIControlState.</param>        [iOSVersion(2)]        [Export("setTitleShadowColor")]        public void SetTitleShadowColor(UIColor color, UIControlState forState) {  }                /// <summary>        /// Returns the background image used for a button state.        /// </summary>        /// <param name="state">The state that uses the background image. Possible values are described in UIControlState.</param>        [iOSVersion(2)]        [Export("backgroundImageForState")]        public UIImage BackgroundImageForState(UIControlState state) { return default(UIImage); }                /// <summary>        /// Returns the image used for a button state.        /// </summary>        /// <param name="state">The state that uses the image. Possible values are described in UIControlState.</param>        [iOSVersion(2)]        [Export("imageForState")]        public UIImage ImageForState(UIControlState state) { return default(UIImage); }                /// <summary>        /// Sets the background image to use for the specified button state.        /// </summary>        /// <param name="image">The background image to use for the specified state.</param>        /// <param name="forState">The state that uses the specified image. The values are described in UIControlState.</param>        [iOSVersion(2)]        [Export("setBackgroundImage")]        public void SetBackgroundImage(UIImage image, UIControlState forState) {  }                /// <summary>        /// Sets the image to use for the specified state.        /// </summary>        /// <param name="image">The image to use for the specified state.</param>        /// <param name="forState">The state that uses the specified title. The values are described in UIControlState.</param>        [iOSVersion(2)]        [Export("setImage")]        public void SetImage(UIImage image, UIControlState forState) {  }                /// <summary>        /// Returns the rectangle in which the receiver draws its background.        /// </summary>        /// <param name="bounds">The bounding rectangle of the receiver.</param>        [iOSVersion(2)]        [Export("backgroundRectForBounds")]        public CGRect BackgroundRectForBounds(CGRect bounds) { return default(CGRect); }                /// <summary>        /// Returns the rectangle in which the receiver draws its entire content.        /// </summary>        /// <param name="bounds">The bounding rectangle for the receiver.</param>        [iOSVersion(2)]        [Export("contentRectForBounds")]        public CGRect ContentRectForBounds(CGRect bounds) { return default(CGRect); }                /// <summary>        /// Returns the rectangle in which the receiver draws its title.        /// </summary>        /// <param name="contentRect">The content rectangle for the receiver.</param>        [iOSVersion(2)]        [Export("titleRectForContentRect")]        public CGRect TitleRectForContentRect(CGRect contentRect) { return default(CGRect); }                /// <summary>        /// Returns the rectangle in which the receiver draws its image.        /// </summary>        /// <param name="contentRect">The content rectangle for the receiver.</param>        [iOSVersion(2)]        [Export("imageRectForContentRect")]        public CGRect ImageRectForContentRect(CGRect contentRect) { return default(CGRect); }                /// <summary>        /// A view that displays the value of the currentTitle property for a button. (read-only)        /// </summary>        [iOSVersion(3)]        [Export("titleLabel")]        public UILabel TitleLabel { get; private set; }                /// <summary>        /// A Boolean value that determines whether the title shadow changes when the button is highlighted.        /// </summary>        [iOSVersion(2)]        [Export("reversesTitleShadowWhenHighlighted")]        public bool ReversesTitleShadowWhenHighlighted { get; set; }                /// <summary>        /// A Boolean value that determines whether the image changes when the button is highlighted.        /// </summary>        [iOSVersion(2)]        [Export("adjustsImageWhenHighlighted")]        public bool AdjustsImageWhenHighlighted { get; set; }                /// <summary>        /// A Boolean value that determines whether the image changes when the button is disabled.        /// </summary>        [iOSVersion(2)]        [Export("adjustsImageWhenDisabled")]        public bool AdjustsImageWhenDisabled { get; set; }                /// <summary>        /// A Boolean value that determines whether tapping the button causes it to glow.        /// </summary>        [iOSVersion(2)]        [Export("showsTouchWhenHighlighted")]        public bool ShowsTouchWhenHighlighted { get; set; }                /// <summary>        /// The tint color to apply to the button title and image.        /// </summary>        [iOSVersion(5)]        [Export("tintColor")]        public UIColor TintColor { get; set; }                /// <summary>        /// The inset or outset margins for the rectangle surrounding all of the button’s content.        /// </summary>        [iOSVersion(2)]        [Export("contentEdgeInsets")]        public UIEdgeInsets ContentEdgeInsets { get; set; }                /// <summary>        /// The inset or outset margins for the rectangle around the button’s title text.        /// </summary>        [iOSVersion(2)]        [Export("titleEdgeInsets")]        public UIEdgeInsets TitleEdgeInsets { get; set; }                /// <summary>        /// The inset or outset margins for the rectangle around the button’s image.        /// </summary>        [iOSVersion(2)]        [Export("imageEdgeInsets")]        public UIEdgeInsets ImageEdgeInsets { get; set; }                /// <summary>        /// The button type. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("buttonType")]        public UIButtonType ButtonType { get; private set; }                /// <summary>        /// The current title that is displayed on the button. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("currentTitle")]        public string CurrentTitle { get; private set; }                /// <summary>        /// The current styled title that is displayed on the button. (read-only)        /// </summary>        [iOSVersion(6)]        [Export("currentAttributedTitle")]        public NSAttributedString CurrentAttributedTitle { get; private set; }                /// <summary>        /// The color used to display the title. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("currentTitleColor")]        public UIColor CurrentTitleColor { get; private set; }                /// <summary>        /// The color of the title’s shadow. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("currentTitleShadowColor")]        public UIColor CurrentTitleShadowColor { get; private set; }                /// <summary>        /// The current image displayed on the button. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("currentImage")]        public UIImage CurrentImage { get; private set; }                /// <summary>        /// The current background image displayed on the button. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("currentBackgroundImage")]        public UIImage CurrentBackgroundImage { get; private set; }                /// <summary>        /// The button’s image view. (read-only)        /// </summary>        [iOSVersion(3)]        [Export("imageView")]        public UIImageView ImageView { get; private set; }    }    /// <summary>    /// Specifies the style of a button.    /// </summary>    [iOSVersion(2)]    public enum UIButtonType    {        /// <summary>        /// No button style.        /// </summary>        [iOSVersion(2)]        Custom,        /// <summary>        /// A system style button, such as those shown in navigation bars and toolbars.        /// </summary>        [iOSVersion(7)]        System,        /// <summary>        /// A detail disclosure button.        /// </summary>        [iOSVersion(2)]        DetailDisclosure,        /// <summary>        /// An information button that has a light background.        /// </summary>        [iOSVersion(2)]        InfoLight,        /// <summary>        /// An information button that has a dark background.        /// </summary>        [iOSVersion(2)]        InfoDark,        /// <summary>        /// A contact add button.        /// </summary>        [iOSVersion(2)]        ContactAdd,    }}