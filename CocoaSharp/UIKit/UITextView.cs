using CoreGraphics;
using ObjectiveC;using System;using SwiftSharp.Attributes;using Foundation;namespace UIKit{	//https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UITextView_Class/index.html#//apple_ref/occ/cl/UITextView	/// <summary>	/// The UITextView class implements the behavior for a scrollable, multiline text region. The class supports the display of text using custom style information and also supports text editing. You typically use a text view to display multiple lines of text, such as when displaying the body of a large text document.	/// </summary>	[iOSVersion(2)]	public class UITextView : UIScrollView	{		/// <summary>		/// Creates a new text view with the specified text container.		/// </summary>		/// <param name="frame">The frame rectangle of the text view.</param>		/// <param name="textContainer">The text container to use for the receiver (can be nil).</param>		/// <returns>An initialized text view.</returns>		[iOSVersion(7)]		public UITextView(CGRect frame, NSTextContainer textContainer) { }				/// <summary>		/// The text displayed by the text view.		/// </summary>		[iOSVersion(2)]		[Export("text")]		public string Text { get; set; }				/// <summary>		/// The styled text displayed by the text view.		/// </summary>		[iOSVersion(6)]		[Export("attributedText")]		public NSAttributedString AttributedText { get; set; }				/// <summary>		/// The font of the text.		/// </summary>		[iOSVersion(2)]		[Export("font")]		public UIFont Font { get; set; }				/// <summary>		/// The color of the text.		/// </summary>		[iOSVersion(2)]		[Export("textColor")]		public UIColor TextColor { get; set; }				/// <summary>		/// A Boolean value indicating whether the receiver is editable.		/// </summary>		[iOSVersion(2)]		[Export("editable")]		public bool Editable { get; set; }				/// <summary>		/// A Boolean value indicating whether the text view allows the user to edit style information.		/// </summary>		[iOSVersion(6)]		[Export("allowsEditingTextAttributes")]		public bool AllowsEditingTextAttributes { get; set; }				/// <summary>		/// The types of data converted to clickable URLs in the text view.		/// </summary>		[iOSVersion(3)]		[Export("dataDetectorTypes")]		public UIDataDetectorTypes DataDetectorTypes { get; set; }				/// <summary>		/// The technique to use for aligning the text.		/// </summary>		[iOSVersion(2)]		[Export("textAlignment")]		public NSTextAlignment TextAlignment { get; set; }				/// <summary>		/// The attributes to apply to new text being entered by the user.		/// </summary>		[iOSVersion(6)]		[Export("typingAttributes")]		public NSDictionary TypingAttributes { get; set; }				/// <summary>		/// The attributes to apply to links.		/// </summary>		[iOSVersion(7)]		[Export("linkTextAttributes")]		public NSDictionary LinkTextAttributes { get; set; }				/// <summary>		/// The inset of the text container's layout area within the text view's content area.		/// </summary>		[iOSVersion(7)]		[Export("textContainerInset")]		public UIEdgeInsets TextContainerInset { get; set; }				/// <summary>		/// The current selection range of the receiver.		/// </summary>		[iOSVersion(2)]		[Export("selectedRange")]		public NSRange SelectedRange { get; set; }				/// <summary>		/// Scrolls the receiver until the text in the specified range is visible.		/// </summary>		/// <param name="range">The range of text to scroll into view.</param>		[iOSVersion(2)]		[Export("scrollRangeToVisible")]		public void ScrollRangeToVisible(NSRange range) { }				/// <summary>		/// A Boolean value indicating whether inserting text replaces the previous contents.		/// </summary>		[iOSVersion(6)]		[Export("clearsOnInsertion")]		public bool ClearsOnInsertion { get; set; }				/// <summary>		/// A Boolean value indicating whether the receiver is selectable.		/// </summary>		[iOSVersion(7)]		[Export("selectable")]		public bool Selectable { get; set; }				/// <summary>		/// The receiver’s delegate.		/// </summary>		[iOSVersion(2)]		[Export("delegate")]		public UITextViewDelegate Delegate { get; set; }				/// <summary>		/// The custom input view to display when the text view becomes the first responder.		/// </summary>		[iOSVersion(3.2)]		[Export("inputView")]		public UIView InputView { get; set; }				/// <summary>		/// The custom accessory view to display when the text view becomes the first responder		/// </summary>		[iOSVersion(3.2)]		[Export("inputAccessoryView")]		public UIView InputAccessoryView { get; set; }				/// <summary>		/// The layout manager that lays out text for the receiver’s text container. (read-only)		/// </summary>		[iOSVersion(7)]		[Export("layoutManager")]		public NSLayoutManager LayoutManager { get; private set; }				/// <summary>		/// The text container object defining the area in which text is displayed in this text view. (read-only)		/// </summary>		[iOSVersion(7)]		[Export("textContainer")]		public NSTextContainer TextContainer { get; private set; }				/// <summary>		/// The text storage object holding the text displayed in this text view. (read-only)		/// </summary>		[iOSVersion(7)]		[Export("textStorage")]		public NSTextStorage TextStorage { get; private set; }								WHAT								WHAT								WHAT	}}