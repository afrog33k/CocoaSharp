using ObjectiveC;using System;using SharpSwift.Attributes;using System.Collections.Generic;using Foundation;using CoreGraphics;namespace UIKit{    /// <summary>    /// A UIVisualEffectView object gives you an easy way implement some complex visual effects. Depending on the desired effect, the effect may affect content layered behind the view or content added to the visual effect viewâ€™s contentView.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIVisualEffectView/index.html#//apple_ref/occ/cl/UIVisualEffectView"/>    [iOSVersion(8)]    public class UIVisualEffectView : UIView//, AnyObject, NSCoding, NSObjectProtocol, NSSecureCoding, Reflectable, UIAccessibilityIdentification, UIAppearance, UIAppearanceContainer, UICoordinateSpace, UIDynamicItem, UITraitEnvironment    {        public UIVisualEffectView() { }        /// <summary>        /// Creates a new visual effect view with the designated visual effect.        /// </summary>        /// <param name="effect">The UIVisualEffect you provide for the view. This can be a UIBlurEffect or a UIVibrancyEffect.</param>        [iOSVersion(8)]        public UIVisualEffectView(UIVisualEffect effect) { }                /// <summary>        /// A UIView object that can have a visual effect view added to it. (read-only)        /// </summary>        [iOSVersion(8)]        [Export("contentView")]        public UIView ContentView { get; private set; }                /// <summary>        /// The visual effect provided by the view. (read-only)        /// </summary>        [iOSVersion(8)]        [Export("effect")]        public UIVisualEffect Effect { get; private set; }    }}