using ObjectiveC;using System;using SwiftSharp.Attributes;using Foundation;namespace UIKit{	//https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIScreen_Class/index.html#//apple_ref/occ/cl/UIScreen	/// <summary>	/// A UIScreen object contains the bounding rectangle of the device’s entire screen. When setting up your application’s user interface, you should use the properties of this object to get the recommended frame rectangles for your application’s window.	/// </summary>	[iOSVersion(2)]	public class UIScreen : NSObject	{		/// <summary>		/// Returns the screen object representing the device’s screen.		/// </summary>		/// <returns>The screen object for the device</returns>		[iOSVersion(2)]		[Export("mainScreen")]		public static UIScreen MainScreen() { return null; }				/// <summary>		/// Returns an array containing all of the screens attached to the device.		/// </summary>		/// <returns>An array of UIScreen objects.</returns>		[iOSVersion(3.2)]		[Export("screens")]		public static AnyObject[] Screens() { return null; }				/// <summary>		/// The screen being mirrored by an external display. (read-only)		/// </summary>		[iOSVersion(4.3)]		[Export("mirroredScreen")]		public UIScreen MirroredScreen { get; private set; }				/// <summary>		/// Contains the bounding rectangle of the screen, measured in points. (read-only)		/// </summary>		[iOSVersion(2)]		[Export("bounds")]		public CGRect Bounds { get; private set; }				/// <summary>		/// The frame rectangle for the app window. (read-only)		/// </summary>		[iOSVersion(2)]		[Export("applicationFrame")]		public CGRect ApplicationFrame { get; private set; }				/// <summary>		/// Contains the native bounding rectangle of the physical screen. (read-only)		/// </summary>		[iOSVersion(8)]		[Export("nativeBounds")]		public CGRect NativeBounds { get; private set; }				/// <summary>		/// Contains the native scale factor for the physical screen. (read-only)		/// </summary>		[iOSVersion(8)]		[Export("nativeScale")]		public CGFloat NativeScale { get; private set; }				/// <summary>		/// The natural scale factor associated with the screen. (read-only)		/// </summary>		[iOSVersion(4)]		[Export("scale")]		public CGFloat Scale { get; private set; }				/// <summary>		/// The preferred display mode for the receiver. (read-only)		/// </summary>		[iOSVersion(4.3)]		[Export("preferredMode")]		public UIScreenMode PreferredMode { get; private set; }				/// <summary>		/// The display modes that can be associated with the receiver. (read-only)		/// </summary>		[iOSVersion(3.2)]		[Export("availableModes")]		public AnyObject[] AvailableModes { get; private set; }				/// <summary>		/// The current screen mode associated with the receiver.		/// </summary>		[iOSVersion(3.2)]		[Export("currentMode")]		public UIScreenMode CurrentMode { get; set; }				/// <summary>		/// Returns a display link object for the current screen.		/// </summary>		/// <param name="target">An object to be notified when the screen should be updated.</param>		/// <param name="selector">The method of target to call. This selector must have the following signature:                Swift         func selector(sender: CADisplayLink) { }                   Objective-C         - (void)selector:(CADisplayLink *)sender;</param>		/// <returns>A newly constructed display link object.</returns>		[iOSVersion(4)]		[Export("displayLinkWithTarget")]		public CADisplayLink DisplayLinkWithTarget(AnyObject target, Selector selector) { return null; }				/// <summary>		/// The brightness level of the screen.		/// </summary>		[iOSVersion(5)]		[Export("brightness")]		public CGFloat Brightness { get; set; }				/// <summary>		/// A Boolean value that indicates whether the screen may be dimmed lower than the hardware is normally capable of by emulating it in software.		/// </summary>		[iOSVersion(5)]		[Export("wantsSoftwareDimming")]		public bool WantsSoftwareDimming { get; set; }				/// <summary>		/// For an external screen, this property sets the desired technique to compensate for overscan.		/// </summary>		[iOSVersion(5)]		[Export("overscanCompensation")]		public UIScreenOverscanCompensation OverscanCompensation { get; set; }				/// <summary>		/// Returns a snapshot view based on the current screen contents.		/// </summary>		/// <param name="afterUpdates">A Boolean that indicates whether the snapshot should be taken after recent changes have been incorporated. Specify the value false if you want to capture the screen in its current state, which might not include recent changes.</param>		/// <returns>A new view object containing a snapshot of the screen’s rendered contents.</returns>		[iOSVersion(7)]		[Export("snapshotViewAfterScreenUpdates")]		public UIView SnapshotViewAfterScreenUpdates(bool afterUpdates) { return null; }				/// <summary>		/// Describes different techniques for compensating for pixel loss at the edge of the screen.		/// </summary>		public enum UIScreenOverscanCompensation		{			/// <summary>			/// The final composited framebuffer for the screen is scaled so that all pixels lie in the area visible on the screen.			/// </summary>			[iOSVersion(5)]			Scale,						/// <summary>			/// The screen bounds are reduced in size so that all pixels in the framebuffer are visible on the screen.			/// </summary>			[iOSVersion(5)]			InsetBounds,						/// <summary>			/// The application frame is reduced in size to compensate for overscan. Content drawn outside the application frame may be clipped.			/// </summary>			[iOSVersion(5)]			InsetApplicationFrame,		}						WHAT								WHAT								WHAT								WHAT	}}