using ObjectiveC;using System;using SwiftSharp.Attributes;using System.Collections.Generic;namespace UIKit{    /// <summary>    /// A UIScreen object defines the properties associated with a hardware-based display. iOS devices have a main screen and zero or more attached screens. Use this class to obtain screen objects for each display attached to the device. Each screen object defines the bounds rectangle for the associated display and other interesting properties such as its brightness.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIScreen_Class/index.html#//apple_ref/occ/cl/UIScreen"/>    [iOSVersion(2)]    public class UIScreen : NSObject//, AnyObject, NSObjectProtocol, UITraitEnvironment    {        /// <summary>        /// Returns the screen object representing the deviceâ€™s screen.        /// </summary>        [iOSVersion(2)]        [Export("mainScreen")]        public static UIScreen MainScreen() { return default(UIScreen); }                /// <summary>        /// Returns an array containing all of the screens attached to the device.        /// </summary>        [iOSVersion(3.2)]        [Export("screens")]        public static AnyObject[] Screens() { return default(AnyObject[]); }                /// <summary>        /// Returns a display link object for the current screen.        /// </summary>        /// <param name="target">An object to be notified when the screen should be updated.</param>        /// <param name="selector">The method of target to call. This selector must have the following signature:        ///           Swift        ///           func selector(sender: CADisplayLink) { }        ///           Objective-C        ///           - (void)selector:(CADisplayLink *)sender;</param>        [iOSVersion(4)]        [Export("displayLinkWithTarget")]        public CADisplayLink DisplayLinkWithTarget(AnyObject target, Selector selector) { return default(CADisplayLink); }                /// <summary>        /// Returns a snapshot view based on the current screen contents.        /// </summary>        /// <param name="afterUpdates">A Boolean that indicates whether the snapshot should be taken after recent changes have been incorporated. Specify the value false if you want to capture the screen in its current state, which might not include recent changes.</param>        [iOSVersion(7)]        [Export("snapshotViewAfterScreenUpdates")]        public UIView SnapshotViewAfterScreenUpdates(bool afterUpdates) { return default(UIView); }                /// <summary>        /// The screen being mirrored by an external display. (read-only)        /// </summary>        [iOSVersion(4.3)]        [Export("mirroredScreen")]        public UIScreen MirroredScreen { get; private set; }                /// <summary>        /// The current coordinate space of the screen. (read-only)        /// </summary>        [iOSVersion(8)]        [Export("coordinateSpace")]        public UICoordinateSpace CoordinateSpace { get; private set; }                /// <summary>        /// The fixed coordinate space of the screen. (read-only)        /// </summary>        [iOSVersion(8)]        [Export("fixedCoordinateSpace")]        public UICoordinateSpace FixedCoordinateSpace { get; private set; }                /// <summary>        /// The bounding rectangle of the screen, measured in points. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("bounds")]        public CGRect Bounds { get; private set; }                /// <summary>        /// The frame rectangle for the app window, measured in points. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("applicationFrame")]        public CGRect ApplicationFrame { get; private set; }                /// <summary>        /// The bounding rectangle of the physical screen, measured in pixels. (read-only)        /// </summary>        [iOSVersion(8)]        [Export("nativeBounds")]        public CGRect NativeBounds { get; private set; }                /// <summary>        /// The native scale factor for the physical screen. (read-only)        /// </summary>        [iOSVersion(8)]        [Export("nativeScale")]        public CGFloat NativeScale { get; private set; }                /// <summary>        /// The natural scale factor associated with the screen. (read-only)        /// </summary>        [iOSVersion(4)]        [Export("scale")]        public CGFloat Scale { get; private set; }                /// <summary>        /// The preferred display mode for the screen. (read-only)        /// </summary>        [iOSVersion(4.3)]        [Export("preferredMode")]        public UIScreenMode PreferredMode { get; private set; }                /// <summary>        /// The display modes that can be associated with the screen. (read-only)        /// </summary>        [iOSVersion(3.2)]        [Export("availableModes")]        public AnyObject[] AvailableModes { get; private set; }                /// <summary>        /// The current screen mode associated with the screen.        /// </summary>        [iOSVersion(3.2)]        [Export("currentMode")]        public UIScreenMode CurrentMode { get; set; }                /// <summary>        /// The brightness level of the screen.        /// </summary>        [iOSVersion(5)]        [Export("brightness")]        public CGFloat Brightness { get; set; }                /// <summary>        /// A Boolean value that indicates whether the screen may be dimmed lower than the hardware is normally capable of by emulating it in software.        /// </summary>        [iOSVersion(5)]        [Export("wantsSoftwareDimming")]        public bool WantsSoftwareDimming { get; set; }                /// <summary>        /// For an external screen, this property sets the desired technique to compensate for overscan.        /// </summary>        [iOSVersion(5)]        [Export("overscanCompensation")]        public UIScreenOverscanCompensation OverscanCompensation { get; set; }    }    /// <summary>    /// Describes different techniques for compensating for pixel loss at the edge of the screen.    /// </summary>    [iOSVersion(5)]    public enum UIScreenOverscanCompensation    {        /// <summary>        /// The final composited framebuffer for the screen is scaled so that all pixels lie in the area visible on the screen.        /// </summary>        [iOSVersion(5)]        Scale,        /// <summary>        /// The screen bounds are reduced in size so that all pixels in the framebuffer are visible on the screen.        /// </summary>        [iOSVersion(5)]        InsetBounds,        /// <summary>        /// The application frame is reduced in size to compensate for overscan. Content drawn outside the application frame may be clipped.        /// </summary>        [iOSVersion(5)]        InsetApplicationFrame,    }    /// <summary>    /// Connection notifications are not sent for screens that are already present when the application is launched. The application can instead use the screens method to get the current set of screens at launch time.    /// </summary>    [iOSVersion(3.2)]    public class UIScreenDidConnectNotification : NSNotification    {        public UIScreenDidConnectNotification() : base("", null) { }    }    /// <summary>    ///     /// </summary>    [iOSVersion(3.2)]    public class UIScreenDidDisconnectNotification : NSNotification    {        public UIScreenDidDisconnectNotification() : base("", null) { }    }    /// <summary>    /// Clients can use this notification to detect changes in the screen resolution.    /// </summary>    [iOSVersion(3.2)]    public class UIScreenModeDidChangeNotification : NSNotification    {        public UIScreenModeDidChangeNotification() : base("", null) { }    }    /// <summary>    ///     /// </summary>    [iOSVersion(5)]    public class UIScreenBrightnessDidChangeNotification : NSNotification    {        public UIScreenBrightnessDidChangeNotification() : base("", null) { }    }}