using ObjectiveC;using System;using SwiftSharp.Attributes;using Foundation;namespace UIKit{	//https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIInputViewController_Class/index.html#//apple_ref/occ/cl/UIInputViewController	/// <summary>	/// To create a custom keyboard, start by subclassing the UIInputViewController class. Add your keyboardâ€™s user interface to the inputView property of your subclass.	/// </summary>	[iOSVersion(8)]	public class UIInputViewController : UIViewController	{		/// <summary>		/// The primary view for the input view controller.		/// </summary>		[iOSVersion(8)]		[Export("inputView")]		public UIInputView InputView { get; set; }				/// <summary>		/// Switches to the next keyboard in the list of user-enabled keyboards.		/// </summary>		[iOSVersion(8)]		[Export("advanceToNextInputMode")]		public void AdvanceToNextInputMode() { }				/// <summary>		/// Dismisses the custom keyboard from from the screen.		/// </summary>		[iOSVersion(8)]		[Export("dismissKeyboard")]		public void DismissKeyboard() { }				/// <summary>		/// A proxy to the text input object that the custom keyboard is interacting with. (read-only)		/// </summary>		[iOSVersion(8)]		[Export("textDocumentProxy")]		public NSObject TextDocumentProxy { get; private set; }				/// <summary>		/// Obtains a supplementary lexicon of term pairs for use in a custom keyboard.		/// </summary>		/// <param name="completionHandler">Code that you write to make use of the returned UILexicon object.</param>		[iOSVersion(8)]		[Export("requestSupplementaryLexiconWithCompletion")]		public void RequestSupplementaryLexiconWithCompletion(Action<UILexicon> completionHandler) { }	}}