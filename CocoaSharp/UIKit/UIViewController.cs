using ObjectiveC;using System;using SwiftSharp.Attributes;using Foundation;namespace UIKit{	//https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIViewController_Class/index.html#//apple_ref/occ/cl/UIViewController	/// <summary>	/// The UIViewController class provides the fundamental view-management model for all iOS apps. You rarely instantiate UIViewController objects directly. Instead, you instantiate subclasses of the UIViewController class based on the specific task each subclass performs.	/// </summary>	[iOSVersion(2)]	public class UIViewController : UIResponder	{		/// <summary>		/// Returns a newly initialized view controller with the nib file in the specified bundle.		/// </summary>		/// <param name="nibName">The name of the nib file to associate with the view controller. The nib file name should not contain any leading path information. If you specify nil, the nibName property is set to nil.</param>		/// <param name="bundle">The bundle in which to search for the nib file. This method looks for the nib file in the bundle's language-specific project directories first, followed by the Resources directory. If this parameter is nil, the method uses the heuristics described below to locate the nib file.</param>		/// <returns>A newly initialized UIViewController object.</returns>		[iOSVersion(2)]		public UIViewController(string nibName, NSBundle bundle) { }				/// <summary>		/// Return the name of the receiver's nib file, if one was specified. (read-only)		/// </summary>		[Export("nibName")]		public string NibName { get; private set; }				/// <summary>		/// Return the name of the receiver's nib bundle if it exists. (read-only)		/// </summary>		[iOSVersion(2)]		[Export("nibBundle")]		public NSBundle NibBundle { get; private set; }				/// <summary>		/// The storyboard from which the view controller originated. (read-only)		/// </summary>		[iOSVersion(5)]		[Export("storyboard")]		public UIStoryboard Storyboard { get; private set; }				/// <summary>		/// Determines whether the segue with the specified identifier should be triggered.		/// </summary>		/// <param name="identifier">The string that identifies the triggered segue.   In interface Builder, you can associate an identifier string with each segue using the inspector. This string is used only for locating the segue inside the storyboard.</param>		/// <param name="sender">The object that initiated the segue. This object is made available for informational purposes during the actual segue.</param>		/// <returns>This method should return true if the segue should be executed, false if it should be ignored.</returns>		[iOSVersion(6)]		[Export("shouldPerformSegueWithIdentifier")]		public bool ShouldPerformSegueWithIdentifier(string identifier, AnyObject sender) { return false; }				/// <summary>		/// Notifies the view controller that a segue is about to be performed.		/// </summary>		/// <param name="segue">The segue object containing information about the view controllers involved in the segue.</param>		/// <param name="sender">The object that initiated the segue. You might use this parameter to perform different actions based on which control (or other object) initiated the segue.</param>		[iOSVersion(5)]		[Export("prepareForSegue")]		public void PrepareForSegue(UIStoryboardSegue segue, AnyObject sender) { }				/// <summary>		/// Initiates the segue with the specified identifier from the view controller's storyboard file.		/// </summary>		/// <param name="identifier">The string that identifies the segue inside the storyboard file.   In interface Builder, you can associate an identifier string with each segue using the inspector. This string is used only for locating the segue inside the storyboard. This is the string that you pass to this parameter.   This method throws an exception if there is no segue with the specified identifier.</param>		/// <param name="sender">The object that you want to use to initiate the segue. This object is made available for informational purposes during the actual segue.</param>		[iOSVersion(5)]		[Export("performSegueWithIdentifier")]		public void PerformSegueWithIdentifier(string identifier, AnyObject sender) { }				/// <summary>		/// Called on a view controller to determine whether it wants to respond to an unwind action.		/// </summary>		/// <param name="action">The unwind action to invoke on your view controller.</param>		/// <param name="fromViewController">The view controller that initiated the unwind action.</param>		/// <param name="withSender">The object that triggered the action.</param>		/// <returns>true if the view controller wants to handle the unwind action, otherwise false.</returns>		[Export("canPerformUnwindSegueAction")]		public bool CanPerformUnwindSegueAction(Selector action, UIViewController fromViewController, AnyObject withSender) { return false; }				/// <summary>		/// Called when an unwind segue action needs to transition between two view controllers.		/// </summary>		/// <param name="toViewController">The target view controller.</param>		/// <param name="fromViewController">The view controller initiating the unwind action.</param>		/// <param name="identifier">An identifier for the segue.</param>		/// <returns>A custom segue object that, when invoked, transitions between the two view controllers.</returns>		[iOSVersion(6)]		[Export("segueForUnwindingToViewController")]		public UIStoryboardSegue SegueForUnwindingToViewController(UIViewController toViewController, UIViewController fromViewController, string identifier) { return null; }				/// <summary>		/// Called when an unwind segue action wants to search a container's children for a view controller to handle the unwind action.		/// </summary>		/// <param name="action">The action that triggered the unwind action.</param>		/// <param name="fromViewController">The view controller that is the source of the unwinding action.</param>		/// <param name="withSender">The object that initiated the action.</param>		/// <returns>The view controller that wants to handle the unwind action.</returns>		[iOSVersion(6)]		[Export("viewControllerForUnwindSegueAction")]		public UIViewController ViewControllerForUnwindSegueAction(Selector action, UIViewController fromViewController, AnyObject withSender) { return null; }				/// <summary>		/// The view that the controller manages.		/// </summary>		[iOSVersion(2)]		[Export("view")]		public UIView View { get; set; }				/// <summary>		/// Returns a Boolean value indicating whether the view is currently loaded into memory.		/// </summary>		/// <returns>A Boolean value indicating whether the view is currently loaded into memory.</returns>		[iOSVersion(3)]		[Export("isViewLoaded")]		public bool IsViewLoaded() { return false; }				/// <summary>		/// Creates the view that the controller manages.		/// </summary>		[iOSVersion(2)]		[Export("loadView")]		public void LoadView() { }				/// <summary>		/// Called after the controller's view is loaded into memory.		/// </summary>		[iOSVersion(2)]		[Export("viewDidLoad")]		public void ViewDidLoad() { }				/// <summary>		/// A localized string that represents the view this controller manages.		/// </summary>		[iOSVersion(2)]		[Export("title")]		public string Title { get; set; }				/// <summary>		/// The presentation style for modally presented view controllers.		/// </summary>		[iOSVersion(3.2)]		[Export("modalPresentationStyle")]		public UIModalPresentationStyle ModalPresentationStyle { get; set; }				/// <summary>		/// The transition style to use when presenting the receiver.		/// </summary>		[iOSVersion(3)]		[Export("modalTransitionStyle")]		public UIModalTransitionStyle ModalTransitionStyle { get; set; }				/// <summary>		/// Presents a view controller modally.		/// </summary>		/// <param name="viewControllerToPresent">The view controller to display over the current view controller’s content.</param>		/// <param name="animated">Pass true to animate the presentation; otherwise, pass false.</param>		/// <param name="completion">The block to execute after the presentation finishes. This block has no return value and takes no parameters. You may specify nil for this parameter.</param>		[iOSVersion(5)]		[Export("presentViewController")]		public void PresentViewController(UIViewController viewControllerToPresent, bool animated, Action<> completion) { }				/// <summary>		/// Dismisses the view controller that was presented modally by the receiver.		/// </summary>		/// <param name="flag">Pass true to animate the transition.</param>		/// <param name="completion">The block to execute after the view controller is dismissed. This block has no return value and takes no parameters. You may specify nil for this parameter.</param>		[iOSVersion(5)]		[Export("dismissViewControllerAnimated")]		public void DismissViewControllerAnimated(bool flag, Action<> completion) { }				/// <summary>		/// Presents a view controller based on the current size class of the environment.		/// </summary>		/// <param name="vc">The current view controller.</param>		/// <param name="sender">The object being acted upon.</param>		[iOSVersion(8)]		[Export("showViewController")]		public void ShowViewController(UIViewController vc, AnyObject sender) { }				/// <summary>		/// Presents a view controller in a ‘detail’ context based on the size class of the environment.		/// </summary>		/// <param name="vc">The current view controller.</param>		/// <param name="sender">The object being acted upon.</param>		[iOSVersion(8)]		[Export("showDetailViewController")]		public void ShowDetailViewController(UIViewController vc, AnyObject sender) { }				/// <summary>		/// A Boolean value that indicates whether this view controller's view is covered when the view controller or one of its descendants presents a view controller.		/// </summary>		[iOSVersion(5)]		[Export("definesPresentationContext")]		public bool DefinesPresentationContext { get; set; }				/// <summary>		/// The delegate object that provides transition animator and interactive controller objects.		/// </summary>		[iOSVersion(7)]		[Export("transitioningDelegate")]		public UIViewControllerTransitioningDelegate TransitioningDelegate { get; set; }				/// <summary>		/// Returns the active transition coordinator object.		/// </summary>		/// <returns>The transition coordinator object associated with a currently active transition or nil if no transition is in progress.</returns>		[iOSVersion(7)]		[Export("transitionCoordinator")]		public UIViewControllerTransitionCoordinator TransitionCoordinator() { return null; }				/// <summary>		/// A Boolean value that indicates whether the view controller defines the transition style for view controllers it presents.		/// </summary>		[iOSVersion(5)]		[Export("providesPresentationContextTransitionStyle")]		public bool ProvidesPresentationContextTransitionStyle { get; set; }				/// <summary>		/// Returns a Boolean indicating whether the current input view is dismissed automatically when changing controls.		/// </summary>		/// <returns>true to prevent the dismissal of the input view or false if the input view may be dismissed.</returns>		[iOSVersion(4.3)]		[Export("disablesAutomaticKeyboardDismissal")]		public bool DisablesAutomaticKeyboardDismissal() { return false; }				/// <summary>		/// Returns the view controller that responds the the action.		/// </summary>		/// <param name="action">The requested action.</param>		/// <param name="sender">The object sending the request.</param>		/// <returns>The view controller that responds to the action.</returns>		[iOSVersion(8)]		[Export("targetViewControllerForAction")]		public UIViewController TargetViewControllerForAction(Selector action, AnyObject sender) { return null; }				/// <summary>		/// Sent to the view controller when the app receives a memory warning.		/// </summary>		[iOSVersion(2)]		[Export("didReceiveMemoryWarning")]		public void DidReceiveMemoryWarning() { }				/// <summary>		/// Notifies the view controller that its view is about to be added to a view hierarchy.		/// </summary>		/// <param name="animated">If true, the view is being added to the window using an animation.</param>		[iOSVersion(2)]		[Export("viewWillAppear")]		public void ViewWillAppear(bool animated) { }				/// <summary>		/// Notifies the view controller that its view was added to a view hierarchy.		/// </summary>		/// <param name="animated">If true, the view was added to the window using an animation.</param>		[iOSVersion(2)]		[Export("viewDidAppear")]		public void ViewDidAppear(bool animated) { }				/// <summary>		/// Notifies the view controller that its view is about to be removed from a view hierarchy.		/// </summary>		/// <param name="animated">If true, the disappearance of the view is being animated.</param>		[iOSVersion(2)]		[Export("viewWillDisappear")]		public void ViewWillDisappear(bool animated) { }				/// <summary>		/// Notifies the view controller that its view was removed from a view hierarchy.		/// </summary>		/// <param name="animated">If true, the disappearance of the view was animated.</param>		[iOSVersion(2)]		[Export("viewDidDisappear")]		public void ViewDidDisappear(bool animated) { }				/// <summary>		/// Called to notify the view controller that its view is about to layout its subviews.		/// </summary>		[iOSVersion(5)]		[Export("viewWillLayoutSubviews")]		public void ViewWillLayoutSubviews() { }				/// <summary>		/// Called to notify the view controller that its view has just laid out its subviews.		/// </summary>		[iOSVersion(5)]		[Export("viewDidLayoutSubviews")]		public void ViewDidLayoutSubviews() { }				/// <summary>		/// Called when the view controller's view needs to update its constraints.		/// </summary>		[iOSVersion(6)]		[Export("updateViewConstraints")]		public void UpdateViewConstraints() { }				/// <summary>		/// Specifies whether or not the view controller should automatically adjust its scroll view insets.		/// </summary>		[iOSVersion(7)]		[Export("automaticallyAdjustsScrollViewInsets")]		public bool AutomaticallyAdjustsScrollViewInsets { get; set; }				/// <summary>		/// The preferred size for the view controller’s view.		/// </summary>		[iOSVersion(7)]		[Export("preferredContentSize")]		public CGSize PreferredContentSize { get; set; }				/// <summary>		/// The extended edges to use for the layout.		/// </summary>		[iOSVersion(7)]		[Export("edgesForExtendedLayout")]		public UIRectEdge EdgesForExtendedLayout { get; set; }				/// <summary>		/// A Boolean value indicating whether or not the extended layout includes opaque bars.		/// </summary>		[iOSVersion(7)]		[Export("extendedLayoutIncludesOpaqueBars")]		public bool ExtendedLayoutIncludesOpaqueBars { get; set; }				/// <summary>		/// Indicates the lowest vertical extent for your onscreen content, for use with Auto Layout constraints. (read-only)		/// </summary>		[iOSVersion(7)]		[Export("bottomLayoutGuide")]		public UILayoutSupport BottomLayoutGuide { get; private set; }				/// <summary>		/// Indicates the highest vertical extent for your onscreen content, for use with Auto Layout constraints. (read-only)		/// </summary>		[iOSVersion(7)]		[Export("topLayoutGuide")]		public UILayoutSupport TopLayoutGuide { get; private set; }				/// <summary>		/// Indicates the left most extent for your onscreen content, for use with Auto Layout constraints. (read-only)		/// </summary>		[iOSVersion(8)]		[Export("leftLayoutGuide")]		public UILayoutSupport LeftLayoutGuide { get; private set; }				/// <summary>		/// Indicates the right most extent for your onscreen content, for use with Auto Layout constraints. (read-only)		/// </summary>		[iOSVersion(8)]		[Export("rightLayoutGuide")]		public UILayoutSupport RightLayoutGuide { get; private set; }				/// <summary>		/// Returns a Boolean value that indicates that the view controller is in the process of being removed from its parent.		/// </summary>		/// <returns>true if the view controller is disappearing because it was removed from a container view controller, otherwise false.</returns>		[iOSVersion(5)]		[Export("isMovingFromParentViewController")]		public bool IsMovingFromParentViewController() { return false; }				/// <summary>		/// Returns a Boolean value that indicates that the view controller is in the process of being added to a parent.		/// </summary>		/// <returns>true if the view controller is appearing because it was added as a child of a container view controller, otherwise false.</returns>		[iOSVersion(5)]		[Export("isMovingToParentViewController")]		public bool IsMovingToParentViewController() { return false; }				/// <summary>		/// Returns a Boolean value that indicates whether the view controller is in the process of being presented by one of its ancestors.		/// </summary>		/// <returns>true if the view controller is appearing because it was presented by another view controller, otherwise false.</returns>		[iOSVersion(5)]		[Export("isBeingPresented")]		public bool IsBeingPresented() { return false; }				/// <summary>		/// Returns a Boolean value that indicates whether the view controller is in the process of being dismissed by one of its ancestors.		/// </summary>		/// <returns>true if the view controller was previously presented and is in the process of being dismissed by one of its ancestors, otherwise false.</returns>		[iOSVersion(5)]		[Export("isBeingDismissed")]		public bool IsBeingDismissed() { return false; }				/// <summary>		/// Returns a Boolean value indicating whether the view controller's contents should auto rotate.		/// </summary>		/// <returns>true if the content should rotate, otherwise false. Default value is true.</returns>		[iOSVersion(6)]		[Export("shouldAutorotate")]		public bool ShouldAutorotate() { return false; }				/// <summary>		/// Returns all of the interface orientations that the view controller supports.		/// </summary>		/// <returns>A bit mask specifying which orientations are supported. See UIinterfaceOrientationMask for valid bit-mask values. The value returned by this method must not be 0.</returns>		[iOSVersion(6)]		[Export("supportedinterfaceOrientations")]		public int SupportedinterfaceOrientations() { return 0; }				/// <summary>		/// Returns the interface orientation to use when presenting the view controller.		/// </summary>		/// <returns>The interface orientation with which to present the view controller.</returns>		[iOSVersion(6)]		[Export("preferredinterfaceOrientationForPresentation")]		public UIinterfaceOrientation PreferredinterfaceOrientationForPresentation() { return null; }				/// <summary>		/// Attempts to rotate all windows to the orientation of the device.		/// </summary>		[iOSVersion(5)]		[Export("attemptRotationToDeviceOrientation")]		public static void AttemptRotationToDeviceOrientation() { }				/// <summary>		/// Called when a split view controller transitions to a compact-width size class.		/// </summary>		/// <param name="secondaryViewController">The secondary view controller associated with the split view controller.</param>		/// <param name="forSplitViewController">The current split view controller.</param>		[iOSVersion(8)]		[Export("collapseSecondaryViewController")]		public void CollapseSecondaryViewController(UIViewController secondaryViewController, UISplitViewController forSplitViewController) { }				/// <summary>		/// Called when a split view controller transitions to a regular-width size class.		/// </summary>		/// <param name="splitViewController">The current split view controller.</param>		/// <returns>The designated secondary view controller for the split view controller.</returns>		[iOSVersion(8)]		[Export("separateSecondaryViewControllerForSplitViewController")]		public UIViewController SeparateSecondaryViewControllerForSplitViewController(UISplitViewController splitViewController) { return null; }				/// <summary>		/// An array of the view controllers that are the children of the receiver in the view controller hierarchy. (read-only)		/// </summary>		[iOSVersion(5)]		[Export("childViewControllers")]		public AnyObject[] ChildViewControllers { get; private set; }				/// <summary>		/// Adds the given view controller as a child.		/// </summary>		/// <param name="childController">The view controller to be added as a child.</param>		[iOSVersion(5)]		[Export("addChildViewController")]		public void AddChildViewController(UIViewController childController) { }				/// <summary>		/// Removes the receiver from its parent in the view controller hierarchy.		/// </summary>		[iOSVersion(5)]		[Export("removeFromParentViewController")]		public void RemoveFromParentViewController() { }				/// <summary>		/// Transitions between two of the view controller's child view controllers.		/// </summary>		/// <param name="fromViewController">A view controller whose view is currently visible in the parent's view hierarchy.</param>		/// <param name="toViewController">A child view controller whose view is not currently in the view hierarchy.</param>		/// <param name="duration">The total duration of the animations, in seconds. If you pass zero, the changes are made without animating them.</param>		/// <param name="options">A mask of options indicating how you want to perform the animations. For a list of valid constants, see UIViewAnimationOptions.</param>		/// <param name="animations">A block object containing the changes to commit to the views. Here you programmatically change any animatable properties of the views in your view hierarchy. This block takes no parameters and has no return value. This parameter must not be NULL.</param>		/// <param name="completion">A block to be called when the animation completes.   The block takes the following parameters:           finished              true if the animation finished; false if it was skipped.</param>		[iOSVersion(5)]		[Export("transitionFromViewController")]		public void TransitionFromViewController(UIViewController fromViewController, UIViewController toViewController, NSTimeinterval duration, UIViewAnimationOptions options, Action<> animations, Action<Bool> completion) { }				/// <summary>		/// Returns a Boolean value indicating whether appearance methods are forwarded to child view controllers.		/// </summary>		/// <returns>true if appearance methods are forwarded or false if they are not.</returns>		[iOSVersion(6)]		[Export("shouldAutomaticallyForwardAppearanceMethods")]		public bool ShouldAutomaticallyForwardAppearanceMethods() { return false; }				/// <summary>		/// Tells a child controller its appearance is about to change.		/// </summary>		/// <param name="isAppearing">true if the child view controller's view is about to be added to the view hierarchy, false if it is being removed.</param>		/// <param name="animated">If true, the transition is being animated.</param>		[iOSVersion(5)]		[Export("beginAppearanceTransition")]		public void BeginAppearanceTransition(bool isAppearing, bool animated) { }				/// <summary>		/// Tells a child controller its appearance has changed.		/// </summary>		[iOSVersion(5)]		[Export("endAppearanceTransition")]		public void EndAppearanceTransition() { }				/// <summary>		/// Changes the traits assigned to the specified child view controller.		/// </summary>		/// <param name="collection">The new traits to apply to the child view controller.</param>		/// <param name="forChildViewController">The child view controller who’s trait collection is to be changed.</param>		[iOSVersion(8)]		[Export("setOverrideTraitCollection")]		public void SetOverrideTraitCollection(UITraitCollection collection, UIViewController forChildViewController) { }				/// <summary>		/// Retrieves the trait collection for a child view controller.		/// </summary>		/// <param name="childViewController">The view controller who’s trait collection is to be returned.</param>		/// <returns>The trait collection for the designated view controller.</returns>		[iOSVersion(8)]		[Export("overrideTraitCollectionForChildViewController")]		public UITraitCollection OverrideTraitCollectionForChildViewController(UIViewController childViewController) { return null; }				/// <summary>		/// Called just before the view controller is added or removed from a container view controller.		/// </summary>		/// <param name="parent">The parent view controller, or nil if there is no parent.</param>		[iOSVersion(5)]		[Export("willMoveToParentViewController")]		public void WillMoveToParentViewController(UIViewController parent) { }				/// <summary>		/// Called after the view controller is added or removed from a container view controller.		/// </summary>		/// <param name="parent">The parent view controller, or nil if there is no parent.</param>		[iOSVersion(5)]		[Export("didMoveToParentViewController")]		public void DidMoveToParentViewController(UIViewController parent) { }				/// <summary>		/// A Boolean value indicating whether the view controller currently allows the user to edit the view contents.		/// </summary>		[iOSVersion(2)]		[Export("editing")]		public bool Editing { get; set; }				/// <summary>		/// Sets whether the view controller shows an editable view.		/// </summary>		/// <param name="editing">If true, the view controller should display an editable view; otherwise, false.     If true and one of the custom views of the navigationItem property is set to the value returned by the editButtonItem method, the associated navigation controller displays a Done button; otherwise, an Edit button.</param>		/// <param name="animated">If true, animates the transition; otherwise, does not.</param>		[iOSVersion(2)]		[Export("setEditing")]		public void SetEditing(bool editing, bool animated) { }				/// <summary>		/// The identifier that determines whether the view controller supports state restoration.		/// </summary>		[iOSVersion(6)]		[Export("restorationIdentifier")]		public string RestorationIdentifier { get; set; }				/// <summary>		/// The class responsible for recreating this view controller when restoring the app's state.		/// </summary>		[iOSVersion(6)]		[Export("restorationClass")]		public AnyObject.Type RestorationClass { get; set; }				/// <summary>		/// Encodes state-related information for the view controller.		/// </summary>		/// <param name="coder">The coder object to use to encode the state of the view controller.</param>		[iOSVersion(6)]		[Export("encodeRestorableStateWithCoder")]		public void EncodeRestorableStateWithCoder(NSCoder coder) { }				/// <summary>		/// Decodes and restores state-related information for the view controller.		/// </summary>		/// <param name="coder">The coder object to use to decode the state of the view.</param>		[iOSVersion(6)]		[Export("decodeRestorableStateWithCoder")]		public void DecodeRestorableStateWithCoder(NSCoder coder) { }				/// <summary>		/// Called on restored view controllers after other object decoding is complete.		/// </summary>		[iOSVersion(7)]		[Export("applicationFinishedRestoringState")]		public void ApplicationFinishedRestoringState() { }				/// <summary>		/// The view controller that presented this view controller. (read-only)		/// </summary>		[iOSVersion(5)]		[Export("presentingViewController")]		public UIViewController PresentingViewController { get; private set; }				/// <summary>		/// The view controller that is presented by this view controller, or one of its ancestors in the view controller hierarchy. (read-only)		/// </summary>		[iOSVersion(5)]		[Export("presentedViewController")]		public UIViewController PresentedViewController { get; private set; }				/// <summary>		/// The parent view controller of the recipient. (read-only)		/// </summary>		[iOSVersion(2)]		[Export("parentViewController")]		public UIViewController ParentViewController { get; private set; }				/// <summary>		/// The nearest ancestor in the view controller hierarchy that is a popover presentation controller. (read-only)		/// </summary>		[iOSVersion(8)]		[Export("popoverPresentationController")]		public UIPopoverPresentationController PopoverPresentationController { get; private set; }				/// <summary>		/// The nearest ancestor in the view controller hierarchy that is a presentation controller. (read-only)		/// </summary>		[iOSVersion(8)]		[Export("presentationController")]		public UIPresentationController PresentationController { get; private set; }				/// <summary>		/// The nearest ancestor in the view controller hierarchy that is a navigation controller. (read-only)		/// </summary>		[iOSVersion(2)]		[Export("navigationController")]		public UINavigationController NavigationController { get; private set; }				/// <summary>		/// The nearest ancestor in the view controller hierarchy that is a split view controller. (read-only)		/// </summary>		[iOSVersion(3.2)]		[Export("splitViewController")]		public UISplitViewController SplitViewController { get; private set; }				/// <summary>		/// The nearest ancestor in the view controller hierarchy that is a tab bar controller. (read-only)		/// </summary>		[iOSVersion(2)]		[Export("tabBarController")]		public UITabBarController TabBarController { get; private set; }				/// <summary>		/// Returns the extension context of the view controller. (read-only)		/// </summary>		[iOSVersion(8)]		[Export("extensionContext")]		public NSExtensionContext ExtensionContext { get; private set; }				/// <summary>		/// Called when the system needs the view controller to use for determining status bar hidden/unhidden state.		/// </summary>		/// <returns>The view controller whose status bar hidden/unhidden status should be used. Default return value is nil.</returns>		[iOSVersion(7)]		[Export("childViewControllerForStatusBarHidden")]		public UIViewController ChildViewControllerForStatusBarHidden() { return null; }				/// <summary>		/// Called when the system needs the view controller to use for determining status bar style.		/// </summary>		/// <returns>The view controller whose status bar style should be used.</returns>		[iOSVersion(7)]		[Export("childViewControllerForStatusBarStyle")]		public UIViewController ChildViewControllerForStatusBarStyle() { return null; }				/// <summary>		/// The preferred status bar style for the view controller.		/// </summary>		/// <returns>A UIStatusBarStyle key indicating your preferred status bar style for the view controller.</returns>		[iOSVersion(7)]		[Export("preferredStatusBarStyle")]		public UIStatusBarStyle PreferredStatusBarStyle() { return null; }				/// <summary>		/// Specifies whether the view controller prefers the status bar to be hidden or shown.		/// </summary>		/// <returns>A Boolean value of true specifies the status bar should be hidden. Default value is false.</returns>		[iOSVersion(7)]		[Export("prefersStatusBarHidden")]		public bool PrefersStatusBarHidden() { return false; }				/// <summary>		/// Specifies whether a view controller, presented non-fullscreen, takes over control of status bar appearance from the presenting view controller.		/// </summary>		[iOSVersion(7)]		[Export("modalPresentationCapturesStatusBarAppearance")]		public bool ModalPresentationCapturesStatusBarAppearance { get; set; }				/// <summary>		/// Specifies the animation style to use for hiding and showing the status bar for the view controller.		/// </summary>		/// <returns>The style of status bar animation to use; one of the constants from the UIStatusBarAnimation enum. Default value is UIStatusBarAnimationFade.</returns>		[iOSVersion(7)]		[Export("preferredStatusBarUpdateAnimation")]		public UIStatusBarAnimation PreferredStatusBarUpdateAnimation() { return null; }				/// <summary>		/// Indicates to the system that the view controller status bar attributes have changed.		/// </summary>		[iOSVersion(7)]		[Export("setNeedsStatusBarAppearanceUpdate")]		public void SetNeedsStatusBarAppearanceUpdate() { }				/// <summary>		/// The navigation item used to represent the view controller in a parent's navigation bar. (read-only)		/// </summary>		[iOSVersion(2)]		[Export("navigationItem")]		public UINavigationItem NavigationItem { get; private set; }				/// <summary>		/// Returns a bar button item that toggles its title and associated state between Edit and Done.		/// </summary>		[iOSVersion(2)]		[Export("editButtonItem")]		public UIBarButtonItem EditButtonItem() { return null; }				/// <summary>		/// A Boolean value indicating whether the toolbar at the bottom of the screen is hidden when the view controller is pushed on to a navigation controller.		/// </summary>		[iOSVersion(2)]		[Export("hidesBottomBarWhenPushed")]		public bool HidesBottomBarWhenPushed { get; set; }				/// <summary>		/// Sets the toolbar items to be displayed along with the view controller.		/// </summary>		/// <param name="toolbarItems">The toolbar items to display in a built-in toolbar.</param>		/// <param name="animated">If true, animate the change of items in the toolbar.</param>		[iOSVersion(3)]		[Export("setToolbarItems")]		public void SetToolbarItems(AnyObject[] toolbarItems, bool animated) { }				/// <summary>		/// The toolbar items associated with the view controller.		/// </summary>		[iOSVersion(3)]		[Export("toolbarItems")]		public AnyObject[] ToolbarItems { get; set; }				/// <summary>		/// The tab bar item that represents the view controller when added to a tab bar controller.		/// </summary>		[iOSVersion(2)]		[Export("tabBarItem")]		public UITabBarItem TabBarItem { get; set; }				/// <summary>		/// A Boolean value indicating whether the view controller should be presented modally by a popover.		/// </summary>		[iOSVersion(3.2)]		[Export("modalInPopover")]		public bool ModalInPopover { get; set; }				/// <summary>		/// Called just before releasing the controller's view from memory.				 		  Deprecation Statement		  		 Views are no longer purged under low-memory conditions and so this method is never called.		/// </summary>		[Obsolete]		[iOSVersion(5)]		[Export("viewWillUnload")]		public void ViewWillUnload() { }				/// <summary>		/// Called when the controller's view is released from memory. 				 		  Deprecation Statement		  		 Views are no longer purged under low-memory conditions and so this method is never called.		/// </summary>		[Obsolete]		[iOSVersion(3)]		[Export("viewDidUnload")]		public void ViewDidUnload() { }				/// <summary>		/// The size of the view controller's view while displayed in a popover.				 		  Deprecation Statement		  		   Use preferredContentSize instead.		/// </summary>		[Obsolete]		[iOSVersion(3.2)]		[Export("contentSizeForViewInPopover")]		public CGSize ContentSizeForViewInPopover { get; set; }				/// <summary>		/// Presents a modal view managed by the given view controller to the user.				 		  Deprecation Statement		  		 Use presentViewController:animated:completion: instead.		/// </summary>		/// <param name="modalViewController">The view controller that manages the modal view.</param>		/// <param name="animated">If true, animates the view as it's presented; otherwise, does not.</param>		[Obsolete]		[iOSVersion(2)]		[Export("presentModalViewController")]		public void PresentModalViewController(UIViewController modalViewController, bool animated) { }				/// <summary>		/// Dismisses the view controller that was presented by the receiver.				 		  Deprecation Statement		  		 Use dismissViewControllerAnimated:completion: instead.		/// </summary>		/// <param name="animated">If true, this method animates the view as it's dismissed; otherwise, it does not. The style of animation is determined by the value in the modalTransitionStyle property of the view controller being dismissed.</param>		[Obsolete]		[iOSVersion(2)]		[Export("dismissModalViewControllerAnimated")]		public void DismissModalViewControllerAnimated(bool animated) { }				/// <summary>		/// A Boolean value indicating whether the view should underlap the status bar. 				 		  Deprecation Statement		  		     Use edgesForExtendedLayout and extendedLayoutIncludesOpaqueBars instead.		/// </summary>		[Obsolete]		[iOSVersion(3)]		[Export("wantsFullScreenLayout")]		public bool WantsFullScreenLayout { get; set; }				/// <summary>		/// Returns a Boolean value indicating whether the view controller supports the specified orientation.				 		  Deprecation Statement		  		 Override the supportedinterfaceOrientations and preferredinterfaceOrientationForPresentation methods instead.		/// </summary>		/// <param name="interfaceOrientation">The orientation of the app's user interface after the rotation. The possible values are described in UIinterfaceOrientation.</param>		/// <returns>true if the view controller auto-rotates its view to the specified orientation; otherwise, false.</returns>		[Obsolete]		[iOSVersion(2)]		[Export("shouldAutorotateTointerfaceOrientation")]		public bool ShouldAutorotateTointerfaceOrientation(UIinterfaceOrientation interfaceOrientation) { return false; }				/// <summary>		/// Returns the header view to transition during an interface orientation change.				 		  Deprecation Statement		  		 Header views are now animated with the rest of the view.		/// </summary>		/// <returns>The header view or nil if there is no header view. If the current view controller is a tab bar controller, this method returns the header view of the view controller in the selected tab. If the current view controller is a navigation controller, this method returns the associated navigation bar.</returns>		[Obsolete]		[iOSVersion(2)]		[Export("rotatingHeaderView")]		public UIView RotatingHeaderView() { return null; }				/// <summary>		/// Returns the footer view to transition during an interface orientation change.				 		  Deprecation Statement		  		 Footer views are now animated with the rest of the view.		/// </summary>		/// <returns>The footer view.</returns>		[Obsolete]		[iOSVersion(2)]		[Export("rotatingFooterView")]		public UIView RotatingFooterView() { return null; }				/// <summary>		/// Convenience property that provides the current orientation of the interface, meaningful only if the view controller is taking up the full screen. (read-only)				 		  Deprecation Statement		  		 Use viewWillTransitionToSize:withTransitionCoordinator: to make interface-based adjustments.		/// </summary>		[Obsolete]		[iOSVersion(2)]		[Export("interfaceOrientation")]		public UIinterfaceOrientation interfaceOrientation { get; private set; }				/// <summary>		/// Sent to the view controller just before the user interface begins rotating.				 		  Deprecation Statement		  		 Use viewWillTransitionToSize:withTransitionCoordinator: to make interface-based adjustments.		/// </summary>		/// <param name="tointerfaceOrientation">The new orientation for the user interface. The possible values are described in UIinterfaceOrientation.</param>		/// <param name="duration">The duration of the pending rotation, measured in seconds.</param>		[Obsolete]		[iOSVersion(2)]		[Export("willRotateTointerfaceOrientation")]		public void WillRotateTointerfaceOrientation(UIinterfaceOrientation tointerfaceOrientation, NSTimeinterval duration) { }				/// <summary>		/// Sent to the view controller before performing a one-step user interface rotation.				 		  Deprecation Statement		  		 Use viewWillTransitionToSize:withTransitionCoordinator: to make interface-based adjustments.		/// </summary>		/// <param name="interfaceOrientation">The new orientation for the user interface. The possible values are described in UIinterfaceOrientation.</param>		/// <param name="duration">The duration of the pending rotation, measured in seconds.</param>		[Obsolete]		[iOSVersion(3)]		[Export("willAnimateRotationTointerfaceOrientation")]		public void WillAnimateRotationTointerfaceOrientation(UIinterfaceOrientation interfaceOrientation, NSTimeinterval duration) { }				/// <summary>		/// Sent to the view controller after the user interface rotates.				 		  Deprecation Statement		  		 Use viewWillTransitionToSize:withTransitionCoordinator: to make interface-based adjustments.		/// </summary>		/// <param name="frominterfaceOrientation">The old orientation of the user interface. For possible values, see UIinterfaceOrientation.</param>		[Obsolete]		[iOSVersion(2)]		[Export("didRotateFrominterfaceOrientation")]		public void DidRotateFrominterfaceOrientation(UIinterfaceOrientation frominterfaceOrientation) { }				/// <summary>		/// Sent to the view controller before performing the first half of a user interface rotation.				 		  Deprecation Statement		  		 Use viewWillTransitionToSize:withTransitionCoordinator: to make interface-based adjustments.		/// </summary>		/// <param name="tointerfaceOrientation">The state of the app's user interface orientation before the rotation. The possible values are described in UIinterfaceOrientation.</param>		/// <param name="duration">The duration of the first half of the pending rotation, measured in seconds.</param>		[Obsolete]		[iOSVersion(2)]		[Export("willAnimateFirstHalfOfRotationTointerfaceOrientation")]		public void WillAnimateFirstHalfOfRotationTointerfaceOrientation(UIinterfaceOrientation tointerfaceOrientation, NSTimeinterval duration) { }				/// <summary>		/// Sent to the view controller after the completion of the first half of the user interface rotation.				 		  Deprecation Statement		  		 Use viewWillTransitionToSize:withTransitionCoordinator: to make interface-based adjustments.		/// </summary>		/// <param name="tointerfaceOrientation">The state of the app's user interface orientation after the rotation. The possible values are described in the UIinterfaceOrientation enum.</param>		[Obsolete]		[iOSVersion(2)]		[Export("didAnimateFirstHalfOfRotationTointerfaceOrientation")]		public void DidAnimateFirstHalfOfRotationTointerfaceOrientation(UIinterfaceOrientation tointerfaceOrientation) { }				/// <summary>		/// Sent to the view controller before the second half of the user interface rotates.				 		  Deprecation Statement		  		 Use viewWillTransitionToSize:withTransitionCoordinator: to make interface-based adjustments.		/// </summary>		/// <param name="frominterfaceOrientation">The state of the app's user interface orientation before the rotation. The possible values are described in the UIinterfaceOrientation enum.</param>		/// <param name="duration">The duration of the second half of the pending rotation, measured in seconds.</param>		[Obsolete]		[iOSVersion(2)]		[Export("willAnimateSecondHalfOfRotationFrominterfaceOrientation")]		public void WillAnimateSecondHalfOfRotationFrominterfaceOrientation(UIinterfaceOrientation frominterfaceOrientation, NSTimeinterval duration) { }				/// <summary>		/// The search display controller associated with the view controller. (read-only)				 		  Deprecation Statement		  		 Use the UISearchController class to integrate search results.		/// </summary>		[Obsolete]		[iOSVersion(3)]		[Export("searchDisplayController")]		public UISearchDisplayController SearchDisplayController { get; private set; }				/// <summary>		/// The controller for the active presented view'that is, the view that is temporarily displayed on top of the view managed by the receiver. (read-only)				 		  Deprecation Statement		  		   Use presentedViewController instead.		/// </summary>		[Obsolete]		[iOSVersion(2)]		[Export("modalViewController")]		public UIViewController ModalViewController { get; private set; }				/// <summary>		/// Returns a Boolean value indicating whether rotation methods are forwarded to child view controllers.				 		  Deprecation Statement		  		 Manually forward calls to the viewWillTransitionToSize:withTransitionCoordinator: method as needed.		/// </summary>		/// <returns>true if rotation methods are forwarded or false if they are not.</returns>		[Obsolete]		[iOSVersion(6)]		[Export("shouldAutomaticallyForwardRotationMethods")]		public bool ShouldAutomaticallyForwardRotationMethods() { return false; }				/// <summary>		/// Returns a Boolean value that indicates whether appearance and rotation methods are forwarded.				 		  Deprecation Statement		  		 Manually forward calls to the viewWillTransitionToSize:withTransitionCoordinator: method as needed.		/// </summary>		/// <returns>A Boolean value that indicates whether appearance and rotation methods are forwarded.</returns>		[Obsolete]		[iOSVersion(5)]		[Export("automaticallyForwardAppearanceAndRotationMethodsToChildViewControllers")]		public bool AutomaticallyForwardAppearanceAndRotationMethodsToChildViewControllers() { return false; }				/// <summary>		/// Transition styles available when presenting view controllers.		/// </summary>		public enum UIModalTransitionStyle		{			/// <summary>			/// When the view controller is presented, its view slides up from the bottom of the screen. On dismissal, the view slides back down. This is the default transition style.			/// </summary>			[iOSVersion(3)]			CoverVertical,						/// <summary>			/// When the view controller is presented, the current view initiates a horizontal 3D flip from right-to-left, resulting in the revealing of the new view as if it were on the back of the previous view. On dismissal, the flip occurs from left-to-right, returning to the original view.			/// </summary>			[iOSVersion(3)]			FlipHorizontal,						/// <summary>			/// When the view controller is presented, the current view fades out while the new view fades in at the same time. On dismissal, a similar type of cross-fade is used to return to the original view.			/// </summary>			[iOSVersion(3)]			CrossDissolve,						/// <summary>			/// When the view controller is presented, one corner of the current view curls up to reveal the presented view underneath. On dismissal, the curled up page unfurls itself back on top of the presented view. A view presented using this transition is itself prevented from presenting any additional views.			/// </summary>			[iOSVersion(3.2)]			PartialCurl,		}		/// <summary>		/// Modal presentation styles available when presenting view controllers.		/// </summary>		public enum UIModalPresentationStyle		{			/// <summary>			/// A presentation style in which the presented view covers the screen.			/// </summary>			[iOSVersion(3.2)]			FullScreen,						/// <summary>			/// In a horizontally regular environment, a presentation style that partially covers the underlying content. The presented view's width is set to the width of the screen in a portrait orientation and the the height is set to the height of the screen. Any uncovered areas are dimmed to prevent the user from interacting with them. (In portrait orientations, this option is essentially the same as UIModalPresentationFullScreen.)			/// </summary>			[iOSVersion(3.2)]			PageSheet,						/// <summary>			/// In a horizontally regular environment, a presentation style that displays the content centered in the screen. The width and height of the content area are smaller than the screen size and a dimming view is placed underneath the content. If the device is in a landscape orientation and the keyboard is visible, the position of the view is adjusted upward so the view remains visible. All uncovered areas are dimmed to prevent the user from interacting with them.			/// </summary>			[iOSVersion(3.2)]			FormSheet,						/// <summary>			/// A presentation style where the content is displayed over only the presenting view controller’s content.			/// </summary>			[iOSVersion(3.2)]			CurrentContext,						/// <summary>			/// A custom view presentation style that is managed by a custom presentation controller and one or more custom animator objects. All of these objects are provided by the presented view controller’s transitioning delegate, which is an object that conforms to the UIViewControllerTransitioningDelegate protocol. Before presenting a view controller using this style, set the view controller’s transitioningDelegate property to your custom transitioning delegate.			/// </summary>			[iOSVersion(7)]			Custom,						/// <summary>			/// A view presentation style in which the presented view covers the screen. The views beneath the presented content are not removed from the view hierarchy when the presentation finishes. So if the presented view controller does not fill the screen with opaque content, the underlying content shows through.			/// </summary>			[iOSVersion(8)]			OverFullScreen,						/// <summary>			/// A presentation style where the content is displayed over only the parent view controller’s content. The views beneath the presented content are not removed from the view hierarchy when the presentation finishes. So if the presented view controller does not fill the screen with opaque content, the underlying content shows through.			/// </summary>			[iOSVersion(8)]			OverCurrentContext,						/// <summary>			/// In a horizontally regular environment, a presentation style where the content is displayed in a popover view. The background content is dimmed and taps outside the popover cause the popover to be dismissed. If you do not want taps to dismiss the popover, you can assign one or more views to the passthroughViews property of the associated UIPopoverPresentationController object, which you can get from the popoverPresentationController property.			/// </summary>			[iOSVersion(8)]			Popover,						/// <summary>			/// A nonmodal view presentation or dismissal.			/// </summary>			[iOSVersion(7)]			None,		}		/// <summary>		/// Exceptions raised by view controllers.		/// </summary>		[Export("UIViewControllerHierarchyInconsistencyException")]		public string UIViewControllerHierarchyInconsistencyException { get; private set; }				/// <summary>		/// Notifications sent by view controllers.		/// </summary>		[Export("UIViewControllerShowDetailTargetDidChangeNotification")]		public string UIViewControllerShowDetailTargetDidChangeNotification { get; private set; }	}}