using ObjectiveC;using System;using SwiftSharp.Attributes;using System.Collections.Generic;namespace UIKit{    /// <summary>    /// The UIViewController class provides the fundamental view-management model for all iOS apps. You rarely instantiate UIViewController objects directly. Instead, you instantiate subclasses of the UIViewController class based on the specific task each subclass performs.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIViewController_Class/index.html#//apple_ref/occ/cl/UIViewController"/>    [iOSVersion(2)]    public class UIViewController : CABTMIDICentralViewController//, AnyObject, NSCoding, NSExtensionRequestHandling, NSObjectProtocol, UIAppearanceContainer, UIContentContainer, UIStateRestoring, UITraitEnvironment    {        /// <summary>        /// Returns a newly initialized view controller with the nib file in the specified bundle.        /// </summary>        /// <param name="nibName">The name of the nib file to associate with the view controller. The nib file name should not contain any leading path information. If you specify nil, the nibName property is set to nil.</param>        /// <param name="bundle">The bundle in which to search for the nib file. This method looks for the nib file in the bundle's language-specific project directories first, followed by the Resources directory. If this parameter is nil, the method uses the heuristics described below to locate the nib file.</param>        [iOSVersion(2)]        public UIViewController(string nibName, NSBundle bundle) { }                /// <summary>        /// Determines whether the segue with the specified identifier should be triggered.        /// </summary>        /// <param name="identifier">The string that identifies the triggered segue.        ///   In Interface Builder, you can associate an identifier string with each segue using the inspector. This string is used only for locating the segue inside the storyboard.</param>        /// <param name="sender">The object that initiated the segue. This object is made available for informational purposes during the actual segue.</param>        [iOSVersion(6)]        [Export("shouldPerformSegueWithIdentifier")]        public bool ShouldPerformSegueWithIdentifier(string identifier, AnyObject sender) { return default(bool); }                /// <summary>        /// Notifies the view controller that a segue is about to be performed.        /// </summary>        /// <param name="segue">The segue object containing information about the view controllers involved in the segue.</param>        /// <param name="sender">The object that initiated the segue. You might use this parameter to perform different actions based on which control (or other object) initiated the segue.</param>        [iOSVersion(5)]        [Export("prepareForSegue")]        public void PrepareForSegue(UIStoryboardSegue segue, AnyObject sender) {  }                /// <summary>        /// Initiates the segue with the specified identifier from the view controller's storyboard file.        /// </summary>        /// <param name="identifier">The string that identifies the segue inside the storyboard file.        ///   In Interface Builder, you can associate an identifier string with each segue using the inspector. This string is used only for locating the segue inside the storyboard. This is the string that you pass to this parameter.        ///   This method throws an exception if there is no segue with the specified identifier.</param>        /// <param name="sender">The object that you want to use to initiate the segue. This object is made available for informational purposes during the actual segue.</param>        [iOSVersion(5)]        [Export("performSegueWithIdentifier")]        public void PerformSegueWithIdentifier(string identifier, AnyObject sender) {  }                /// <summary>        /// Called on a view controller to determine whether it wants to respond to an unwind action.        /// </summary>        /// <param name="action">The unwind action to invoke on your view controller.</param>        /// <param name="fromViewController">The view controller that initiated the unwind action.</param>        /// <param name="withSender">The object that triggered the action.</param>        [iOSVersion(6)]        [Export("canPerformUnwindSegueAction")]        public bool CanPerformUnwindSegueAction(Selector action, UIViewController fromViewController, AnyObject withSender) { return default(bool); }                /// <summary>        /// Called when an unwind segue action needs to transition between two view controllers.        /// </summary>        /// <param name="toViewController">The target view controller.</param>        /// <param name="fromViewController">The view controller initiating the unwind action.</param>        /// <param name="identifier">An identifier for the segue.</param>        [iOSVersion(6)]        [Export("segueForUnwindingToViewController")]        public UIStoryboardSegue SegueForUnwindingToViewController(UIViewController toViewController, UIViewController fromViewController, string identifier) { return default(UIStoryboardSegue); }                /// <summary>        /// Called when an unwind segue action wants to search a container's children for a view controller to handle the unwind action.        /// </summary>        /// <param name="action">The action that triggered the unwind action.</param>        /// <param name="fromViewController">The view controller that is the source of the unwinding action.</param>        /// <param name="withSender">The object that initiated the action.</param>        [iOSVersion(6)]        [Export("viewControllerForUnwindSegueAction")]        public UIViewController ViewControllerForUnwindSegueAction(Selector action, UIViewController fromViewController, AnyObject withSender) { return default(UIViewController); }                /// <summary>        /// Returns a Boolean value indicating whether the view is currently loaded into memory.        /// </summary>        [iOSVersion(3)]        [Export("isViewLoaded")]        public bool IsViewLoaded() { return default(bool); }                /// <summary>        /// Creates the view that the controller manages.        /// </summary>        [iOSVersion(2)]        [Export("loadView")]        public void LoadView() {  }                /// <summary>        /// Called after the controller's view is loaded into memory.        /// </summary>        [iOSVersion(2)]        [Export("viewDidLoad")]        public void ViewDidLoad() {  }                /// <summary>        /// Presents a view controller modally.        /// </summary>        /// <param name="viewControllerToPresent">The view controller to display over the current view controller’s content.</param>        /// <param name="animated">Pass true to animate the presentation; otherwise, pass false.</param>        /// <param name="completion">The block to execute after the presentation finishes. This block has no return value and takes no parameters. You may specify nil for this parameter.</param>        [iOSVersion(5)]        [Export("presentViewController")]        public void PresentViewController(UIViewController viewControllerToPresent, bool animated, Action completion) {  }                /// <summary>        /// Dismisses the view controller that was presented modally by the receiver.        /// </summary>        /// <param name="flag">Pass true to animate the transition.</param>        /// <param name="completion">The block to execute after the view controller is dismissed. This block has no return value and takes no parameters. You may specify nil for this parameter.</param>        [iOSVersion(5)]        [Export("dismissViewControllerAnimated")]        public void DismissViewControllerAnimated(bool flag, Action completion) {  }                /// <summary>        /// Presents a view controller based on the current size class of the environment.        /// </summary>        /// <param name="vc">The current view controller.</param>        /// <param name="sender">The object being acted upon.</param>        [iOSVersion(8)]        [Export("showViewController")]        public void ShowViewController(UIViewController vc, AnyObject sender) {  }                /// <summary>        /// Presents a view controller in a ‘detail’ context based on the size class of the environment.        /// </summary>        /// <param name="vc">The current view controller.</param>        /// <param name="sender">The object being acted upon.</param>        [iOSVersion(8)]        [Export("showDetailViewController")]        public void ShowDetailViewController(UIViewController vc, AnyObject sender) {  }                /// <summary>        /// Returns the active transition coordinator object.        /// </summary>        [iOSVersion(7)]        [Export("transitionCoordinator")]        public UIViewControllerTransitionCoordinator TransitionCoordinator() { return default(UIViewControllerTransitionCoordinator); }                /// <summary>        /// Returns a Boolean indicating whether the current input view is dismissed automatically when changing controls.        /// </summary>        [iOSVersion(4.3)]        [Export("disablesAutomaticKeyboardDismissal")]        public bool DisablesAutomaticKeyboardDismissal() { return default(bool); }                /// <summary>        /// Returns the view controller that responds the the action.        /// </summary>        /// <param name="action">The requested action.</param>        /// <param name="sender">The object sending the request.</param>        [iOSVersion(8)]        [Export("targetViewControllerForAction")]        public UIViewController TargetViewControllerForAction(Selector action, AnyObject sender) { return default(UIViewController); }                /// <summary>        /// Sent to the view controller when the app receives a memory warning.        /// </summary>        [iOSVersion(2)]        [Export("didReceiveMemoryWarning")]        public void DidReceiveMemoryWarning() {  }                /// <summary>        /// Notifies the view controller that its view is about to be added to a view hierarchy.        /// </summary>        /// <param name="animated">If true, the view is being added to the window using an animation.</param>        [iOSVersion(2)]        [Export("viewWillAppear")]        public void ViewWillAppear(bool animated) {  }                /// <summary>        /// Notifies the view controller that its view was added to a view hierarchy.        /// </summary>        /// <param name="animated">If true, the view was added to the window using an animation.</param>        [iOSVersion(2)]        [Export("viewDidAppear")]        public void ViewDidAppear(bool animated) {  }                /// <summary>        /// Notifies the view controller that its view is about to be removed from a view hierarchy.        /// </summary>        /// <param name="animated">If true, the disappearance of the view is being animated.</param>        [iOSVersion(2)]        [Export("viewWillDisappear")]        public void ViewWillDisappear(bool animated) {  }                /// <summary>        /// Notifies the view controller that its view was removed from a view hierarchy.        /// </summary>        /// <param name="animated">If true, the disappearance of the view was animated.</param>        [iOSVersion(2)]        [Export("viewDidDisappear")]        public void ViewDidDisappear(bool animated) {  }                /// <summary>        /// Called to notify the view controller that its view is about to layout its subviews.        /// </summary>        [iOSVersion(5)]        [Export("viewWillLayoutSubviews")]        public void ViewWillLayoutSubviews() {  }                /// <summary>        /// Called to notify the view controller that its view has just laid out its subviews.        /// </summary>        [iOSVersion(5)]        [Export("viewDidLayoutSubviews")]        public void ViewDidLayoutSubviews() {  }                /// <summary>        /// Called when the view controller's view needs to update its constraints.        /// </summary>        [iOSVersion(6)]        [Export("updateViewConstraints")]        public void UpdateViewConstraints() {  }                /// <summary>        /// Returns a Boolean value that indicates that the view controller is in the process of being removed from its parent.        /// </summary>        [iOSVersion(5)]        [Export("isMovingFromParentViewController")]        public bool IsMovingFromParentViewController() { return default(bool); }                /// <summary>        /// Returns a Boolean value that indicates that the view controller is in the process of being added to a parent.        /// </summary>        [iOSVersion(5)]        [Export("isMovingToParentViewController")]        public bool IsMovingToParentViewController() { return default(bool); }                /// <summary>        /// Returns a Boolean value that indicates whether the view controller is in the process of being presented by one of its ancestors.        /// </summary>        [iOSVersion(5)]        [Export("isBeingPresented")]        public bool IsBeingPresented() { return default(bool); }                /// <summary>        /// Returns a Boolean value that indicates whether the view controller is in the process of being dismissed by one of its ancestors.        /// </summary>        [iOSVersion(5)]        [Export("isBeingDismissed")]        public bool IsBeingDismissed() { return default(bool); }                /// <summary>        /// Returns a Boolean value indicating whether the view controller's contents should auto rotate.        /// </summary>        [iOSVersion(6)]        [Export("shouldAutorotate")]        public bool ShouldAutorotate() { return default(bool); }                /// <summary>        /// Returns all of the interface orientations that the view controller supports.        /// </summary>        [iOSVersion(6)]        [Export("supportedInterfaceOrientations")]        public int SupportedInterfaceOrientations() { return default(int); }                /// <summary>        /// Returns the interface orientation to use when presenting the view controller.        /// </summary>        [iOSVersion(6)]        [Export("preferredInterfaceOrientationForPresentation")]        public UIInterfaceOrientation PreferredInterfaceOrientationForPresentation() { return default(UIInterfaceOrientation); }                /// <summary>        /// Attempts to rotate all windows to the orientation of the device.        /// </summary>        [iOSVersion(5)]        [Export("attemptRotationToDeviceOrientation")]        public static void AttemptRotationToDeviceOrientation() {  }                /// <summary>        /// Called when a split view controller transitions to a compact-width size class.        /// </summary>        /// <param name="secondaryViewController">The secondary view controller associated with the split view controller.</param>        /// <param name="forSplitViewController">The current split view controller.</param>        [iOSVersion(8)]        [Export("collapseSecondaryViewController")]        public void CollapseSecondaryViewController(UIViewController secondaryViewController, UISplitViewController forSplitViewController) {  }                /// <summary>        /// Called when a split view controller transitions to a regular-width size class.        /// </summary>        /// <param name="splitViewController">The current split view controller.</param>        [iOSVersion(8)]        [Export("separateSecondaryViewControllerForSplitViewController")]        public UIViewController SeparateSecondaryViewControllerForSplitViewController(UISplitViewController splitViewController) { return default(UIViewController); }                /// <summary>        /// Adds the given view controller as a child.        /// </summary>        /// <param name="childController">The view controller to be added as a child.</param>        [iOSVersion(5)]        [Export("addChildViewController")]        public void AddChildViewController(UIViewController childController) {  }                /// <summary>        /// Removes the receiver from its parent in the view controller hierarchy.        /// </summary>        [iOSVersion(5)]        [Export("removeFromParentViewController")]        public void RemoveFromParentViewController() {  }                /// <summary>        /// Transitions between two of the view controller's child view controllers.        /// </summary>        /// <param name="fromViewController">A view controller whose view is currently visible in the parent's view hierarchy.</param>        /// <param name="toViewController">A child view controller whose view is not currently in the view hierarchy.</param>        /// <param name="duration">The total duration of the animations, in seconds. If you pass zero, the changes are made without animating them.</param>        /// <param name="options">A mask of options indicating how you want to perform the animations. For a list of valid constants, see UIViewAnimationOptions.</param>        /// <param name="animations">A block object containing the changes to commit to the views. Here you programmatically change any animatable properties of the views in your view hierarchy. This block takes no parameters and has no return value. This parameter must not be NULL.</param>        /// <param name="completion">A block to be called when the animation completes.        ///   The block takes the following parameters:        ///       finished        ///   true if the animation finished; false if it was skipped.</param>        [iOSVersion(5)]        [Export("transitionFromViewController")]        public void TransitionFromViewController(UIViewController fromViewController, UIViewController toViewController, NSTimeInterval duration, UIViewAnimationOptions options, Action animations, Action<bool> completion) {  }                /// <summary>        /// Returns a Boolean value indicating whether appearance methods are forwarded to child view controllers.        /// </summary>        [iOSVersion(6)]        [Export("shouldAutomaticallyForwardAppearanceMethods")]        public bool ShouldAutomaticallyForwardAppearanceMethods() { return default(bool); }                /// <summary>        /// Tells a child controller its appearance is about to change.        /// </summary>        /// <param name="isAppearing">true if the child view controller's view is about to be added to the view hierarchy, false if it is being removed.</param>        /// <param name="animated">If true, the transition is being animated.</param>        [iOSVersion(5)]        [Export("beginAppearanceTransition")]        public void BeginAppearanceTransition(bool isAppearing, bool animated) {  }                /// <summary>        /// Tells a child controller its appearance has changed.        /// </summary>        [iOSVersion(5)]        [Export("endAppearanceTransition")]        public void EndAppearanceTransition() {  }                /// <summary>        /// Changes the traits assigned to the specified child view controller.        /// </summary>        /// <param name="collection">The new traits to apply to the child view controller.</param>        /// <param name="forChildViewController">The child view controller who’s trait collection is to be changed.</param>        [iOSVersion(8)]        [Export("setOverrideTraitCollection")]        public void SetOverrideTraitCollection(UITraitCollection collection, UIViewController forChildViewController) {  }                /// <summary>        /// Retrieves the trait collection for a child view controller.        /// </summary>        /// <param name="childViewController">The view controller who’s trait collection is to be returned.</param>        [iOSVersion(8)]        [Export("overrideTraitCollectionForChildViewController")]        public UITraitCollection OverrideTraitCollectionForChildViewController(UIViewController childViewController) { return default(UITraitCollection); }                /// <summary>        /// Called just before the view controller is added or removed from a container view controller.        /// </summary>        /// <param name="parent">The parent view controller, or nil if there is no parent.</param>        [iOSVersion(5)]        [Export("willMoveToParentViewController")]        public void WillMoveToParentViewController(UIViewController parent) {  }                /// <summary>        /// Called after the view controller is added or removed from a container view controller.        /// </summary>        /// <param name="parent">The parent view controller, or nil if there is no parent.</param>        [iOSVersion(5)]        [Export("didMoveToParentViewController")]        public void DidMoveToParentViewController(UIViewController parent) {  }                /// <summary>        /// Sets whether the view controller shows an editable view.        /// </summary>        /// <param name="editing">If true, the view controller should display an editable view; otherwise, false.        ///     If true and one of the custom views of the navigationItem property is set to the value returned by the editButtonItem method, the associated navigation controller displays a Done button; otherwise, an Edit button.</param>        /// <param name="animated">If true, animates the transition; otherwise, does not.</param>        [iOSVersion(2)]        [Export("setEditing")]        public void SetEditing(bool editing, bool animated) {  }                /// <summary>        /// Encodes state-related information for the view controller.        /// </summary>        /// <param name="coder">The coder object to use to encode the state of the view controller.</param>        [iOSVersion(6)]        [Export("encodeRestorableStateWithCoder")]        public void EncodeRestorableStateWithCoder(NSCoder coder) {  }                /// <summary>        /// Decodes and restores state-related information for the view controller.        /// </summary>        /// <param name="coder">The coder object to use to decode the state of the view.</param>        [iOSVersion(6)]        [Export("decodeRestorableStateWithCoder")]        public void DecodeRestorableStateWithCoder(NSCoder coder) {  }                /// <summary>        /// Called on restored view controllers after other object decoding is complete.        /// </summary>        [iOSVersion(7)]        [Export("applicationFinishedRestoringState")]        public void ApplicationFinishedRestoringState() {  }                /// <summary>        /// Called when the system needs the view controller to use for determining status bar hidden/unhidden state.        /// </summary>        [iOSVersion(7)]        [Export("childViewControllerForStatusBarHidden")]        public UIViewController ChildViewControllerForStatusBarHidden() { return default(UIViewController); }                /// <summary>        /// Called when the system needs the view controller to use for determining status bar style.        /// </summary>        [iOSVersion(7)]        [Export("childViewControllerForStatusBarStyle")]        public UIViewController ChildViewControllerForStatusBarStyle() { return default(UIViewController); }                /// <summary>        /// The preferred status bar style for the view controller.        /// </summary>        [iOSVersion(7)]        [Export("preferredStatusBarStyle")]        public UIStatusBarStyle PreferredStatusBarStyle() { return default(UIStatusBarStyle); }                /// <summary>        /// Specifies whether the view controller prefers the status bar to be hidden or shown.        /// </summary>        [iOSVersion(7)]        [Export("prefersStatusBarHidden")]        public bool PrefersStatusBarHidden() { return default(bool); }                /// <summary>        /// Specifies the animation style to use for hiding and showing the status bar for the view controller.        /// </summary>        [iOSVersion(7)]        [Export("preferredStatusBarUpdateAnimation")]        public UIStatusBarAnimation PreferredStatusBarUpdateAnimation() { return default(UIStatusBarAnimation); }                /// <summary>        /// Indicates to the system that the view controller status bar attributes have changed.        /// </summary>        [iOSVersion(7)]        [Export("setNeedsStatusBarAppearanceUpdate")]        public void SetNeedsStatusBarAppearanceUpdate() {  }                /// <summary>        /// Returns a bar button item that toggles its title and associated state between Edit and Done.        /// </summary>        [iOSVersion(2)]        [Export("editButtonItem")]        public UIBarButtonItem EditButtonItem() { return default(UIBarButtonItem); }                /// <summary>        /// Sets the toolbar items to be displayed along with the view controller.        /// </summary>        /// <param name="toolbarItems">The toolbar items to display in a built-in toolbar.</param>        /// <param name="animated">If true, animate the change of items in the toolbar.</param>        [iOSVersion(3)]        [Export("setToolbarItems")]        public void SetToolbarItems(AnyObject[] toolbarItems, bool animated) {  }                /// <summary>        /// Returns the header view to transition during an interface orientation change.        /// </summary>        [iOSVersion(2)]        [Export("rotatingHeaderView")]        public UIView RotatingHeaderView() { return default(UIView); }                /// <summary>        /// Returns the footer view to transition during an interface orientation change.        /// </summary>        [iOSVersion(2)]        [Export("rotatingFooterView")]        public UIView RotatingFooterView() { return default(UIView); }                /// <summary>        /// Sent to the view controller just before the user interface begins rotating.        /// </summary>        /// <param name="toInterfaceOrientation">The new orientation for the user interface. The possible values are described in UIInterfaceOrientation.</param>        /// <param name="duration">The duration of the pending rotation, measured in seconds.</param>        [iOSVersion(2)]        [Export("willRotateToInterfaceOrientation")]        public void WillRotateToInterfaceOrientation(UIInterfaceOrientation toInterfaceOrientation, NSTimeInterval duration) {  }                /// <summary>        /// Sent to the view controller before performing a one-step user interface rotation.        /// </summary>        /// <param name="interfaceOrientation">The new orientation for the user interface. The possible values are described in UIInterfaceOrientation.</param>        /// <param name="duration">The duration of the pending rotation, measured in seconds.</param>        [iOSVersion(3)]        [Export("willAnimateRotationToInterfaceOrientation")]        public void WillAnimateRotationToInterfaceOrientation(UIInterfaceOrientation interfaceOrientation, NSTimeInterval duration) {  }                /// <summary>        /// Sent to the view controller after the user interface rotates.        /// </summary>        /// <param name="fromInterfaceOrientation">The old orientation of the user interface. For possible values, see UIInterfaceOrientation.</param>        [iOSVersion(2)]        [Export("didRotateFromInterfaceOrientation")]        public void DidRotateFromInterfaceOrientation(UIInterfaceOrientation fromInterfaceOrientation) {  }                /// <summary>        /// Returns a Boolean value indicating whether rotation methods are forwarded to child view controllers.        /// </summary>        [iOSVersion(6)]        [Export("shouldAutomaticallyForwardRotationMethods")]        public bool ShouldAutomaticallyForwardRotationMethods() { return default(bool); }                /// <summary>        /// Return the name of the receiver's nib file, if one was specified. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("nibName")]        public string NibName { get; private set; }                /// <summary>        /// Return the name of the receiver's nib bundle if it exists. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("nibBundle")]        public NSBundle NibBundle { get; private set; }                /// <summary>        /// The storyboard from which the view controller originated. (read-only)        /// </summary>        [iOSVersion(5)]        [Export("storyboard")]        public UIStoryboard Storyboard { get; private set; }                /// <summary>        /// The view that the controller manages.        /// </summary>        [iOSVersion(2)]        [Export("view")]        public UIView View { get; set; }                /// <summary>        /// A localized string that represents the view this controller manages.        /// </summary>        [iOSVersion(2)]        [Export("title")]        public string Title { get; set; }                /// <summary>        /// The presentation style for modally presented view controllers.        /// </summary>        [iOSVersion(3.2)]        [Export("modalPresentationStyle")]        public UIModalPresentationStyle ModalPresentationStyle { get; set; }                /// <summary>        /// The transition style to use when presenting the receiver.        /// </summary>        [iOSVersion(3)]        [Export("modalTransitionStyle")]        public UIModalTransitionStyle ModalTransitionStyle { get; set; }                /// <summary>        /// A Boolean value that indicates whether this view controller's view is covered when the view controller or one of its descendants presents a view controller.        /// </summary>        [iOSVersion(5)]        [Export("definesPresentationContext")]        public bool DefinesPresentationContext { get; set; }                /// <summary>        /// The delegate object that provides transition animator and interactive controller objects.        /// </summary>        [iOSVersion(7)]        [Export("transitioningDelegate")]        public UIViewControllerTransitioningDelegate TransitioningDelegate { get; set; }                /// <summary>        /// A Boolean value that indicates whether the view controller defines the transition style for view controllers it presents.        /// </summary>        [iOSVersion(5)]        [Export("providesPresentationContextTransitionStyle")]        public bool ProvidesPresentationContextTransitionStyle { get; set; }                /// <summary>        /// Specifies whether or not the view controller should automatically adjust its scroll view insets.        /// </summary>        [iOSVersion(7)]        [Export("automaticallyAdjustsScrollViewInsets")]        public bool AutomaticallyAdjustsScrollViewInsets { get; set; }                /// <summary>        /// The preferred size for the view controller’s view.        /// </summary>        [iOSVersion(7)]        [Export("preferredContentSize")]        public CGSize PreferredContentSize { get; set; }                /// <summary>        /// The extended edges to use for the layout.        /// </summary>        [iOSVersion(7)]        [Export("edgesForExtendedLayout")]        public UIRectEdge EdgesForExtendedLayout { get; set; }                /// <summary>        /// A Boolean value indicating whether or not the extended layout includes opaque bars.        /// </summary>        [iOSVersion(7)]        [Export("extendedLayoutIncludesOpaqueBars")]        public bool ExtendedLayoutIncludesOpaqueBars { get; set; }                /// <summary>        /// Indicates the lowest vertical extent for your onscreen content, for use with Auto Layout constraints. (read-only)        /// </summary>        [iOSVersion(7)]        [Export("bottomLayoutGuide")]        public UILayoutSupport BottomLayoutGuide { get; private set; }                /// <summary>        /// Indicates the highest vertical extent for your onscreen content, for use with Auto Layout constraints. (read-only)        /// </summary>        [iOSVersion(7)]        [Export("topLayoutGuide")]        public UILayoutSupport TopLayoutGuide { get; private set; }                /// <summary>        /// An array of the view controllers that are the children of the receiver in the view controller hierarchy. (read-only)        /// </summary>        [iOSVersion(5)]        [Export("childViewControllers")]        public AnyObject[] ChildViewControllers { get; private set; }                /// <summary>        /// A Boolean value indicating whether the view controller currently allows the user to edit the view contents.        /// </summary>        [iOSVersion(2)]        [Export("editing")]        public bool Editing { get; set; }                /// <summary>        /// The identifier that determines whether the view controller supports state restoration.        /// </summary>        [iOSVersion(6)]        [Export("restorationIdentifier")]        public string RestorationIdentifier { get; set; }                /// <summary>        /// The class responsible for recreating this view controller when restoring the app's state.        /// </summary>        [iOSVersion(6)]        [Export("restorationClass")]        public AnyObject.Type RestorationClass { get; set; }                /// <summary>        /// The view controller that presented this view controller. (read-only)        /// </summary>        [iOSVersion(5)]        [Export("presentingViewController")]        public UIViewController PresentingViewController { get; private set; }                /// <summary>        /// The view controller that is presented by this view controller, or one of its ancestors in the view controller hierarchy. (read-only)        /// </summary>        [iOSVersion(5)]        [Export("presentedViewController")]        public UIViewController PresentedViewController { get; private set; }                /// <summary>        /// The parent view controller of the recipient. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("parentViewController")]        public UIViewController ParentViewController { get; private set; }                /// <summary>        /// The nearest ancestor in the view controller hierarchy that is a popover presentation controller. (read-only)        /// </summary>        [iOSVersion(8)]        [Export("popoverPresentationController")]        public UIPopoverPresentationController PopoverPresentationController { get; private set; }                /// <summary>        /// The nearest ancestor in the view controller hierarchy that is a presentation controller. (read-only)        /// </summary>        [iOSVersion(8)]        [Export("presentationController")]        public UIPresentationController PresentationController { get; private set; }                /// <summary>        /// The nearest ancestor in the view controller hierarchy that is a navigation controller. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("navigationController")]        public UINavigationController NavigationController { get; private set; }                /// <summary>        /// The nearest ancestor in the view controller hierarchy that is a split view controller. (read-only)        /// </summary>        [iOSVersion(3.2)]        [Export("splitViewController")]        public UISplitViewController SplitViewController { get; private set; }                /// <summary>        /// The nearest ancestor in the view controller hierarchy that is a tab bar controller. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("tabBarController")]        public UITabBarController TabBarController { get; private set; }                /// <summary>        /// Returns the extension context of the view controller. (read-only)        /// </summary>        [iOSVersion(8)]        [Export("extensionContext")]        public NSExtensionContext ExtensionContext { get; private set; }                /// <summary>        /// Specifies whether a view controller, presented non-fullscreen, takes over control of status bar appearance from the presenting view controller.        /// </summary>        [iOSVersion(7)]        [Export("modalPresentationCapturesStatusBarAppearance")]        public bool ModalPresentationCapturesStatusBarAppearance { get; set; }                /// <summary>        /// The navigation item used to represent the view controller in a parent's navigation bar. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("navigationItem")]        public UINavigationItem NavigationItem { get; private set; }                /// <summary>        /// A Boolean value indicating whether the toolbar at the bottom of the screen is hidden when the view controller is pushed on to a navigation controller.        /// </summary>        [iOSVersion(2)]        [Export("hidesBottomBarWhenPushed")]        public bool HidesBottomBarWhenPushed { get; set; }                /// <summary>        /// The toolbar items associated with the view controller.        /// </summary>        [iOSVersion(3)]        [Export("toolbarItems")]        public AnyObject[] ToolbarItems { get; set; }                /// <summary>        /// The tab bar item that represents the view controller when added to a tab bar controller.        /// </summary>        [iOSVersion(2)]        [Export("tabBarItem")]        public UITabBarItem TabBarItem { get; set; }                /// <summary>        /// A Boolean value indicating whether the view controller should be presented modally by a popover.        /// </summary>        [iOSVersion(3.2)]        [Export("modalInPopover")]        public bool ModalInPopover { get; set; }                /// <summary>        /// Convenience property that provides the current orientation of the interface, meaningful only if the view controller is taking up the full screen. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("interfaceOrientation")]        public UIInterfaceOrientation InterfaceOrientation { get; private set; }                /// <summary>        /// The search display controller associated with the view controller. (read-only)        /// </summary>        [iOSVersion(3)]        [Export("searchDisplayController")]        public UISearchDisplayController SearchDisplayController { get; private set; }    }    /// <summary>    /// Transition styles available when presenting view controllers.    /// </summary>    [iOSVersion(3)]    public enum UIModalTransitionStyle    {        /// <summary>        /// When the view controller is presented, its view slides up from the bottom of the screen. On dismissal, the view slides back down. This is the default transition style.        /// </summary>        [iOSVersion(3)]        CoverVertical,        /// <summary>        /// When the view controller is presented, the current view initiates a horizontal 3D flip from right-to-left, resulting in the revealing of the new view as if it were on the back of the previous view. On dismissal, the flip occurs from left-to-right, returning to the original view.        /// </summary>        [iOSVersion(3)]        FlipHorizontal,        /// <summary>        /// When the view controller is presented, the current view fades out while the new view fades in at the same time. On dismissal, a similar type of cross-fade is used to return to the original view.        /// </summary>        [iOSVersion(3)]        CrossDissolve,        /// <summary>        /// When the view controller is presented, one corner of the current view curls up to reveal the presented view underneath. On dismissal, the curled up page unfurls itself back on top of the presented view. A view presented using this transition is itself prevented from presenting any additional views.        /// This transition style is supported only if the parent view controller is presenting a full-screen view and you use the UIModalPresentationFullScreen modal presentation style. Attempting to use a different form factor for the parent view or a different presentation style triggers an exception.        /// </summary>        [iOSVersion(3.2)]        PartialCurl,    }    /// <summary>    /// Modal presentation styles available when presenting view controllers.    /// </summary>    [iOSVersion(3.2)]    public enum UIModalPresentationStyle    {        /// <summary>        /// A presentation style in which the presented view covers the screen.        /// </summary>        [iOSVersion(3.2)]        FullScreen,        /// <summary>        /// In a horizontally regular environment, a presentation style that partially covers the underlying content. The presented view's width is set to the width of the screen in a portrait orientation and the the height is set to the height of the screen. Any uncovered areas are dimmed to prevent the user from interacting with them. (In portrait orientations, this option is essentially the same as UIModalPresentationFullScreen.)        /// In a horizontally compact environment, this option behaves the same as UIModalPresentationFullScreen.        /// </summary>        [iOSVersion(3.2)]        PageSheet,        /// <summary>        /// In a horizontally regular environment, a presentation style that displays the content centered in the screen. The width and height of the content area are smaller than the screen size and a dimming view is placed underneath the content. If the device is in a landscape orientation and the keyboard is visible, the position of the view is adjusted upward so the view remains visible. All uncovered areas are dimmed to prevent the user from interacting with them.        /// In a horizontally compact environment, this option behaves the same as UIModalPresentationFullScreen.        /// </summary>        [iOSVersion(3.2)]        FormSheet,        /// <summary>        /// A presentation style where the content is displayed over only the presenting view controller’s content.        /// When presenting a view controller in a popover, this presentation style is supported only if the transition style is UIModalTransitionStyleCoverVertical. Attempting to use a different transition style triggers an exception. However, you may use other transition styles (except the partial curl transition) if the parent view controller is not in a popover.        /// </summary>        [iOSVersion(3.2)]        CurrentContext,        /// <summary>        /// A custom view presentation style that is managed by a custom presentation controller and one or more custom animator objects. All of these objects are provided by the presented view controller’s transitioning delegate, which is an object that conforms to the UIViewControllerTransitioningDelegate protocol. Before presenting a view controller using this style, set the view controller’s  transitioningDelegate property to your custom transitioning delegate.        /// </summary>        [iOSVersion(7)]        Custom,        /// <summary>        /// A view presentation style in which the presented view covers the screen. The views beneath the presented content are not removed from the view hierarchy when the presentation finishes. So if the presented view controller does not fill the screen with opaque content, the underlying content shows through.        /// </summary>        [iOSVersion(8)]        OverFullScreen,        /// <summary>        /// A presentation style where the content is displayed over only the parent view controller’s content. The views beneath the presented content are not removed from the view hierarchy when the presentation finishes. So if the presented view controller does not fill the screen with opaque content, the underlying content shows through.        /// When presenting a view controller in a popover, this presentation style is supported only if the transition style is UIModalTransitionStyleCoverVertical. Attempting to use a different transition style triggers an exception. However, you may use other transition styles (except the partial curl transition) if the parent view controller is not in a popover.        /// </summary>        [iOSVersion(8)]        OverCurrentContext,        /// <summary>        /// In a horizontally regular environment, a presentation style where the content is displayed in a popover view. The background content is dimmed and taps outside the popover cause the popover to be dismissed. If you do not want taps to dismiss the popover, you can assign one or more views to the passthroughViews property of the associated UIPopoverPresentationController object, which you can get from the popoverPresentationController property.        /// In a horizontally compact environment, this option behaves the same as UIModalPresentationFullScreen.        /// </summary>        [iOSVersion(8)]        Popover,        /// <summary>        /// A nonmodal view presentation or dismissal.        /// </summary>        [iOSVersion(7)]        None,    }}