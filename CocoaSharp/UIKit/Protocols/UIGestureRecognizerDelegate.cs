using ObjectiveC;using System;using SwiftSharp.Attributes;using Foundation;namespace UIKit{	//https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIGestureRecognizerDelegate_Protocol/index.html#//apple_ref/occ/intf/UIGestureRecognizerDelegate	/// <summary>	/// Delegates of a gesture recognizer—that is, an instance of a concrete subclass of UIGestureRecognizer—adopt the UIGestureRecognizerDelegate protocol to fine-tune an app’s gesture-recognition behavior. The delegates receive messages from a gesture recognizer, and their responses to these messages enable them to affect the operation of the gesture recognizer or to specify a relationship between it and another gesture recognizer, such as allowing simultaneous recognition or setting up a failure requirement.	/// </summary>	[iOSVersion(3.2)]	public interface UIGestureRecognizerDelegate	{		/// <summary>		/// Asks the delegate if a gesture recognizer should begin interpreting touches.		/// </summary>		/// <param name="gestureRecognizer">An instance of a subclass of the abstract base class UIGestureRecognizer. This gesture-recognizer object is about to begin processing touches to determine if its gesture is occurring.</param>		/// <returns>true (the default) to tell the gesture recognizer to proceed with interpreting touches, false to prevent it from attempting to recognize its gesture.</returns>		[iOSVersion(3.2)]		[Export("gestureRecognizerShouldBegin")]		[Optional]		bool GestureRecognizerShouldBegin(UIGestureRecognizer gestureRecognizer);				/// <summary>		/// Ask the delegate if a gesture recognizer should receive an object representing a touch.		/// </summary>		/// <param name="gestureRecognizer">An instance of a subclass of the abstract base class UIGestureRecognizer.</param>		/// <param name="shouldReceiveTouch">A UITouch object from the current multi-touch sequence.</param>		/// <returns>true (the default) to allow the gesture recognizer to examine the touch object, false to prevent the gesture recognizer from seeing this touch object.</returns>		[iOSVersion(3.2)]		[Export("gestureRecognizer")]		[Optional]		bool GestureRecognizer(UIGestureRecognizer gestureRecognizer, UITouch shouldReceiveTouch);				/// <summary>		/// Asks the delegate if two gesture recognizers should be allowed to recognize gestures simultaneously.		/// </summary>		/// <param name="gestureRecognizer">An instance of a subclass of the abstract base class UIGestureRecognizer. This is the object sending the message to the delegate.</param>		/// <param name="shouldRecognizeSimultaneouslyWithGestureRecognizer">An instance of a subclass of the abstract base class UIGestureRecognizer.</param>		/// <returns>true to allow both gestureRecognizer and otherGestureRecognizer to recognize their gestures simultaneously. The default implementation returns false—no two gestures can be recognized simultaneously.</returns>		[iOSVersion(3.2)]		[Export("gestureRecognizer")]		[Optional]		bool GestureRecognizer(UIGestureRecognizer gestureRecognizer, UIGestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer);				/// <summary>		/// Asks the delegate if a gesture recognizer should require another gesture recognizer to fail.		/// </summary>		/// <param name="gestureRecognizer">An instance of a subclass of the abstract base class UIGestureRecognizer. This is the object sending the message to the delegate.</param>		/// <param name="shouldRequireFailureOfGestureRecognizer">An instance of a subclass of the abstract base class UIGestureRecognizer.</param>		/// <returns>true to set up a dynamic failure requirement between gestureRecognizer and otherGestureRecognizer. The default implementation returns false—gestureRecognizer doesn’t require otherGestureRecognizer to fail.</returns>		[iOSVersion(7)]		[Export("gestureRecognizer")]		[Optional]		bool GestureRecognizer(UIGestureRecognizer gestureRecognizer, UIGestureRecognizer shouldRequireFailureOfGestureRecognizer);				/// <summary>		/// Asks the delegate if a gesture recognizer should be required to fail by another gesture recognizer.		/// </summary>		/// <param name="gestureRecognizer">An instance of a subclass of the abstract base class UIGestureRecognizer. This is the object sending the message to the delegate.</param>		/// <param name="shouldBeRequiredToFailByGestureRecognizer">An instance of a subclass of the abstract base class UIGestureRecognizer.</param>		/// <returns>true to set up a dynamic failure requirement between gestureRecognizer and otherGestureRecognizer. The default implementation returns false—gestureRecognizer isn’t required to fail by otherGestureRecognizer.</returns>		[iOSVersion(7)]		[Export("gestureRecognizer")]		[Optional]		bool GestureRecognizer(UIGestureRecognizer gestureRecognizer, UIGestureRecognizer shouldBeRequiredToFailByGestureRecognizer);	}}