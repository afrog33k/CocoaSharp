using ObjectiveC;using System;using SwiftSharp.Attributes;using Foundation;namespace UIKit{	//https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UICollectionViewDelegate_protocol/index.html#//apple_ref/occ/intf/UICollectionViewDelegate	/// <summary>	/// The UICollectionViewDelegate protocol defines methods that allow you to manage the selection and highlighting of items in a collection view and to perform actions on those items. The methods of this protocol are all optional.	/// </summary>	[iOSVersion(6)]	public interface UICollectionViewDelegate	{		/// <summary>		/// Asks the delegate if the specified item should be selected.		/// </summary>		/// <param name="collectionView">The collection view object that is asking whether the selection should change.</param>		/// <param name="shouldSelectItemAtIndexPath">The index path of the cell to be selected.</param>		/// <returns>true if the item should be selected or false if it should not.</returns>		[iOSVersion(6)]		[Export("collectionView")]		[Optional]		bool CollectionView(UICollectionView collectionView, NSIndexPath shouldSelectItemAtIndexPath);				/// <summary>		/// Tells the delegate that the item at the specified index path was selected.		/// </summary>		/// <param name="collectionView">The collection view object that is notifying you of the selection change.</param>		/// <param name="didSelectItemAtIndexPath">The index path of the cell that was selected.</param>		[iOSVersion(6)]		[Export("collectionView")]		[Optional]		void CollectionView(UICollectionView collectionView, NSIndexPath didSelectItemAtIndexPath);				/// <summary>		/// Asks the delegate if the specified item should be deselected.		/// </summary>		/// <param name="collectionView">The collection view object that is asking whether the selection should change.</param>		/// <param name="shouldDeselectItemAtIndexPath">The index path of the cell to be deselected.</param>		/// <returns>true if the item should be deselected or false if it should not.</returns>		[iOSVersion(6)]		[Export("collectionView")]		[Optional]		bool CollectionView(UICollectionView collectionView, NSIndexPath shouldDeselectItemAtIndexPath);				/// <summary>		/// Tells the delegate that the item at the specified path was deselected.		/// </summary>		/// <param name="collectionView">The collection view object that is notifying you of the selection change.</param>		/// <param name="didDeselectItemAtIndexPath">The index path of the cell that was deselected.</param>		[iOSVersion(6)]		[Export("collectionView")]		[Optional]		void CollectionView(UICollectionView collectionView, NSIndexPath didDeselectItemAtIndexPath);				/// <summary>		/// Asks the delegate if the item should be highlighted during tracking.		/// </summary>		/// <param name="collectionView">The collection view object that is asking about the highlight change.</param>		/// <param name="shouldHighlightItemAtIndexPath">The index path of the cell to be highlighted.</param>		/// <returns>true if the item should be highlighted or false if it should not.</returns>		[iOSVersion(6)]		[Export("collectionView")]		[Optional]		bool CollectionView(UICollectionView collectionView, NSIndexPath shouldHighlightItemAtIndexPath);				/// <summary>		/// Tells the delegate that the item at the specified index path was highlighted.		/// </summary>		/// <param name="collectionView">The collection view object that is notifying you of the highlight change.</param>		/// <param name="didHighlightItemAtIndexPath">The index path of the cell that was highlighted.</param>		[iOSVersion(6)]		[Export("collectionView")]		[Optional]		void CollectionView(UICollectionView collectionView, NSIndexPath didHighlightItemAtIndexPath);				/// <summary>		/// Tells the delegate that the highlight was removed from the item at the specified index path.		/// </summary>		/// <param name="collectionView">The collection view object that is notifying you of the highlight change.</param>		/// <param name="didUnhighlightItemAtIndexPath">The index path of the cell that had its highlight removed.</param>		[iOSVersion(6)]		[Export("collectionView")]		[Optional]		void CollectionView(UICollectionView collectionView, NSIndexPath didUnhighlightItemAtIndexPath);				/// <summary>		/// Tells the delegate that the specified cell is about to be displayed in the collection view.		/// </summary>		/// <param name="collectionView">The collection view object that is adding the cell.</param>		/// <param name="willDisplayCell">The cell object being added.</param>		/// <param name="forItemAtIndexPath">The index path of the data item that the cell represents.</param>		[iOSVersion(8)]		[Export("collectionView")]		[Optional]		void CollectionView(UICollectionView collectionView, UICollectionViewCell willDisplayCell, NSIndexPath forItemAtIndexPath);				/// <summary>		/// Tells the delegate that the specified supplementary view is about to be displayed in the collection view.		/// </summary>		/// <param name="collectionView">The collection view object that is adding the supplementary view.</param>		/// <param name="willDisplaySupplementaryView">The view being added.</param>		/// <param name="forElementKind">The type of the supplementary view. This string is defined by the layout that presents the view.</param>		/// <param name="atIndexPath">The index path of the data item that the supplementary view represents.</param>		[iOSVersion(8)]		[Export("collectionView")]		[Optional]		void CollectionView(UICollectionView collectionView, UICollectionReusableView willDisplaySupplementaryView, string forElementKind, NSIndexPath atIndexPath);				/// <summary>		/// Tells the delegate that the specified cell was removed from the collection view.		/// </summary>		/// <param name="collectionView">The collection view object that removed the cell.</param>		/// <param name="didEndDisplayingCell">The cell object that was removed.</param>		/// <param name="forItemAtIndexPath">The index path of the data item that the cell represented.</param>		[iOSVersion(6)]		[Export("collectionView")]		[Optional]		void CollectionView(UICollectionView collectionView, UICollectionViewCell didEndDisplayingCell, NSIndexPath forItemAtIndexPath);				/// <summary>		/// Tells the delegate that the specified supplementary view was removed from the collection view.		/// </summary>		/// <param name="collectionView">The collection view object that removed the supplementary view.</param>		/// <param name="didEndDisplayingSupplementaryView">The view that was removed.</param>		/// <param name="forElementOfKind">The type of the supplementary view. This string is defined by the layout that presents the view.</param>		/// <param name="atIndexPath">The index path of the data item that the supplementary view represented.</param>		[iOSVersion(6)]		[Export("collectionView")]		[Optional]		void CollectionView(UICollectionView collectionView, UICollectionReusableView didEndDisplayingSupplementaryView, string forElementOfKind, NSIndexPath atIndexPath);				/// <summary>		/// Asks for the custom transition layout to use when moving between the specified layouts.		/// </summary>		/// <param name="collectionView">The collection view whose layout object is changing.</param>		/// <param name="transitionLayoutForOldLayout">The current layout of the collection view. This is the starting point for the transition.</param>		/// <param name="newLayout">The new layout for the collection view.</param>		/// <returns>The collection view transition layout object to use to perform the transition.</returns>		[iOSVersion(7)]		[Export("collectionView")]		[Optional]		UICollectionViewTransitionLayout CollectionView(UICollectionView collectionView, UICollectionViewLayout transitionLayoutForOldLayout, UICollectionViewLayout newLayout);				/// <summary>		/// Asks the delegate if an action menu should be displayed for the specified item.		/// </summary>		/// <param name="collectionView">The collection view object that is making the request.</param>		/// <param name="shouldShowMenuForItemAtIndexPath">The index path of the affected item.</param>		/// <returns>true if the editing menu should be shown positioned near the item and pointing to it or false if it should not.</returns>		[iOSVersion(6)]		[Export("collectionView")]		[Optional]		bool CollectionView(UICollectionView collectionView, NSIndexPath shouldShowMenuForItemAtIndexPath);				/// <summary>		/// Asks the delegate if it can perform the specified action on an item in the collection view.		/// </summary>		/// <param name="collectionView">The collection view object that is making the request.</param>		/// <param name="canPerformAction">The selector identifying the action to be performed.</param>		/// <param name="forItemAtIndexPath">The index path of the affected item.</param>		/// <param name="withSender">The object that wants to initiate the action.</param>		/// <returns>true if the command corresponding to action should appear in the editing menu or false if it should not.</returns>		[iOSVersion(6)]		[Export("collectionView")]		[Optional]		bool CollectionView(UICollectionView collectionView, Selector canPerformAction, NSIndexPath forItemAtIndexPath, AnyObject withSender);				/// <summary>		/// Tells the delegate to perform the specified action on an item in the collection view.		/// </summary>		/// <param name="collectionView">The collection view object that is making the request.</param>		/// <param name="performAction">The selector representing the action to be performed.</param>		/// <param name="forItemAtIndexPath">The index path of the affected item.</param>		/// <param name="withSender">The object that initiated the action.</param>		[iOSVersion(6)]		[Export("collectionView")]		[Optional]		void CollectionView(UICollectionView collectionView, Selector performAction, NSIndexPath forItemAtIndexPath, AnyObject withSender);	}}