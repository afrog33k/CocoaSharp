using ObjectiveC;using System;using SwiftSharp.Attributes;using Foundation;namespace UIKit{    //https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UINavigationControllerDelegate_Protocol/index.html#//apple_ref/occ/intf/UINavigationControllerDelegate    /// <summary>    /// Use a navigation controller delegate (a custom object that implements this protocol) to modify behavior when a view controller is pushed or popped from the navigation stack of a UINavigationController object.    /// </summary>    [iOSVersion(2)]    public interface UINavigationControllerDelegate    {        /// <summary>        /// Called just before the navigation controller displays a view controller’s view and navigation item properties.        /// </summary>        /// <param name="navigationController">The navigation controller that is showing the view and properties of a view controller.</param>        /// <param name="willShowViewController">The view controller whose view and navigation item properties are being shown.</param>        /// <param name="animated">true to animate the transition; otherwise, false.</param>        [iOSVersion(2)]        [Export("navigationController")]        [Optional]        void NavigationControllerPreShowView(UINavigationController navigationController, UIViewController willShowViewController, bool animated);                /// <summary>        /// Called just after the navigation controller displays a view controller’s view and navigation item properties.        /// </summary>        /// <param name="navigationController">The navigation controller that is showing the view and properties of a view controller.</param>        /// <param name="didShowViewController">The view controller whose view and navigation item properties are being shown.</param>        /// <param name="animated">true to animate the transition; otherwise, false.</param>        [iOSVersion(2)]        [Export("navigationController")]        [Optional]        void NavigationControllerPostShowView(UINavigationController navigationController, UIViewController didShowViewController, bool animated);                /// <summary>        /// Called to allow the delegate to return a noninteractive animator object for use during view controller transitions.        /// </summary>        /// <param name="navigationController">The navigation controller whose navigation stack is changing.</param>        /// <param name="animationControllerForOperation">The type of transition operation that is occurring. For a list of possible values, see the “UINavigationControllerOperation” constants.</param>        /// <param name="fromViewController">The currently visible view controller.</param>        /// <param name="toViewController">The view controller that should be visible at the end of the transition.</param>        /// <returns>The animator object responsible for managing the transition animations, or nil if you want to use the standard navigation controller transitions. The object you return must conform to the UIViewControllerAnimatorTransitioning protocol.</returns>        [iOSVersion(7)]        [Export("navigationController")]        [Optional]        UIViewControllerAnimatedTransitioning NavigationController(UINavigationController navigationController, UINavigationControllerOperation animationControllerForOperation, UIViewController fromViewController, UIViewController toViewController);                /// <summary>        /// Called to allow the delegate to return an interactive animator object for use during view controller transitions.        /// </summary>        /// <param name="navigationController">The navigation controller whose navigation stack is changing.</param>        /// <param name="interactionControllerForAnimationController">The noninteractive animator object provided by the delegate’s navigationController:animationControllerForOperation:fromViewController:toViewController: method.</param>        /// <returns>The animator object responsible for managing the transition animations, or nil if you want to use the standard navigation controller transitions. The object you return must conform to the UIViewControllerinteractiveTransitioning protocol.</returns>        [iOSVersion(7)]        [Export("navigationController")]        [Optional]        UIViewControllerinteractiveTransitioning NavigationController(UINavigationController navigationController, UIViewControllerAnimatedTransitioning interactionControllerForAnimationController);                /// <summary>        /// Returns the preferred orientation for presentation of the navigation controller, as determined by the delegate.        /// </summary>        /// <param name="navigationController">The navigation controller</param>        /// <returns>The preferred orientation for presenting the navigation controller.</returns>        [iOSVersion(7)]        [Export("navigationControllerPreferredinterfaceOrientationForPresentation")]        [Optional]        UIinterfaceOrientation NavigationControllerPreferredinterfaceOrientationForPresentation(UINavigationController navigationController);                /// <summary>        /// Returns the complete set of supported interface orientations for the navigation controller, as determined by the delegate.        /// </summary>        /// <param name="navigationController">The navigation controller</param>        /// <returns>One of the UIinterfaceOrientationMask constants that represents the set of interface orientations supported by the navigation controller.</returns>        [iOSVersion(7)]        [Export("navigationControllerSupportedinterfaceOrientations")]        [Optional]        int NavigationControllerSupportedinterfaceOrientations(UINavigationController navigationController);    }

    /// <summary>
    /// These constants define the type of navigation controller transitions that can occur.
    /// </summary>
    public enum UINavigationControllerOperation
    {
        /// <summary>
        /// No operation is taking place.
        /// </summary>
        [iOSVersion(7)]
        None,

        /// <summary>
        /// A view controller is being pushed onto the navigation stack.
        /// </summary>
        [iOSVersion(7)]
        Push,

        /// <summary>
        /// The topmost view controller is being removed from the navigation stack.
        /// </summary>
        [iOSVersion(7)]
        Pop,
    }}