using ObjectiveC;using System;using SwiftSharp.Attributes;using System.Collections.Generic;using Foundation;using CoreGraphics;namespace UIKit{    /// <summary>    /// The UIAlertViewDelegate protocol defines the methods a delegate of a UIAlertView object should implement. The delegate implements the button actions and any other custom behavior. Some of the methods defined in this protocol are optional.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIAlertViewDelegate_Protocol/index.html#//apple_ref/occ/intf/UIAlertViewDelegate"/>    [iOSVersion(2)]    public interface UIAlertViewDelegate//: NSObjectProtocol    {        /// <summary>        /// Sent to the delegate when the user clicks a button on an alert view.        /// </summary>        /// <param name="alertView">The alert view containing the button.</param>        /// <param name="clickedButtonAtIndex">The index of the button that was clicked. The button indices start at 0.</param>        [iOSVersion(2)]        [Export("alertView")]        void AlertView(UIAlertView alertView, int clickedButtonAtIndex);                /// <summary>        /// Sent to the delegate to determine whether the first non-cancel button in the alert should be enabled.        /// </summary>        /// <param name="alertView">The alert view that is being configured.</param>        [iOSVersion(5)]        [Export("alertViewShouldEnableFirstOtherButton")]        bool AlertViewShouldEnableFirstOtherButton(UIAlertView alertView);                /// <summary>        /// Sent to the delegate before a model view is presented to the user.        /// </summary>        /// <param name="alertView">The alert view that is about to be displayed.</param>        [iOSVersion(2)]        [Export("willPresentAlertView")]        void WillPresentAlertView(UIAlertView alertView);                /// <summary>        /// Sent to the delegate after an alert view is presented to the user.        /// </summary>        /// <param name="alertView">The alert view that was displayed.</param>        [iOSVersion(2)]        [Export("didPresentAlertView")]        void DidPresentAlertView(UIAlertView alertView);                /// <summary>        /// Sent to the delegate before an alert view is dismissed.        /// </summary>        /// <param name="alertView">The alert view that is about to be dismissed.</param>        /// <param name="willDismissWithButtonIndex">The index of the button that was clicked. The button indices start at 0. If this is the cancel button index, the alert view is canceling. If -1, the cancel button index is not set.</param>        /// <param name="NAME_YOUR_PARAMS">DO NOT USE THIS PARAMETER - Instead make sure to name the parameters you're using.</param>        [iOSVersion(2)]        [Export("alertView")]        [IgnoreParameter("NAME_YOUR_PARAMS")]        void AlertView(UIAlertView alertView, int willDismissWithButtonIndex, bool NAME_YOUR_PARAMS = false);                /// <summary>        /// Sent to the delegate after an alert view is dismissed from the screen.        /// </summary>        /// <param name="alertView">The alert view that was dismissed.</param>        /// <param name="didDismissWithButtonIndex">The index of the button that was clicked. The button indices start at 0. If this is the cancel button index, the alert view is canceling. If -1, the cancel button index is not set.</param>        /// <param name="NAME_YOUR_PARAMS">DO NOT USE THIS PARAMETER - Instead make sure to name the parameters you're using.</param>        [iOSVersion(2)]        [Export("alertView")]        [IgnoreParameter("NAME_YOUR_PARAMS")]        void AlertView(UIAlertView alertView, int didDismissWithButtonIndex, int NAME_YOUR_PARAMS = 0);                /// <summary>        /// Sent to the delegate before an alert view is canceled.        /// </summary>        /// <param name="alertView">The alert view that will be canceled.</param>        [iOSVersion(2)]        [Export("alertViewCancel")]        void AlertViewCancel(UIAlertView alertView);    }}