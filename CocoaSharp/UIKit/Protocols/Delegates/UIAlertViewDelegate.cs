using ObjectiveC;using System;using SwiftSharp.Attributes;using Foundation;namespace UIKit{	//https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIAlertViewDelegate_Protocol/index.html#//apple_ref/occ/intf/UIAlertViewDelegate	/// <summary>	/// The UIAlertViewDelegate protocol defines the methods a delegate of a UIAlertView object should implement. The delegate implements the button actions and any other custom behavior. Some of the methods defined in this protocol are optional.	/// </summary>	[iOSVersion(2)]	public interface UIAlertViewDelegate	{		/// <summary>		/// Sent to the delegate when the user clicks a button on an alert view.		/// </summary>		/// <param name="alertView">The alert view containing the button.</param>		/// <param name="clickedButtonAtIndex">The index of the button that was clicked. The button indices start at 0.</param>		[iOSVersion(2)]		[Export("alertView")]		[Optional]		void AlertViewButtonClickedAtIndex(UIAlertView alertView, int clickedButtonAtIndex);				/// <summary>		/// Sent to the delegate to determine whether the first non-cancel button in the alert should be enabled.		/// </summary>		/// <param name="alertView">The alert view that is being configured.</param>		/// <returns>true if the button should be enabled, no if the button should be disabled.</returns>		[iOSVersion(5)]		[Export("alertViewShouldEnableFirstOtherButton")]		[Optional]		bool AlertViewShouldEnableFirstOtherButton(UIAlertView alertView);				/// <summary>		/// Sent to the delegate before a model view is presented to the user.		/// </summary>		/// <param name="alertView">The alert view that is about to be displayed.</param>		[iOSVersion(2)]		[Export("willPresentAlertView")]		[Optional]		void WillPresentAlertView(UIAlertView alertView);				/// <summary>		/// Sent to the delegate after an alert view is presented to the user.		/// </summary>		/// <param name="alertView">The alert view that was displayed.</param>		[iOSVersion(2)]		[Export("didPresentAlertView")]		[Optional]		void DidPresentAlertView(UIAlertView alertView);				/// <summary>		/// Sent to the delegate before an alert view is dismissed.		/// </summary>		/// <param name="alertView">The alert view that is about to be dismissed.</param>		/// <param name="willDismissWithButtonIndex">The index of the button that was clicked. The button indices start at 0. If this is the cancel button index, the alert view is canceling. If -1, the cancel button index is not set.</param>		[iOSVersion(2)]		[Export("alertView")]		[Optional]		void AlertViewPreDismissWithButtonIndex(UIAlertView alertView, int willDismissWithButtonIndex);				/// <summary>		/// Sent to the delegate after an alert view is dismissed from the screen.		/// </summary>		/// <param name="alertView">The alert view that was dismissed.</param>		/// <param name="didDismissWithButtonIndex">The index of the button that was clicked. The button indices start at 0. If this is the cancel button index, the alert view is canceling. If -1, the cancel button index is not set.</param>		[iOSVersion(2)]		[Export("alertView")]		[Optional]		void AlertViewPostDismissWithButtonIndex(UIAlertView alertView, int didDismissWithButtonIndex);				/// <summary>		/// Sent to the delegate before an alert view is canceled.		/// </summary>		/// <param name="alertView">The alert view that will be canceled.</param>		[iOSVersion(2)]		[Export("alertViewCancel")]		[Optional]		void AlertViewCancel(UIAlertView alertView);	}}