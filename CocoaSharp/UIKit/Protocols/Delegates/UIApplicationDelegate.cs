using ObjectiveC;using System;using SharpSwift.Attributes;using System.Collections.Generic;using Foundation;using CoreGraphics;namespace UIKit{    /// <summary>    /// The UIApplicationDelegate protocol defines methods that are called by the singleton UIApplication object in response to important events in the lifetime of your app. The app delegate works alongside the app object to ensure your app interacts properly with the system and with other apps. Specifically, the methods of the app delegate give you a chance to respond to important changes. For example, you use the methods of the app delegate to respond to state transitions, such as when your app moves from foreground to background execution, and to respond to incoming notifications. In many cases, the methods of the app delegate are the only way to receive these important notifications.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIApplicationDelegate_Protocol/index.html#//apple_ref/occ/intf/UIApplicationDelegate"/>    [iOSVersion(2)]    [Export("")]    public interface UIApplicationDelegate//: NSObjectProtocol    {        /// <summary>        /// Tells the delegate that the launch process has begun but that state restoration has not yet occurred.        /// </summary>        /// <param name="application">The singleton app object.</param>        /// <param name="willFinishLaunchingWithOptions">A dictionary indicating the reason the app was launched (if any). The contents of this dictionary may be empty in situations where the user launched the app directly. For information about the possible keys in this dictionary and how to handle them, see Launch Options Keys.</param>        //[iOSVersion(6)]        //[Export("application")]        //[InheritOptional]        //bool Application(UIApplication application, Dictionary<NSObject, AnyObject> willFinishLaunchingWithOptions);                /// <summary>        /// Tells the delegate that the launch process is almost done and the app is almost ready to run.        /// </summary>        /// <param name="application">The singleton app object.</param>        /// <param name="didFinishLaunchingWithOptions">A dictionary indicating the reason the app was launched (if any). The contents of this dictionary may be empty in situations where the user launched the app directly. For information about the possible keys in this dictionary and how to handle them, see Launch Options Keys.</param>        /// <param name="NAME_YOUR_PARAMS">DO NOT USE THIS PARAMETER - Instead make sure to name the parameters you're using.</param>        //[iOSVersion(3)]        //[Export("application")]        //[InheritOptional]        //[IgnoreParameter("NAME_YOUR_PARAMS")]        //bool Application(UIApplication application, Dictionary<NSObject, AnyObject> didFinishLaunchingWithOptions, bool NAME_YOUR_PARAMS = false);                /// <summary>        /// Tells the delegate that the app has become active.        /// </summary>        /// <param name="application">The singleton app object.</param>        //[iOSVersion(2)]        //[Export("applicationDidBecomeActive")]        //[InheritOptional]        //void ApplicationDidBecomeActive(UIApplication application);                /// <summary>        /// Tells the delegate that the app is about to become inactive.        /// </summary>        /// <param name="application">The singleton app object.</param>        //[iOSVersion(2)]        //[Export("applicationWillResignActive")]        //[InheritOptional]        //void ApplicationWillResignActive(UIApplication application);                /// <summary>        /// Tells the delegate that the app is now in the background.        /// </summary>        /// <param name="application">The singleton app object.</param>        //[iOSVersion(4)]        //[Export("applicationDidEnterBackground")]        //[InheritOptional]        //void ApplicationDidEnterBackground(UIApplication application);                /// <summary>        /// Tells the delegate that the app is about to enter the foreground.        /// </summary>        /// <param name="application">The singleton app object.</param>        //[iOSVersion(4)]        //[Export("applicationWillEnterForeground")]        //[InheritOptional]        //void ApplicationWillEnterForeground(UIApplication application);                /// <summary>        /// Tells the delegate when the app is about to terminate.        /// </summary>        /// <param name="application">The singleton app object.</param>        //[iOSVersion(2)]        //[Export("applicationWillTerminate")]        //[InheritOptional]        //void ApplicationWillTerminate(UIApplication application);                /// <summary>        /// Tells the app that it can begin a fetch operation if it has data to download.        /// </summary>        /// <param name="application">The singleton app object.</param>        /// <param name="performFetchWithCompletionHandler">The block to execute when the download operation is complete. When calling this block, pass in the fetch result value that best describes the results of your download operation. You must call this handler and should do so as soon as possible. For a list of possible values, see the UIBackgroundFetchResult type.</param>        //[iOSVersion(7)]        //[Export("application")]        //[InheritOptional]        //void Application(UIApplication application, Action<UIBackgroundFetchResult> performFetchWithCompletionHandler);                /// <summary>        /// Tells the delegate that events related to a URL session are waiting to be processed.        /// </summary>        /// <param name="application">The singleton app object.</param>        /// <param name="handleEventsForBackgroundURLSession">The identifier of the URL session requiring attention. If your app was just launched, you can use this identifier to create a new NSURLSession object that can receive the events.</param>        /// <param name="completionHandler">The completion handler to call when you finish processing the events. Calling this completion handler lets the system know that your appâ€™s user interface is updated and a new snapshot can be taken.</param>        //[iOSVersion(7)]        //[Export("application")]        //[InheritOptional]        //void Application(UIApplication application, string handleEventsForBackgroundURLSession, Action completionHandler);                /// <summary>        /// Tells the delegate that the app successfully registered with Apple Push Notification service (APNs).        /// </summary>        /// <param name="application">The app object that initiated the remote-notification registration process.</param>        /// <param name="didRegisterForRemoteNotificationsWithDeviceToken">A token that identifies the device to APNs. The token is an opaque data type because that is the form that the provider needs to submit to the APNs servers when it sends a notification to a device. The APNs servers require a binary format for performance reasons.         ///   The size of a device token is 32 bytes.        ///   Note that the device token is different from the uniqueIdentifier property of UIDevice because, for security and privacy reasons, it must change when the device is wiped.</param>        //[iOSVersion(3)]        //[Export("application")]        //[InheritOptional]        //void Application(UIApplication application, NSData didRegisterForRemoteNotificationsWithDeviceToken);                /// <summary>        /// Sent to the delegate when Apple Push Notification service cannot successfully complete the registration process.        /// </summary>        /// <param name="application">The app object that initiated the remote-notification registration process.</param>        /// <param name="didFailToRegisterForRemoteNotificationsWithError">An NSError object that encapsulates information why registration did not succeed. The app can choose to display this information to the user.</param>        //[iOSVersion(3)]        //[Export("application")]        //[InheritOptional]        //void Application(UIApplication application, NSError didFailToRegisterForRemoteNotificationsWithError);                /// <summary>        /// Tells the app that a remote notification arrived that indicates there is data to be fetched.        /// </summary>        /// <param name="application">The singleton app object.</param>        /// <param name="didReceiveRemoteNotification">A dictionary that contains information related to the remote notification, potentially including a badge number for the app icon, an alert sound, an alert message to display to the user, a notification identifier, and custom data. The provider originates it as a JSON-defined dictionary that iOS converts to an NSDictionary object; the dictionary may contain only property-list objects plus NSNull. For more information about the contents of the remote notification dictionary, see Local and Remote Notification Programming Guide.</param>        /// <param name="fetchCompletionHandler">The block to execute when the download operation is complete. When calling this block, pass in the fetch result value that best describes the results of your download operation. You must call this handler and should do so as soon as possible. For a list of possible values, see the UIBackgroundFetchResult type.</param>        //[iOSVersion(7)]        //[Export("application")]        //[InheritOptional]        //void Application(UIApplication application, Dictionary<NSObject, AnyObject> didReceiveRemoteNotification, Action<UIBackgroundFetchResult> fetchCompletionHandler);                /// <summary>        /// Tells the app delegate to perform the custom action specified by a remote notification.        /// </summary>        /// <param name="application">The app object that received the remote notification.</param>        /// <param name="handleActionWithIdentifier">The identifier associated with the custom action.</param>        /// <param name="forRemoteNotification">A dictionary that contains information related to the remote notification. This dictionary originates from the provider as a JSON-defined dictionary, which iOS converts to an NSDictionary object before calling this method. The contents of the dictionary are the remote notification payload, which consists only of property-list objects plus NSNull. For more information about the contents of the remote notification dictionary, see Local and Remote Notification Programming Guide.</param>        /// <param name="completionHandler">The block to execute when you are finished performing the specified action. You must call this block at the end of your method.</param>        //[iOSVersion(8)]        //[Export("application")]        //[InheritOptional]        //void Application(UIApplication application, [Optional] string handleActionWithIdentifier, Dictionary<NSObject, AnyObject> forRemoteNotification, Action completionHandler);                /// <summary>        /// Tells the delegate that the running app received a remote notification.        /// </summary>        /// <param name="application">The app object that received the remote notification.</param>        /// <param name="didReceiveRemoteNotification">A dictionary that contains information related to the remote notification, potentially including a badge number for the app icon, an alert sound, an alert message to display to the user, a notification identifier, and custom data. The provider originates it as a JSON-defined dictionary that iOS converts to an NSDictionary object; the dictionary may contain only property-list objects plus NSNull.</param>        /// <param name="NAME_YOUR_PARAMS">DO NOT USE THIS PARAMETER - Instead make sure to name the parameters you're using.</param>        //[iOSVersion(3)]        //[Export("application")]        //[InheritOptional]        //[IgnoreParameter("NAME_YOUR_PARAMS")]        //void Application(UIApplication application, Dictionary<NSObject, AnyObject> didReceiveRemoteNotification, int NAME_YOUR_PARAMS = 0);                /// <summary>        /// Sent to the delegate when a running app receives a local notification.        /// </summary>        /// <param name="application">The app object that received the local notification.</param>        /// <param name="didReceiveLocalNotification">A local notification that encapsulates details about the notification, potentially including custom data.</param>        //[iOSVersion(4)]        //[Export("application")]        //[InheritOptional]        //void Application(UIApplication application, UILocalNotification didReceiveLocalNotification);                /// <summary>        /// Tells the delegate that the user selected a custom action from the alert panel of a local notification.        /// </summary>        /// <param name="application">The app object that received the local notification.</param>        /// <param name="handleActionWithIdentifier">The identifier associated with the custom action. This string corresponds to the identifier from the UILocalNotificationAction object that was used to configure the action in the local notification.</param>        /// <param name="forLocalNotification">The local notification object that was triggered.</param>        /// <param name="completionHandler">A block to call when you are finished performing the action.</param>        //[iOSVersion(8)]        //[Export("application")]        //[InheritOptional]        //void Application(UIApplication application, [Optional] string handleActionWithIdentifier, UILocalNotification forLocalNotification, Action completionHandler);                /// <summary>        /// Tells the delegate what types of notifications may be used to get the userâ€™s attention.        /// </summary>        /// <param name="application">The app object that registered the user notification settings.</param>        /// <param name="didRegisterUserNotificationSettings">The user notification settings that are available to your app. The settings in this object may be different than the ones you originally requested.</param>        //[iOSVersion(8)]        //[Export("application")]        //[InheritOptional]        //void Application(UIApplication application, UIUserNotificationSettings didRegisterUserNotificationSettings);                /// <summary>        /// Tells the delegate when the app receives a memory warning from the system.        /// </summary>        /// <param name="application">The singleton app object.</param>        //[iOSVersion(2)]        //[Export("applicationDidReceiveMemoryWarning")]        //[InheritOptional]        //void ApplicationDidReceiveMemoryWarning(UIApplication application);                /// <summary>        /// Tells the delegate when there is a significant change in the time.        /// </summary>        /// <param name="application">The singleton app object.</param>        //[iOSVersion(2)]        //[Export("applicationSignificantTimeChange")]        //[InheritOptional]        //void ApplicationSignificantTimeChange(UIApplication application);                /// <summary>        /// Asks the delegate to respond to a request from a paired WatchKit app.        /// </summary>        /// <param name="application">The singleton app object.</param>        /// <param name="handleWatchKitExtensionRequest">A dictionary provided by the WatchKit app with the request information. Use the data in this dictionary to process the request from the WatchKit app.</param>        /// <param name="reply">A block to execute with the results of the request. This block has no return value and takes the following parameter:        ///       replyInfo        ///   A dictionary containing data to return to the WatchKit app. The contents of the dictionary must be serializable to a property list file. The contents of this dictionary are at your discretion and you may specify nil.</param>        //[iOSVersion(8.2)]        //[Export("application")]        //[InheritOptional]        //void Application([Unwrapped] UIApplication application, Dictionary<NSObject, AnyObject> handleWatchKitExtensionRequest, Action<Dictionary<NSObject, AnyObject>> reply);                /// <summary>        /// Asks the delegate whether the appâ€™s state should be preserved.        /// </summary>        /// <param name="application">The singleton app object.</param>        /// <param name="shouldSaveApplicationState">The keyed archiver into which you can put high-level state information.</param>        //[iOSVersion(6)]        //[Export("application")]        //[InheritOptional]        //bool Application(UIApplication application, NSCoder shouldSaveApplicationState);                /// <summary>        /// Asks the delegate whether the appâ€™s saved state information should be restored.        /// </summary>        /// <param name="application">The singleton app object.</param>        /// <param name="shouldRestoreApplicationState">The keyed archiver containing the appâ€™s previously saved state information.</param>        /// <param name="NAME_YOUR_PARAMS">DO NOT USE THIS PARAMETER - Instead make sure to name the parameters you're using.</param>        //[iOSVersion(6)]        //[Export("application")]        //[InheritOptional]        //[IgnoreParameter("NAME_YOUR_PARAMS")]        //bool Application(UIApplication application, NSCoder shouldRestoreApplicationState, bool NAME_YOUR_PARAMS = false);                /// <summary>        /// Asks the delegate to provide the specified view controller.        /// </summary>        /// <param name="application">The singleton app object.</param>        /// <param name="viewControllerWithRestorationIdentifierPath">An array of NSString objects corresponding to the restoration identifiers of the desired view controller and all of its ancestors in the view controller hierarchy. The last value in the array is the restoration identifier of the desired view controller. Earlier entries represent the restoration identifiers of its ancestors.</param>        /// <param name="coder">The keyed archiver containing the appâ€™s saved state information.</param>        //[iOSVersion(6)]        //[Export("application")]        //[InheritOptional]        //[return:Optional]        //UIViewController Application(UIApplication application, AnyObject[] viewControllerWithRestorationIdentifierPath, NSCoder coder);                /// <summary>        /// Tells your delegate to save any high-level state information at the beginning of the state preservation process.        /// </summary>        /// <param name="application">The singleton app object.</param>        /// <param name="willEncodeRestorableStateWithCoder">The keyed archiver in which to write any state information.</param>        /// <param name="NAME_YOUR_PARAMS">DO NOT USE THIS PARAMETER - Instead make sure to name the parameters you're using.</param>        //[iOSVersion(6)]        //[Export("application")]        //[InheritOptional]        //[IgnoreParameter("NAME_YOUR_PARAMS")]        //void Application(UIApplication application, NSCoder willEncodeRestorableStateWithCoder, int NAME_YOUR_PARAMS = 0);                /// <summary>        /// Tells your delegate to restore any high-level state information as part of the state restoration process.        /// </summary>        /// <param name="application">The singleton app object.</param>        /// <param name="didDecodeRestorableStateWithCoder">The keyed archiver containing the appâ€™s previously saved state information.</param>        /// <param name="NAME_YOUR_PARAMS">DO NOT USE THIS PARAMETER - Instead make sure to name the parameters you're using.</param>        //[iOSVersion(6)]        //[Export("application")]        //[InheritOptional]        //[IgnoreParameter("NAME_YOUR_PARAMS")]        //void Application(UIApplication application, NSCoder didDecodeRestorableStateWithCoder, string NAME_YOUR_PARAMS = "");                /// <summary>        /// Asks the delegate to open a resource identified by URL.        /// </summary>        /// <param name="application">The singleton app object.</param>        /// <param name="openURL">The URL resource to open. This resource can be a network resource or a file. For information about the Apple-registered URL schemes, see Apple URL Scheme Reference.</param>        /// <param name="sourceApplication">The bundle ID of the app that is requesting your app to open the URL (url).</param>        /// <param name="annotation">A property list object supplied by the source app to communicate information to the receiving app.</param>        //[iOSVersion(4.2)]        //[Export("application")]        //[InheritOptional]        //bool Application(UIApplication application, NSURL openURL, [Optional] string sourceApplication, [Optional] AnyObject annotation);                /// <summary>        /// Tells the delegate that the user wants to continue an activity whose data might not yet be available.        /// </summary>        /// <param name="application">The shared app object.</param>        /// <param name="willContinueUserActivityWithType">The requested activity type.</param>        //[iOSVersion(8)]        //[Export("application")]        //[InheritOptional]        //bool Application(UIApplication application, string willContinueUserActivityWithType);                /// <summary>        /// Tells the delegate that the data for continuing an activity is available.        /// </summary>        /// <param name="application">The shared app object.</param>        /// <param name="continueUserActivity">The activity object containing the data associated with the task the user was performing. Use the data in this object to recreate what the user was doing.</param>        /// <param name="restorationHandler">A block to execute if your app creates objects to perform the task. Calling this block is optional and you can copy this block and call it at a later time. When calling a saved copy of the block, you must call it from the appâ€™s main thread. This block has no return value and takes the following parameter:        ///       restorableObjects        ///   An array of UIResponder objects representing objects you created or fetched in order to perform the operation. The system calls the restoreUserActivityState: method of each object in the array to give it a chance to perform the operation.</param>        //[iOSVersion(8)]        //[Export("application")]        //[InheritOptional]        //bool Application(UIApplication application, NSUserActivity continueUserActivity, Action<AnyObject[]> restorationHandler);                /// <summary>        /// Tells the delegate that the activity was updated. (required)        /// </summary>        /// <param name="application">The shared app object.</param>        /// <param name="didUpdateUserActivity">The activity object containing the data associated with the task the user was performing.</param>        //[iOSVersion(8)]        //[Export("application")]        //[InheritOptional]        //void Application(UIApplication application, NSUserActivity didUpdateUserActivity);                /// <summary>        /// Tells the delegate that the activity could not be continued.        /// </summary>        /// <param name="application">The shared app object.</param>        /// <param name="didFailToContinueUserActivityWithType">The activity type that was attempted.</param>        /// <param name="error">An error object indicating the reason for the failure.</param>        //[iOSVersion(8)]        //[Export("application")]        //[InheritOptional]        //void Application(UIApplication application, string didFailToContinueUserActivityWithType, NSError error);                /// <summary>        /// Asks the delegate to grant permission to use app extensions that are based on a specified extension point identifier. (required)        /// </summary>        /// <param name="application">The shared app object.</param>        /// <param name="shouldAllowExtensionPointIdentifier">A constant identifying an extension point.</param>        /// <param name="NAME_YOUR_PARAMS">DO NOT USE THIS PARAMETER - Instead make sure to name the parameters you're using.</param>        //[iOSVersion(8)]        //[Export("application")]        //[InheritOptional]        //[IgnoreParameter("NAME_YOUR_PARAMS")]        //bool Application(UIApplication application, string shouldAllowExtensionPointIdentifier, bool NAME_YOUR_PARAMS = false);                /// <summary>        /// Tells the delegate when the interface orientation of the status bar is about to change.        /// </summary>        /// <param name="application">The singleton app object.</param>        /// <param name="willChangeStatusBarOrientation">A constant that indicates the new orientation of the appâ€™s user interface; see Monitoring App State Changes for details.</param>        /// <param name="duration">The duration of the animation to the new orientation, in seconds.</param>        //[iOSVersion(2)]        //[Export("application")]        //[InheritOptional]        //void Application(UIApplication application, UIInterfaceOrientation willChangeStatusBarOrientation, NSTimeInterval duration);                /// <summary>        /// Tells the delegate when the interface orientation of the status bar has changed.        /// </summary>        /// <param name="application">The singleton app object.</param>        /// <param name="didChangeStatusBarOrientation">A constant that indicates the previous orientation of the appâ€™s user interface; see Monitoring App State Changes for details.</param>        //[iOSVersion(2)]        //[Export("application")]        //[InheritOptional]        //void Application(UIApplication application, UIInterfaceOrientation didChangeStatusBarOrientation);                /// <summary>        /// Tells the delegate when the frame of the status bar is about to change.        /// </summary>        /// <param name="application">The singleton app object.</param>        /// <param name="willChangeStatusBarFrame">The changed frame of the status bar, in screen coordinates.</param>        //[iOSVersion(2)]        //[Export("application")]        //[InheritOptional]        //void Application(UIApplication application, CGRect willChangeStatusBarFrame);                /// <summary>        /// Tells the delegate when the frame of the status bar has changed.        /// </summary>        /// <param name="application">The singleton app object.</param>        /// <param name="didChangeStatusBarFrame">The previous frame of the status bar, in screen coordinates.</param>        /// <param name="NAME_YOUR_PARAMS">DO NOT USE THIS PARAMETER - Instead make sure to name the parameters you're using.</param>        //[iOSVersion(2)]        //[Export("application")]        //[InheritOptional]        //[IgnoreParameter("NAME_YOUR_PARAMS")]        //void Application(UIApplication application, CGRect didChangeStatusBarFrame, bool NAME_YOUR_PARAMS = false);                /// <summary>        /// Tells the delegate that the protected files are about to become unavailable.        /// </summary>        /// <param name="application">The singleton app object.</param>        //[iOSVersion(4)]        //[Export("applicationProtectedDataWillBecomeUnavailable")]        //[InheritOptional]        //void ApplicationProtectedDataWillBecomeUnavailable(UIApplication application);                /// <summary>        /// Tells the delegate that protected files are available now.        /// </summary>        /// <param name="application">The singleton app object.</param>        //[iOSVersion(4)]        //[Export("applicationProtectedDataDidBecomeAvailable")]        //[InheritOptional]        //void ApplicationProtectedDataDidBecomeAvailable(UIApplication application);                /// <summary>        /// Asks the delegate for the interface orientations to use for the view controllers in the specified window.        /// </summary>        /// <param name="application">The singleton app object.</param>        /// <param name="supportedInterfaceOrientationsForWindow">The window whose interface orientations you want to retrieve.</param>        //[iOSVersion(6)]        //[Export("application")]        //[InheritOptional]        //int Application(UIApplication application, [Optional] UIWindow supportedInterfaceOrientationsForWindow);                /// <summary>        /// Tells the delegate when the app has finished launching.        /// </summary>        /// <param name="application">The singleton app object.</param>        //[iOSVersion(2)]        //[Export("applicationDidFinishLaunching")]        //[InheritOptional]        //void ApplicationDidFinishLaunching(UIApplication application);                /// <summary>        /// Asks the delegate to open a resource identified by URL.        /// </summary>        /// <param name="application">The singleton app object.</param>        /// <param name="handleOpenURL">A object representing a URL (Universal Resource Locator). See the appendix of App Programming Guide for iOS for Apple-registered schemes for URLs.</param>        //[iOSVersion(2)]        //[Export("application")]        //[InheritOptional]        //bool Application(UIApplication application, NSURL handleOpenURL);                /// <summary>        /// The window to use when presenting a storyboard.        /// </summary>        [iOSVersion(5)]        [Export("window")]        [Optional]        UIWindow Window { get; set; }    }}