using ObjectiveC;using System;using SwiftSharp.Attributes;using System.Collections.Generic;using Foundation;using CoreGraphics;namespace UIKit{    /// <summary>    /// The UIActionSheetDelegate protocol defines the methods a delegate of a UIActionSheet object should implement. The delegate implements the button actions and any other custom behavior. Some of the methods defined in this protocol are optional.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIModalViewDelegate_Protocol/index.html#//apple_ref/occ/intf/UIActionSheetDelegate"/>    [iOSVersion(2)]    public interface UIActionSheetDelegate//: NSObjectProtocol    {        /// <summary>        /// Sent to the delegate when the user clicks a button on an action sheet.        /// </summary>        /// <param name="actionSheet">The action sheet containing the button.</param>        /// <param name="clickedButtonAtIndex">The position of the clicked button. The button indices start at 0.</param>        [iOSVersion(2)]        [Export("actionSheet")]        void ActionSheet(UIActionSheet actionSheet, int clickedButtonAtIndex);                /// <summary>        /// Sent to the delegate before an action sheet is presented to the user.        /// </summary>        /// <param name="actionSheet">The action sheet that is about to be displayed.</param>        [iOSVersion(2)]        [Export("willPresentActionSheet")]        void WillPresentActionSheet(UIActionSheet actionSheet);                /// <summary>        /// Sent to the delegate after an action sheet is presented to the user.        /// </summary>        /// <param name="actionSheet">The action sheet that was displayed.</param>        [iOSVersion(2)]        [Export("didPresentActionSheet")]        void DidPresentActionSheet(UIActionSheet actionSheet);                /// <summary>        /// Sent to the delegate before an action sheet is dismissed.        /// </summary>        /// <param name="actionSheet">The action sheet that is about to be dismissed.</param>        /// <param name="willDismissWithButtonIndex">The index of the button that was clicked. If this is the cancel button index, the action sheet is canceling. If -1, the cancel button index is not set.</param>        /// <param name="NAME_YOUR_PARAMS">DO NOT USE THIS PARAMETER - Instead make sure to name the parameters you're using.</param>        [iOSVersion(2)]        [Export("actionSheet")]        [IgnoreParameter("NAME_YOUR_PARAMS")]        void ActionSheet(UIActionSheet actionSheet, int willDismissWithButtonIndex, bool NAME_YOUR_PARAMS = false);                /// <summary>        /// Sent to the delegate after an action sheet is dismissed from the screen.        /// </summary>        /// <param name="actionSheet">The action sheet that was dismissed.</param>        /// <param name="didDismissWithButtonIndex">The index of the button that was clicked. The button indices start at 0. If this is the cancel button index, the action sheet is canceling. If -1, the cancel button index is not set.</param>        /// <param name="NAME_YOUR_PARAMS">DO NOT USE THIS PARAMETER - Instead make sure to name the parameters you're using.</param>        [iOSVersion(2)]        [Export("actionSheet")]        [IgnoreParameter("NAME_YOUR_PARAMS")]        void ActionSheet(UIActionSheet actionSheet, int didDismissWithButtonIndex, int NAME_YOUR_PARAMS = 0);                /// <summary>        /// Sent to the delegate before an action sheet is canceled.        /// </summary>        /// <param name="actionSheet">The action sheet that will be canceled.</param>        [iOSVersion(2)]        [Export("actionSheetCancel")]        void ActionSheetCancel(UIActionSheet actionSheet);    }}