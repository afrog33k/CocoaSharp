using ObjectiveC;using System;using SwiftSharp.Attributes;using System.Collections.Generic;namespace UIKit{    /// <summary>    /// The delegate of a page view controller must adopt the UIPageViewControllerDelegate protocol. These methods allow the delegate to receive a notification when the device orientation changes and when the user navigates to a new page. For page-curl style transitions, the delegate can provide a different spine location in response to a change in the interface orientation.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIPageViewControllerDelegateProtocolRef/index.html#//apple_ref/occ/intf/UIPageViewControllerDelegate"/>    [iOSVersion(5)]    public interface UIPageViewControllerDelegate//: NSObjectProtocol    {        /// <summary>        /// Called before a gesture-driven transition begins.        /// </summary>        /// <param name="pageViewController">The page view controller.</param>        /// <param name="willTransitionToViewControllers">The view controllers that are being transitioned to.</param>        [iOSVersion(6)]        [Export("pageViewController")]        void PageViewController(UIPageViewController pageViewController, AnyObject[] willTransitionToViewControllers);                /// <summary>        /// Called after a gesture-driven transition completes.        /// </summary>        /// <param name="pageViewController">The page view controller.</param>        /// <param name="didFinishAnimating">true if the animation finished; otherwise, false.</param>        /// <param name="previousViewControllers">The view controllers prior to the transition.</param>        /// <param name="transitionCompleted">true if the user completed the page-turn gesture; otherwise, false.</param>        [iOSVersion(5)]        [Export("pageViewController")]        void PageViewController(UIPageViewController pageViewController, bool didFinishAnimating, AnyObject[] previousViewControllers, bool transitionCompleted);                /// <summary>        /// Returns the spine location for the given orientation.        /// </summary>        /// <param name="pageViewController">The page view controller</param>        /// <param name="spineLocationForInterfaceOrientation">The new orientation.</param>        [iOSVersion(5)]        [Export("pageViewController")]        UIPageViewControllerSpineLocation PageViewController(UIPageViewController pageViewController, UIInterfaceOrientation spineLocationForInterfaceOrientation);                /// <summary>        /// Returns the complete set of supported interface orientations for the page view controller, as determined by the delegate.        /// </summary>        /// <param name="pageViewController">The page view controller.</param>        [iOSVersion(7)]        [Export("pageViewControllerSupportedInterfaceOrientations")]        int PageViewControllerSupportedInterfaceOrientations(UIPageViewController pageViewController);                /// <summary>        /// Returns the preferred orientation for presentation of the page view controller, as determined by the delegate.        /// </summary>        /// <param name="pageViewController">The page view controller.</param>        [iOSVersion(7)]        [Export("pageViewControllerPreferredInterfaceOrientationForPresentation")]        UIInterfaceOrientation PageViewControllerPreferredInterfaceOrientationForPresentation(UIPageViewController pageViewController);    }}