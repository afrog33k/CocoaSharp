using ObjectiveC;using System;using SharpSwift.Attributes;using System.Collections.Generic;using Foundation;using CoreGraphics;namespace UIKit{    /// <summary>    /// The UIAccessibility informal protocol provides accessibility information about an application’s user interface elements. Assistive applications, such as VoiceOver, convey this information to users with disabilities to help them use the application.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/index.html#//apple_ref/doc/uid/TP40008786"/>    [iOSVersion(3)]    [Export("")]    public interface UIAccessibility//:    {        /// <summary>        /// A Boolean value indicating whether the receiver is an accessibility element that an assistive application can access.        /// </summary>        [iOSVersion(3)]        [Export("isAccessibilityElement")]        bool IsAccessibilityElement { get; set; }                /// <summary>        /// The activation point for the accessibility element, in screen coordinates.        /// </summary>        [iOSVersion(5)]        [Export("accessibilityActivationPoint")]        CGPoint AccessibilityActivationPoint { get; set; }                /// <summary>        /// A Boolean value indicating whether the accessibility elements contained within this accessibility element are hidden.        /// </summary>        [iOSVersion(5)]        [Export("accessibilityElementsHidden")]        bool AccessibilityElementsHidden { get; set; }                /// <summary>        /// The frame of the accessibility element, in screen coordinates.        /// </summary>        [iOSVersion(3)]        [Export("accessibilityFrame")]        CGRect AccessibilityFrame { get; set; }                /// <summary>        /// A brief description of the result of performing an action on the accessibility element, in a localized string.        /// </summary>        [iOSVersion(3)]        [Export("accessibilityHint")]        [Unwrapped]        string AccessibilityHint { get; set; }                /// <summary>        /// A succinct label that identifies the accessibility element, in a localized string.        /// </summary>        [iOSVersion(3)]        [Export("accessibilityLabel")]        [Unwrapped]        string AccessibilityLabel { get; set; }                /// <summary>        /// The language in which to speak the accessibility element&#39;s label, value, and hint.        /// </summary>        [iOSVersion(4)]        [Export("accessibilityLanguage")]        [Unwrapped]        string AccessibilityLanguage { get; set; }                /// <summary>        /// The path of the element, in screen coordinates.        /// </summary>        [iOSVersion(7)]        [Export("accessibilityPath")]        [Unwrapped]        UIBezierPath AccessibilityPath { get; set; }                /// <summary>        /// The combination of accessibility traits that best characterize the accessibility element.        /// </summary>        [iOSVersion(3)]        [Export("accessibilityTraits")]        UIAccessibilityTraits AccessibilityTraits { get; set; }                /// <summary>        /// The value of the accessibility element, in a localized string.        /// </summary>        [iOSVersion(3)]        [Export("accessibilityValue")]        [Unwrapped]        string AccessibilityValue { get; set; }                /// <summary>        /// A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.        /// </summary>        [iOSVersion(5)]        [Export("accessibilityViewIsModal")]        bool AccessibilityViewIsModal { get; set; }                /// <summary>        /// A Boolean value indicating whether VoiceOver should group together the elements that are children of the receiver, regardless of their positions on the screen.        /// </summary>        [iOSVersion(6)]        [Export("shouldGroupAccessibilityChildren")]        bool ShouldGroupAccessibilityChildren { get; set; }                /// <summary>        /// The navigation style to apply to the object and its elements.        /// </summary>        [iOSVersion(8)]        [Export("accessibilityNavigationStyle")]        UIAccessibilityNavigationStyle AccessibilityNavigationStyle { get; set; }    }    /// <summary>    /// The types of system Zoom that can be in effect.    /// </summary>    public enum UIAccessibilityZoomType    {        /// <summary>        /// The system zoom type is the text insertion point.        /// </summary>        [iOSVersion(5)]        InsertionPoint,    }    /// <summary>    /// Constants that describe how an object’s elements should be navigated by an assistive technology.    /// </summary>    public enum UIAccessibilityNavigationStyle    {        /// <summary>        /// The assistive technology will automatically determine how the receiver&#39;s elements should be navigated. This is the default value.        /// </summary>        [iOSVersion(8)]        Automatic,        /// <summary>        /// The receiver&#39;s elements should be navigated as separate elements.        /// </summary>        [iOSVersion(8)]        Separate,        /// <summary>        /// The receiver’s elements should be combined and navigated as a single item.        /// </summary>        [iOSVersion(8)]        Combined,    }    /// <summary>    /// A mask that contains the OR combination of the accessibility traits that best characterize an accessibility element.    /// </summary>    [iOSVersion(3)]    public struct UIAccessibilityTraits    {        static public implicit operator UIAccessibilityTraits(UInt64 value)        {            return default(UIAccessibilityTraits);        }        static public implicit operator UInt64(UIAccessibilityTraits value)        {            return default(UInt64);        }

        /// <summary>        /// Accessibility traits that tell an assistive application how an accessibility element behaves or should be treated.        /// </summary>        //UIAccessibilityTraits        var UIAccessibilityTraitButton: UIAccessibilityTraits        var UIAccessibilityTraitLink: UIAccessibilityTraits        var UIAccessibilityTraitSearchField: UIAccessibilityTraits        var UIAccessibilityTraitImage: UIAccessibilityTraits        var UIAccessibilityTraitSelected: UIAccessibilityTraits        var UIAccessibilityTraitPlaysSound: UIAccessibilityTraits        var UIAccessibilityTraitKeyboardKey: UIAccessibilityTraits        var UIAccessibilityTraitStaticText: UIAccessibilityTraits        var UIAccessibilityTraitSummaryElement: UIAccessibilityTraits        var UIAccessibilityTraitNotEnabled: UIAccessibilityTraits        var UIAccessibilityTraitUpdatesFrequently: UIAccessibilityTraits        var UIAccessibilityTraitStartsMediaSession: UIAccessibilityTraits        var UIAccessibilityTraitAdjustable: UIAccessibilityTraits        var UIAccessibilityTraitAllowsDirectInteraction: UIAccessibilityTraits        var UIAccessibilityTraitCausesPageTurn: UIAccessibilityTraits        var UIAccessibilityTraitHeader: UIAccessibilityTraits UIAccessibilityTraitNone { get; set; }
    }






    /// <summary>    /// A notification that an accessible application can send.    /// </summary>    [iOSVersion(3)]    public struct UIAccessibilityNotifications    {        static public implicit operator UIAccessibilityNotifications(uint value)        {            return default(UIAccessibilityNotifications);        }        static public implicit operator uint(UIAccessibilityNotifications value)        {            return default(uint);        }    }    /// <summary>    /// Posted by an application when an announcement needs to be conveyed to the assistive technology. This notification includes a parameter, which is an NSString object that contains the announcement. An assistive technology outputs the announcement string contained in the parameter.    ///   Use this notification to provide accessibility information about events that do not update the application user interface (UI), or that update the UI only briefly.    /// </summary>    public class UIAccessibilityAnnouncementNotification : NSNotification    {        public UIAccessibilityAnnouncementNotification() : base("", null) { }    }    /// <summary>    /// Posted by UIKit when the system has finished reading an announcement. The parameter is a dictionary with two keys, UIAccessibilityAnnouncementKeyStringValue and UIAccessibilityAnnouncementKeyWasSuccessful.    /// </summary>    public class UIAccessibilityAnnouncementDidFinishNotification : NSNotification    {        public UIAccessibilityAnnouncementDidFinishNotification() : base("", null) { }    }    /// <summary>    /// Posted by UIKit when the system’s Bold Text setting has changed. This notification does not include a parameter.    /// </summary>    public class UIAccessibilityBoldTextStatusDidChangeNotification : NSNotification    {        public UIAccessibilityBoldTextStatusDidChangeNotification() : base("", null) { }    }    /// <summary>    /// Posted by UIKit when the setting for closed captioning has changed. This notification does not include a parameter.    /// </summary>    public class UIAccessibilityClosedCaptioningStatusDidChangeNotification : NSNotification    {        public UIAccessibilityClosedCaptioningStatusDidChangeNotification() : base("", null) { }    }    /// <summary>    /// Posted by UIKit when the system’s Darken Colors setting has changed. This notification does not include a parameter.    /// </summary>    public class UIAccessibilityDarkerSystemColorsStatusDidChangeNotification : NSNotification    {        public UIAccessibilityDarkerSystemColorsStatusDidChangeNotification() : base("", null) { }    }    /// <summary>    /// Posted by UIKit when the system’s Grayscale setting has changed. This notification does not include a parameter.    /// </summary>    public class UIAccessibilityGrayscaleStatusDidChangeNotification : NSNotification    {        public UIAccessibilityGrayscaleStatusDidChangeNotification() : base("", null) { }    }    /// <summary>    /// Posted by UIKit when the system’s Guided Access setting has changed.  This notification does not include a parameter.    ///   You can also use the UIAccessibilityIsGuidedAccessEnabled function to determine whether guided access is currently enabled.    /// </summary>    public class UIAccessibilityGuidedAccessStatusDidChangeNotification : NSNotification    {        public UIAccessibilityGuidedAccessStatusDidChangeNotification() : base("", null) { }    }    /// <summary>    /// Posted by UIKit when the setting for inverted colors has changed.  This notification does not include a parameter.    ///   You can also use the UIAccessibilityIsInvertColorsEnabled function to determine whether colors are currently inverted.    /// </summary>    public class UIAccessibilityInvertColorsStatusDidChangeNotification : NSNotification    {        public UIAccessibilityInvertColorsStatusDidChangeNotification() : base("", null) { }    }    /// <summary>    /// Posted by an application when the layout of a screen changes, such as when an element appears or disappears. This notification includes a parameter, which is either an NSString object that VoiceOver speaks or an accessibility element that VoiceOver moves to.    /// </summary>    public class UIAccessibilityLayoutChangedNotification : NSNotification    {        public UIAccessibilityLayoutChangedNotification() : base("", null) { }    }    /// <summary>    /// Posted by UIKit when system audio changes from stereo to mono. This notification does not include a parameter.    /// </summary>    public class UIAccessibilityMonoAudioStatusDidChangeNotification : NSNotification    {        public UIAccessibilityMonoAudioStatusDidChangeNotification() : base("", null) { }    }    /// <summary>    /// Posted by an application when a scroll action has completed and accessibilityScroll: has been called. This notification includes a parameter, which is an NSString object that contains a description of the new scroll position. An assistive technology outputs the description string contained in the parameter.    ///   You can use this notification to provide custom information about the contents of the screen after a user performs a VoiceOver scroll gesture. For example, a tab-based application might provide a string such as “Tab 3 of 5,” or an application that displays information in pages might provide a string such as “Page 19 of 27.”    ///   When an assistive technology repeatedly receives the same scroll position string, it indicates to users that a border or boundary has been reached.    /// </summary>    public class UIAccessibilityPageScrolledNotification : NSNotification    {        public UIAccessibilityPageScrolledNotification() : base("", null) { }    }    /// <summary>    /// Post this notification when you want to pause an assistive technology’s operations temporarily. When posting the notification, specify the assistive technology to be paused as the parameter. For example, you might want to pause scanning in Switch Control while your app is playing an animation. You must balance this notification by posting a UIAccessibilityResumeAssistiveTechnologyNotification notification to resume the assistive technology’s operations.    /// </summary>    public class UIAccessibilityPauseAssistiveTechnologyNotification : NSNotification    {        public UIAccessibilityPauseAssistiveTechnologyNotification() : base("", null) { }    }    /// <summary>    /// Posted by UIKit when the system’s Reduce Motion setting has changed. This notification does not include a parameter.    /// </summary>    public class UIAccessibilityReduceMotionStatusDidChangeNotification : NSNotification    {        public UIAccessibilityReduceMotionStatusDidChangeNotification() : base("", null) { }    }    /// <summary>    /// Posted by UIKit when the system’s Reduce Transparency system setting has changed. This notification does not include a parameter.    /// </summary>    public class UIAccessibilityReduceTransparencyStatusDidChangeNotification : NSNotification    {        public UIAccessibilityReduceTransparencyStatusDidChangeNotification() : base("", null) { }    }    /// <summary>    /// Post this notification to resume an assistive technology’s operations temporarily. When posting the notification, specify the assistive technology to be resumed as the parameter. You must post this notification to balance out the previous posting of a UIAccessibilityPauseAssistiveTechnologyNotification notification.    /// </summary>    public class UIAccessibilityResumeAssistiveTechnologyNotification : NSNotification    {        public UIAccessibilityResumeAssistiveTechnologyNotification() : base("", null) { }    }    /// <summary>    /// Posted by an application when a new view appears that comprises a major portion of the screen. This notification includes a parameter, which is either an NSString object that VoiceOver speaks or an accessibility element that VoiceOver moves to.    /// </summary>    public class UIAccessibilityScreenChangedNotification : NSNotification    {        public UIAccessibilityScreenChangedNotification() : base("", null) { }    }    /// <summary>    /// Posted by UIKit when the system’s Speak Screen setting has changed. This notification does not include a parameter.    /// </summary>    public class UIAccessibilitySpeakScreenStatusDidChangeNotification : NSNotification    {        public UIAccessibilitySpeakScreenStatusDidChangeNotification() : base("", null) { }    }    /// <summary>    /// Posted by UIKit when the system’s Speak Selection setting has changed. This notification does not include a parameter.    /// </summary>    public class UIAccessibilitySpeakSelectionStatusDidChangeNotification : NSNotification    {        public UIAccessibilitySpeakSelectionStatusDidChangeNotification() : base("", null) { }    }    /// <summary>    /// Posted by UIKit when the system’s Switch Control setting has changed. This notification does not include a parameter.    /// </summary>    public class UIAccessibilitySwitchControlStatusDidChangeNotification : NSNotification    {        public UIAccessibilitySwitchControlStatusDidChangeNotification() : base("", null) { }    }    /// <summary>    /// Posted by UIKit when VoiceOver starts or stops. This notification does not include a parameter.    ///   You can use this notification to customize your application’s user interface (UI) for VoiceOver users. For example, if you display a UI element that briefly overlays other parts of your UI, you can make the display persistent for VoiceOver users, but allow it to disappear as designed for users who are not using VoiceOver. You can also use the UIAccessibilityIsVoiceOverRunning function to determine whether VoiceOver is currently running.    /// </summary>    public class UIAccessibilityVoiceOverStatusChanged : NSNotification    {        public UIAccessibilityVoiceOverStatusChanged() : base("", null) { }    }}