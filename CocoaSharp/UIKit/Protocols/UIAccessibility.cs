using ObjectiveC;using System;using SharpSwift.Attributes;using System.Collections.Generic;using Foundation;using CoreGraphics;namespace UIKit{    /// <summary>    /// The UIAccessibility informal protocol provides accessibility information about an application’s user interface elements. Assistive applications, such as VoiceOver, convey this information to users with disabilities to help them use the application.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIAccessibility_Protocol/index.html#//apple_ref/doc/uid/TP40008786"/>    [iOSVersion(3)]    public interface UIAccessibility//:    {        //TODO: double-check that this is empty ?    }    //TODO: comment/double-check this    /// <summary>    /// Accessibility traits that tell an assistive application how an accessibility element behaves or should be treated.    /// </summary>    public enum UIAccessibilityTraits    {        UIAccessibilityTraitButton,        UIAccessibilityTraitLink,        UIAccessibilityTraitSearchField,        UIAccessibilityTraitImage,        UIAccessibilityTraitSelected,        UIAccessibilityTraitPlaysSound,        UIAccessibilityTraitKeyboardKey,        UIAccessibilityTraitStaticText,        UIAccessibilityTraitSummaryElement,        UIAccessibilityTraitNotEnabled,        UIAccessibilityTraitUpdatesFrequently,        UIAccessibilityTraitStartsMediaSession,        UIAccessibilityTraitAdjustable,        UIAccessibilityTraitAllowsDirectInteraction,        UIAccessibilityTraitCausesPageTurn,        UIAccessibilityTraitHeader,        UIAccessibilityTraitNone    }        /// <summary>    /// The types of system Zoom that can be in effect.    /// </summary>    [iOSVersion(5)]    public enum UIAccessibilityZoomType    {        /// <summary>        /// The system zoom type is the text insertion point.        /// </summary>        [iOSVersion(5)]        InsertionPoint,    }    /// <summary>    /// A mask that contains the OR combination of the accessibility traits that best characterize an accessibility element.    /// </summary>    //[iOSVersion(3)]    //public struct UIAccessibilityTraits    //{    //    static public implicit operator UIAccessibilityTraits(UInt64 value)    //    {    //        return default(UIAccessibilityTraits);    //    }    //    static public implicit operator UInt64(UIAccessibilityTraits value)    //    {    //        return default(UInt64);    //    }    //}    /// <summary>    /// A notification that an accessible application can send.    /// </summary>    [iOSVersion(3)]    public struct UIAccessibilityNotifications    {        static public implicit operator UIAccessibilityNotifications(uint value)        {            return default(UIAccessibilityNotifications);        }        static public implicit operator uint(UIAccessibilityNotifications value)        {            return default(uint);        }    }    /// <summary>    /// Use this notification to provide accessibility information about events that do not update the application user interface (UI), or that update the UI only briefly.    /// </summary>    [iOSVersion(4)]    public class UIAccessibilityAnnouncementNotification : NSNotification    {        public UIAccessibilityAnnouncementNotification() : base("", null) { }    }    /// <summary>    ///     /// </summary>    [iOSVersion(6)]    public class UIAccessibilityAnnouncementDidFinishNotification : NSNotification    {        public UIAccessibilityAnnouncementDidFinishNotification() : base("", null) { }    }    /// <summary>    ///     /// </summary>    [iOSVersion(5)]    public class UIAccessibilityClosedCaptioningStatusDidChangeNotification : NSNotification    {        public UIAccessibilityClosedCaptioningStatusDidChangeNotification() : base("", null) { }    }    /// <summary>    /// You can also use the UIAccessibilityIsGuidedAccessEnabled function to determine whether guided access is currently enabled.    /// </summary>    [iOSVersion(6)]    public class UIAccessibilityGuidedAccessStatusDidChangeNotification : NSNotification    {        public UIAccessibilityGuidedAccessStatusDidChangeNotification() : base("", null) { }    }    /// <summary>    /// You can also use the UIAccessibilityIsInvertColorsEnabled function to determine whether colors are currently inverted.    /// </summary>    [iOSVersion(6)]    public class UIAccessibilityInvertColorsStatusDidChangeNotification : NSNotification    {        public UIAccessibilityInvertColorsStatusDidChangeNotification() : base("", null) { }    }    /// <summary>    ///     /// </summary>    [iOSVersion(3)]    public class UIAccessibilityLayoutChangedNotification : NSNotification    {        public UIAccessibilityLayoutChangedNotification() : base("", null) { }    }    /// <summary>    ///     /// </summary>    [iOSVersion(5)]    public class UIAccessibilityMonoAudioStatusDidChangeNotification : NSNotification    {        public UIAccessibilityMonoAudioStatusDidChangeNotification() : base("", null) { }    }    /// <summary>    /// You can use this notification to provide custom information about the contents of the screen after a user performs a VoiceOver scroll gesture. For example, a tab-based application might provide a string such as “Tab 3 of 5,” or an application that displays information in pages might provide a string such as “Page 19 of 27.”    /// </summary>    [iOSVersion(4.2)]    public class UIAccessibilityPageScrolledNotification : NSNotification    {        public UIAccessibilityPageScrolledNotification() : base("", null) { }    }    /// <summary>    ///     /// </summary>    [iOSVersion(3)]    public class UIAccessibilityScreenChangedNotification : NSNotification    {        public UIAccessibilityScreenChangedNotification() : base("", null) { }    }    /// <summary>    /// You can use this notification to customize your application’s user interface (UI) for VoiceOver users. For example, if you display a UI element that briefly overlays other parts of your UI, you can make the display persistent for VoiceOver users, but allow it to disappear as designed for users who are not using VoiceOver. You can also use the UIAccessibilityIsVoiceOverRunning function to determine whether VoiceOver is currently running.    /// </summary>    [iOSVersion(4)]    public class UIAccessibilityVoiceOverStatusChanged : NSNotification    {        public UIAccessibilityVoiceOverStatusChanged() : base("", null) { }    }}