using ObjectiveC;using System;using SharpSwift.Attributes;using System.Collections.Generic;using Foundation;using CoreGraphics;namespace UIKit{    /// <summary>    /// An instance of a class that adopts the UITextInputTokenizer protocol is a tokenizer; a tokenizer allows the text input system to evaluate text units of different granularities. Granularities of text units are always evaluated with reference to a storage or reference direction.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UITextInputTokenizer_Protocol/index.html#//apple_ref/occ/intf/UITextInputTokenizer"/>    [iOSVersion(3.2)]    public interface UITextInputTokenizer//: NSObjectProtocol    {        /// <summary>        /// Return whether a text position is at a boundary of a text unit of a specified granularity in a specified direction. (required)        /// </summary>        /// <param name="position">A text-position object that represents a location in a document.</param>        /// <param name="atBoundary">A constant that indicates a certain granularity of text unit.</param>        /// <param name="inDirection">A constant that indicates a direction relative to position. The constant can be of type UITextStorageDirection or UITextLayoutDirection.</param>        [iOSVersion(3.2)]        [Export("isPosition")]        bool IsPosition(UITextPosition position, UITextGranularity atBoundary, UITextDirection inDirection);                /// <summary>        /// Return whether a text position is within a text unit of a specified granularity in a specified direction. (required)        /// </summary>        /// <param name="position">A text-position object that represents a location in a document.</param>        /// <param name="withinTextUnit">A constant that indicates a certain granularity of text unit.</param>        /// <param name="inDirection">A constant that indicates a direction relative to position. The constant can be of type UITextStorageDirection or UITextLayoutDirection.</param>        /// <param name="NAME_YOUR_PARAMS">DO NOT USE THIS PARAMETER - Instead make sure to name the parameters you're using.</param>        [iOSVersion(3.2)]        [Export("isPosition")]        [IgnoreParameter("NAME_YOUR_PARAMS")]        bool IsPosition(UITextPosition position, UITextGranularity withinTextUnit, UITextDirection inDirection, bool NAME_YOUR_PARAMS = false);                /// <summary>        /// Return the next text position at a boundary of a text unit of the given granularity in a given direction. (required)        /// </summary>        /// <param name="position">A text-position object that represents a location in a document.</param>        /// <param name="toBoundary">A constant that indicates a certain granularity of text unit.</param>        /// <param name="inDirection">A constant that indicates a direction relative to position. The constant can be of type UITextStorageDirection or UITextLayoutDirection.</param>        [iOSVersion(3.2)]        [Export("positionFromPosition")]        UITextPosition PositionFromPosition(UITextPosition position, UITextGranularity toBoundary, UITextDirection inDirection);                /// <summary>        /// Return the range for the text enclosing a text position in a text unit of a given granularity in a given direction. (required)        /// </summary>        /// <param name="position">A text-position object that represents a location in a document.</param>        /// <param name="withGranularity">A constant that indicates a certain granularity of text unit.</param>        /// <param name="inDirection">A constant that indicates a direction relative to position. The constant can be of type UITextStorageDirection or UITextLayoutDirection.</param>        [iOSVersion(3.2)]        [Export("rangeEnclosingPosition")]        UITextRange RangeEnclosingPosition(UITextPosition position, UITextGranularity withGranularity, UITextDirection inDirection);    }    /// <summary>    /// The granularity of a unit of text.    /// </summary>    [iOSVersion(3.2)]    public enum UITextGranularity    {        /// <summary>        /// The unit of text is a character.        /// </summary>        [iOSVersion(3.2)]        Character,        /// <summary>        /// The unit of text is a word.        /// </summary>        [iOSVersion(3.2)]        Word,        /// <summary>        /// The unit of text is a sentence.        /// </summary>        [iOSVersion(3.2)]        Sentence,        /// <summary>        /// The unit of text is a paragraph.        /// </summary>        [iOSVersion(3.2)]        Paragraph,        /// <summary>        /// The unit of text is a line.        /// </summary>        [iOSVersion(3.2)]        Line,        /// <summary>        /// The unit of text is a document.        /// </summary>        [iOSVersion(3.2)]        Document,    }    /// <summary>    /// A direction of the text.    /// </summary>    [iOSVersion(3.2)]    public struct UITextDirection    {        static public implicit operator UITextDirection(int value)        {            return default(UITextDirection);        }        static public implicit operator int(UITextDirection value)        {            return default(int);        }    }}