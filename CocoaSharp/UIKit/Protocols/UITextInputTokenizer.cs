using ObjectiveC;using System;using SwiftSharp.Attributes;using Foundation;namespace UIKit{	//https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UITextInputTokenizer_Protocol/index.html#//apple_ref/occ/intf/UITextInputTokenizer	/// <summary>	/// An instance of a class that adopts the UITextInputTokenizer protocol is a tokenizer; a tokenizer allows the text input system to evaluate text units of different granularities. Granularities of text units are always evaluated with reference to a storage or reference direction.	/// </summary>	[iOSVersion(3.2)]	public interface UITextInputTokenizer	{		/// <summary>		/// Return whether a text position is at a boundary of a text unit of a specified granularity in a specified direction. (required)		/// </summary>		/// <param name="position">A text-position object that represents a location in a document.</param>		/// <param name="atBoundary">A constant that indicates a certain granularity of text unit.</param>		/// <param name="inDirection">A constant that indicates a direction relative to position. The constant can be of type UITextStorageDirection or UITextLayoutDirection.</param>		/// <returns>true if the text position is at the given text-unit boundary in the given direction; false if it is not at the boundary.</returns>		[iOSVersion(3.2)]		[Export("isPosition")]		bool IsPosition(UITextPosition position, UITextGranularity atBoundary, UITextDirection inDirection);				/// <summary>		/// Return whether a text position is within a text unit of a specified granularity in a specified direction. (required)		/// </summary>		/// <param name="position">A text-position object that represents a location in a document.</param>		/// <param name="withinTextUnit">A constant that indicates a certain granularity of text unit.</param>		/// <param name="inDirection">A constant that indicates a direction relative to position. The constant can be of type UITextStorageDirection or UITextLayoutDirection.</param>		/// <returns>true if the text position is within a text unit of the specified granularity in the specified direction; otherwise, return false. If the text position is at a boundary, return true only if the boundary is part of the text unit in the given direction.</returns>		[iOSVersion(3.2)]		[Export("isPosition")]		bool IsPosition(UITextPosition position, UITextGranularity withinTextUnit, UITextDirection inDirection);				/// <summary>		/// Return the next text position at a boundary of a text unit of the given granularity in a given direction. (required)		/// </summary>		/// <param name="position">A text-position object that represents a location in a document.</param>		/// <param name="toBoundary">A constant that indicates a certain granularity of text unit.</param>		/// <param name="inDirection">A constant that indicates a direction relative to position. The constant can be of type UITextStorageDirection or UITextLayoutDirection.</param>		/// <returns>The next boundary position of a text unit of the given granularity in the given direction, or nil if there is no such position.</returns>		[iOSVersion(3.2)]		[Export("positionFromPosition")]		UITextPosition PositionFromPosition(UITextPosition position, UITextGranularity toBoundary, UITextDirection inDirection);				/// <summary>		/// Return the range for the text enclosing a text position in a text unit of a given granularity in a given direction. (required)		/// </summary>		/// <param name="position">A text-position object that represents a location in a document.</param>		/// <param name="withGranularity">A constant that indicates a certain granularity of text unit.</param>		/// <param name="inDirection">A constant that indicates a direction relative to position. The constant can be of type UITextStorageDirection or UITextLayoutDirection.</param>		/// <returns>A text-range representing a text unit of the given granularity in the given direction, or nil if there is no such enclosing unit. Whether a boundary position is enclosed depends on the given direction, using the same rule as the isPosition:withinTextUnit:inDirection: method.</returns>		[iOSVersion(3.2)]		[Export("rangeEnclosingPosition")]		UITextRange RangeEnclosingPosition(UITextPosition position, UITextGranularity withGranularity, UITextDirection inDirection);				/// <summary>		/// A direction of the text.		/// </summary>		[iOSVersion(3.2)]				//typealias UITextDirection = int				/// <summary>		/// The granularity of a unit of text.		/// </summary>		enum UITextGranularity		{			/// <summary>			/// The unit of text is a character.			/// </summary>			[iOSVersion(3.2)]			Character,						/// <summary>			/// The unit of text is a word.			/// </summary>			[iOSVersion(3.2)]			Word,						/// <summary>			/// The unit of text is a sentence.			/// </summary>			[iOSVersion(3.2)]			Sentence,						/// <summary>			/// The unit of text is a paragraph.			/// </summary>			[iOSVersion(3.2)]			Paragraph,						/// <summary>			/// The unit of text is a line.			/// </summary>			[iOSVersion(3.2)]			Line,						/// <summary>			/// The unit of text is a document.			/// </summary>			[iOSVersion(3.2)]			Document,		}	}}