using ObjectiveC;using System;using SwiftSharp.Attributes;using Foundation;namespace UIKit{	//https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIViewControllerTransitionCoordinatorContext_Protocol/index.html#//apple_ref/occ/intf/UIViewControllerTransitionCoordinatorContext	/// <summary>	/// The system creates an object conforming to the UIViewControllerTransitionCoordinatorContext protocol near the start of an animated view controller transition—specifically, before the system calls the transitionDuration method. When implementing your own transition-related objects, use the provided context object to get information about the transition. Do not adopt this protocol in your own classes.	/// </summary>	[iOSVersion(7)]	public interface UIViewControllerTransitionCoordinatorContext	{		/// <summary>		/// The view controller for the specified key. (required)		/// </summary>		/// <param name="key">The key indicating which of the two view controllers, in a view controller transition, the context pertains to.</param>		/// <returns>A key defined in the ”View Controller Transition Keys” constants in UIViewControllerContextTransitioning Protocol Reference.</returns>		[iOSVersion(7)]		[Export("viewControllerForKey")]		UIViewController ViewControllerForKey(string key);				/// <summary>		/// Called when a view controller transition coordinator needs the container view for a view controller transition animation. (required)		/// </summary>		/// <returns>The container view for the view controller transition animation.</returns>		[iOSVersion(7)]		[Export("containerView")]		UIView ContainerView();				/// <summary>		/// Called when a view controller transition coordinator needs to know the presentation style for the view controller that is appearing. (required)		/// </summary>		/// <returns>A modal presentation style whose transition is being customized (see “Modal Presentation Styles”), or UIModalPresentationNone if the transition is not a modal presentation or dismissal.</returns>		[iOSVersion(7)]		[Export("presentationStyle")]		UIModalPresentationStyle PresentationStyle();				/// <summary>		/// Called when a view controller transition coordinator needs to know the noninteractive duration of a transition. (required)		/// </summary>		/// <returns>The expected duration, in seconds, of the view controller transition, if it proceeds noninteractively.</returns>		[iOSVersion(7)]		[Export("transitionDuration")]		NSTimeinterval TransitionDuration();				/// <summary>		/// Called when a view controller transition coordinator needs the transition completion curve. (required)		/// </summary>		/// <returns>The completion curve for the view controller transition.</returns>		[iOSVersion(7)]		[Export("completionCurve")]		UIViewAnimationCurve CompletionCurve();				/// <summary>		/// Called when a view controller transition coordinator needs the transition completion velocity. (required)		/// </summary>		/// <returns>The completion velocity for the view controller transition.</returns>		[iOSVersion(7)]		[Export("completionVelocity")]		CGFloat CompletionVelocity();				/// <summary>		/// Called when a view controller transition coordinator needs to know the percentage completion for an interactive transition. (required)		/// </summary>		/// <returns>The percentage of completion of a transition when it moves to the noninteractive completion phase of the transition.</returns>		[iOSVersion(7)]		[Export("percentComplete")]		CGFloat PercentComplete();				/// <summary>		/// Called when a view controller transition coordinator needs to know if a transition was initially interactive. (required)		/// </summary>		/// <returns>true only if both of the following are true: and.</returns>		[iOSVersion(7)]		[Export("initiallyinteractive")]		bool Initiallyinteractive();				/// <summary>		/// Called when a view controller transition coordinator needs to know if a transition is animated. (required)		/// </summary>		/// <returns>true if the transition is explicitly animated or if the transition uses the UIModalPresentationCustom presentation type; otherwise, false.</returns>		[iOSVersion(7)]		[Export("isAnimated")]		bool IsAnimated();				/// <summary>		/// Called when a view controller transition coordinator needs to know if a transition is canceled. (required)		/// </summary>		/// <returns>true if an interactive transition is ending and the user canceled the transition; otherwise false.</returns>		[iOSVersion(7)]		[Export("isCancelled")]		bool IsCancelled();				/// <summary>		/// Called when a view controller transition coordinator needs to know if a transition is interactive. (required)		/// </summary>		/// <returns>true if a transition is currently interactive; otherwise false.</returns>		[iOSVersion(7)]		[Export("isinteractive")]		bool Isinteractive();				/// <summary>		/// Returns a transform indicating the amount of rotation being applied during the transition. (required)		/// </summary>		/// <returns>An affine transform indicating the amount of rotation being applied to the interface. This transform is the identity transform when no rotation is applied; otherwise, it is a transform that applies a 90 degree, -90 degree, or 180 degree rotation.</returns>		[iOSVersion(8)]		[Export("targetTransform")]		CGAffineTransform TargetTransform();	}}