using ObjectiveC;using System;using SharpSwift.Attributes;using System.Collections.Generic;using Foundation;using CoreGraphics;namespace UIKit{    /// <summary>    /// An object that conforms to the UIViewControllerTransitionCoordinatorContext protocol provides information about an in-progress view controller transition. Do not adopt this protocol in your own classes. UIKit creates an object that adopts this protocol and makes it available to your code when you animate changes using a transition coordinator object.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIViewControllerTransitionCoordinatorContext_Protocol/index.html#//apple_ref/occ/intf/UIViewControllerTransitionCoordinatorContext"/>    [iOSVersion(7)]    [Export("")]    public interface UIViewControllerTransitionCoordinatorContext//: NSObjectProtocol    {        /// <summary>        /// Returns the view controllers involved in the transition. (required)        /// </summary>        /// <param name="key">The key indicating which view controller you want. For a list of possible values, see ”View Controller Transition Keys” constants in UIViewControllerContextTransitioning Protocol Reference.</param>        [iOSVersion(7)]        [Export("viewControllerForKey")]        [return:Unwrapped]        UIViewController ViewControllerForKey(string key);                /// <summary>        /// Returns the specified view involved in the transition. (required)        /// </summary>        /// <param name="key">The key identifying the view you want. For a list of possible keys, see “View Transition Keys” constants in UIViewControllerContextTransitioning Protocol Reference.</param>        [iOSVersion(8)]        [Export("viewForKey")]        [return:Optional]        UIView ViewForKey(string key);                /// <summary>        /// Returns the view in which the transition takes place. (required)        /// </summary>        [iOSVersion(7)]        [Export("containerView")]        UIView ContainerView();                /// <summary>        /// Returns the presentation style being used for the transition. (required)        /// </summary>        [iOSVersion(7)]        [Export("presentationStyle")]        UIModalPresentationStyle PresentationStyle();                /// <summary>        /// Returns the noninteractive duration of a transition. (required)        /// </summary>        [iOSVersion(7)]        [Export("transitionDuration")]        NSTimeInterval TransitionDuration();                /// <summary>        /// Returns the completion curve associated with the transition. (required)        /// </summary>        [iOSVersion(7)]        [Export("completionCurve")]        UIViewAnimationCurve CompletionCurve();                /// <summary>        /// Returns the starting velocity to use for any final animations. (required)        /// </summary>        [iOSVersion(7)]        [Export("completionVelocity")]        CGFloat CompletionVelocity();                /// <summary>        /// Returns the percentage of completion for an interactive transition when it moves to its noninteractive phase. (required)        /// </summary>        [iOSVersion(7)]        [Export("percentComplete")]        CGFloat PercentComplete();                /// <summary>        /// Returns a Boolean value indicating whether the transition started as an interactive transition. (required)        /// </summary>        [iOSVersion(7)]        [Export("initiallyInteractive")]        bool InitiallyInteractive();                /// <summary>        /// Returns a Boolean value indicating whether the transition is animated. (required)        /// </summary>        [iOSVersion(7)]        [Export("isAnimated")]        bool IsAnimated();                /// <summary>        /// Returns a Boolean value indicating whether an interactive transition was canceled. (required)        /// </summary>        [iOSVersion(7)]        [Export("isCancelled")]        bool IsCancelled();                /// <summary>        /// Returns a Boolean value indicating whether the transition is currently interactive. (required)        /// </summary>        [iOSVersion(7)]        [Export("isInteractive")]        bool IsInteractive();                /// <summary>        /// Returns a transform indicating the amount of rotation being applied during the transition. (required)        /// </summary>        [iOSVersion(8)]        [Export("targetTransform")]        CGAffineTransform TargetTransform();    }}