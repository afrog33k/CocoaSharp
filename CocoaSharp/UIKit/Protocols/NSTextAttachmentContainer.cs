using CoreGraphics;
using ObjectiveC;using System;using SwiftSharp.Attributes;using Foundation;namespace UIKit{	//https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/NSTextAttachmentContainer_Protocol/index.html#//apple_ref/occ/intf/NSTextAttachmentContainer	/// <summary>	/// The NSTextAttachmentContainer protocol defines the interface to text attachment objects from NSLayoutManager.	/// </summary>	[iOSVersion(7)]	public interface NSTextAttachmentContainer	{		/// <summary>		/// Returns the layout bounds of the text attachment to the layout manager. (required)		/// </summary>		/// <param name="textContainer">The text container for the text being laid out.</param>		/// <param name="proposedLineFragment">The line fragment containing the text attachment.</param>		/// <param name="glyphPosition">The glyph location inside lineFrag which is the origin of the returned bounds rectangle.</param>		/// <param name="characterIndex">The character location inside the text storage for the attachment character.</param>		/// <returns>The bounds rectangle of the text attachment if not CGRectZero; otherwise, the rectangle of the size property of the attachmentâ€™s image property.</returns>		[iOSVersion(7)]		[Export("attachmentBoundsForTextContainer")]		CGRect AttachmentBoundsForTextContainer(NSTextContainer textContainer, CGRect proposedLineFragment, CGPoint glyphPosition, int characterIndex);				/// <summary>		/// Returns the image object rendered by the layout manager in the given image bounds rectangle inside the text container. (required)		/// </summary>		/// <param name="imageBounds">The rectangle in which the image is laid out.</param>		/// <param name="textContainer">The text container in which the image is laid out.</param>		/// <param name="characterIndex">The character location inside the text storage for the attachment character.</param>		/// <returns>The image rendered in the bounds rectangle.</returns>		[iOSVersion(7)]		[Export("imageForBounds")]		UIImage ImageForBounds(CGRect imageBounds, NSTextContainer textContainer, int characterIndex);	}}