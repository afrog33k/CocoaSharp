using ObjectiveC;using System;using SharpSwift.Attributes;using System.Collections.Generic;using Foundation;using CoreGraphics;namespace UIKit{    /// <summary>    /// An object that adopts the UIViewControllerTransitionCoordinator protocol provides support for animations associated with a view controller transition. Typically, you do not adopt this protocol in your own classes. When you present or dismiss a view controller, UIKit creates a transition coordinator object automatically and assigns it to the view controllerâ€™s transitionCoordinator property. That transition coordinator object is ephemeral and lasts for the duration of the transition animation.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIViewControllerTransitionCoordinator_Protocol/index.html#//apple_ref/occ/intf/UIViewControllerTransitionCoordinator"/>    [iOSVersion(7)]    public interface UIViewControllerTransitionCoordinator//: NSObjectProtocol, UIViewControllerTransitionCoordinatorContext    {        /// <summary>        /// Runs the specified animations at the same time as the view controller transition animations. (required)        /// </summary>        /// <param name="animation">A block containing the animations you want to perform. These animations run in the same context as the transition animations and therefore have the same default attributes. You may specify nil for this parameter.        ///   The block has no return value and takes the following parameter:        ///       context        ///   The contextual information for performing the animations. Use this object to get the animation-related information, including the container view in which to run your animations. For more information, see UIViewControllerTransitionCoordinatorContext Protocol Reference.         ///   The animation you specify must take place in a view descended from the container view.</param>        /// <param name="completion">The block of code to execute after the transition finishes. You may specify nil for this parameter. The block has no return value and takes the following parameter:        ///       context        ///   The contextual information for performing the animations. Use this object to get the animation-related information, including the container view in which to run your animations. For more information, see UIViewControllerTransitionCoordinatorContext Protocol Reference.</param>        [iOSVersion(7)]        [Export("animateAlongsideTransition")]        bool AnimateAlongsideTransition(Action<UIViewControllerTransitionCoordinatorContext> animation, Action<UIViewControllerTransitionCoordinatorContext> completion);                /// <summary>        /// Runs the specified animations in a view that is outside of the designated container view. (required)        /// </summary>        /// <param name="view">The view (or one of its ancestors) in which the specified animations take place. This parameter must not be nil.</param>        /// <param name="animation">A block containing the animations you want to perform. These animations run in the same context as the transition animations and therefore have the same default attributes. You may specify nil for this parameter.        ///   The block has no return value and takes the following parameter:        ///       context        ///   The contextual information for performing the animations. Use this object to get the animation-related information. For more information, see UIViewControllerTransitionCoordinatorContext Protocol Reference.</param>        /// <param name="completion">The block of code to execute after the transition finishes. You may specify nil for this parameter. The block has no return value and takes the following parameter:        ///       context        ///   The contextual information for performing the animations. Use this object to get the animation-related information. For more information, see UIViewControllerTransitionCoordinatorContext Protocol Reference.</param>        [iOSVersion(7)]        [Export("animateAlongsideTransitionInView")]        bool AnimateAlongsideTransitionInView(UIView view, Action<UIViewControllerTransitionCoordinatorContext> animation, Action<UIViewControllerTransitionCoordinatorContext> completion);                /// <summary>        /// Registers a block to be executed when a transition changes from interactive to non-interactive. (required)        /// </summary>        /// <param name="handler">The block to execute when the transition changes from interactive to noninteractive. The block has no return value and takes the following parameter:        ///       context        ///   The contextual information for performing the animations. Use this object to get the animation-related information. For more information, see UIViewControllerTransitionCoordinatorContext Protocol Reference.</param>        [iOSVersion(7)]        [Export("notifyWhenInteractionEndsUsingBlock")]        void NotifyWhenInteractionEndsUsingBlock(Action<UIViewControllerTransitionCoordinatorContext> handler);    }}