using ObjectiveC;using System;using SwiftSharp.Attributes;using Foundation;namespace UIKit{	//https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIViewControllerTransitionCoordinator_Protocol/index.html#//apple_ref/occ/intf/UIViewControllerTransitionCoordinator	/// <summary>	/// During an active view controller transition, use a view controller transition coordinator to respond to user cancelation of the transition.	/// </summary>	[iOSVersion(7)]	public interface UIViewControllerTransitionCoordinator	{		/// <summary>		/// Called when the coordinator needs to know the custom animation or completion block for a view controller transition; for animations specified to run within the container view. (required)		/// </summary>		/// <param name="animation">The animation you want to run during the transition. The animation runs in the same animation context as the transition itself.   The animation you specify must take place in a view descended from the container view.   If you implement a transitioning animator that employs Core Animation directly, rather than using UIView animations, the animation you specify runs after the animateTransition: method returns.   To use this method to specify only a completion block object, set this parameter to nil.</param>		/// <param name="completion">The block of code to execute after the transition finishes.   The system might invoke the completion block before your animation finishes.</param>		/// <returns>true if the specified animation is successfully queued to run; otherwise false.</returns>		[iOSVersion(7)]		[Export("animateAlongsideTransition")]		bool AnimateAlongsideTransition(Action<UIViewControllerTransitionCoordinatorContext> animation, Action<UIViewControllerTransitionCoordinatorContext> completion);				/// <summary>		/// Called when the coordinator needs to know the custom animation or completion block for a view controller transition; for animations specified to run outside the container view. (required)		/// </summary>		/// <param name="view">The view in which you want the specified animation to take place, or a view from which the animated view descends.</param>		/// <param name="animation">The animation you want to run during the transition. The animation runs in the same animation context as the transition itself.   If you implement a transitioning animator that employs Core Animation directly, rather than using UIView animations, the animation you specify runs after the animateTransition: method returns.   To use this method to specify only a completion block object, set this parameter to nil.</param>		/// <param name="completion">The block of code to execute after the transition finishes.   The system might invoke the completion block before your animation finishes.</param>		/// <returns>true if the specified animation is successfully queued to run; otherwise false.</returns>		[iOSVersion(7)]		[Export("animateAlongsideTransitionInView")]		bool AnimateAlongsideTransitionInView(UIView view, Action<UIViewControllerTransitionCoordinatorContext> animation, Action<UIViewControllerTransitionCoordinatorContext> completion);				/// <summary>		/// Called when interaction ends during an interactive view controller transition. (required)		/// </summary>		/// <param name="handler">Code to conditionally respond to user cancelation of an interactive view controller transition.   When a user cancels an interactive transition, the system first calls this method. It then calls the viewWillDisappear: method on the view controller that was appearing prior to cancelation, and calls the viewWillAppear: method on the view controller that was disappearing.</param>		[iOSVersion(7)]		[Export("notifyWheninteractionEndsUsingBlock")]		void NotifyWheninteractionEndsUsingBlock(Action<UIViewControllerTransitionCoordinatorContext> handler);	}}