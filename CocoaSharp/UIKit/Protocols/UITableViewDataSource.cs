using ObjectiveC;using System;using SwiftSharp.Attributes;using Foundation;namespace UIKit{    //https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UITableViewDataSource_Protocol/index.html#//apple_ref/occ/intf/UITableViewDataSource    /// <summary>    /// The UITableViewDataSource protocol is adopted by an object that mediates the application’s data model for a UITableView object. The data source provides the table-view object with the information it needs to construct and modify a table view.    /// </summary>    [iOSVersion(2)]    public interface UITableViewDataSource    {        /// <summary>        /// Asks the data source for a cell to insert in a particular location of the table view. (required)        /// </summary>        /// <param name="tableView">A table-view object requesting the cell.</param>        /// <param name="cellForRowAtIndexPath">An index path locating a row in tableView.</param>        /// <returns>An object inheriting from UITableViewCell that the table view can use for the specified row. An assertion is raised if you return nil.</returns>        [iOSVersion(2)]        [Export("tableView")]        UITableViewCell TableViewCellForRowAtIndexPath(UITableView tableView, NSIndexPath cellForRowAtIndexPath);                /// <summary>        /// Asks the data source to return the number of sections in the table view.        /// </summary>        /// <param name="tableView">An object representing the table view requesting this information.</param>        /// <returns>The number of sections in tableView. The default value is 1.</returns>        [iOSVersion(2)]        [Export("numberOfSectionsInTableView")]        [Optional]        int NumberOfSectionsInTableView(UITableView tableView);                /// <summary>        /// Tells the data source to return the number of rows in a given section of a table view. (required)        /// </summary>        /// <param name="tableView">The table-view object requesting this information.</param>        /// <param name="numberOfRowsInSection">An index number identifying a section in tableView.</param>        /// <returns>The number of rows in section.</returns>        [iOSVersion(2)]        [Export("tableView")]
        int TableViewNumberOfRowsInSection(UITableView tableView, int numberOfRowsInSection);                /// <summary>        /// Asks the data source to return the titles for the sections for a table view.        /// </summary>        /// <param name="tableView">The table-view object requesting this information.</param>        /// <returns>An array of strings that serve as the title of sections in the table view and appear in the index list on the right side of the table view. The table view must be in the plain style (UITableViewStylePlain). For example, for an alphabetized list, you could return an array containing strings “A” through “Z”.</returns>        [iOSVersion(2)]        [Export("sectionIndexTitlesForTableView")]        [Optional]        AnyObject[] SectionIndexTitlesForTableView(UITableView tableView);                /// <summary>        /// Asks the data source to return the index of the section having the given title and section title index.        /// </summary>        /// <param name="tableView">The table-view object requesting this information.</param>        /// <param name="sectionForSectionIndexTitle">The title as displayed in the section index of tableView.</param>        /// <param name="atIndex">An index number identifying a section title in the array returned by sectionIndexTitlesForTableView:.</param>        /// <returns>An index number identifying a section.</returns>        [iOSVersion(2)]        [Export("tableView")]        [Optional]        int TableView(UITableView tableView, string sectionForSectionIndexTitle, int atIndex);                /// <summary>        /// Asks the data source for the title of the header of the specified section of the table view.        /// </summary>        /// <param name="tableView">The table-view object asking for the title.</param>        /// <param name="titleForHeaderInSection">An index number identifying a section of tableView .</param>        /// <returns>A string to use as the title of the section header. If you return nil , the section will have no title.</returns>        [iOSVersion(2)]        [Export("tableView")]        [Optional]        string TableViewTitleForHeader(UITableView tableView, int titleForHeaderInSection);                /// <summary>        /// Asks the data source for the title of the footer of the specified section of the table view.        /// </summary>        /// <param name="tableView">The table-view object asking for the title.</param>        /// <param name="titleForFooterInSection">An index number identifying a section of tableView .</param>        /// <returns>A string to use as the title of the section footer. If you return nil , the section will have no title.</returns>        [iOSVersion(2)]        [Export("tableView")]        [Optional]        string TableViewTitleForFooter(UITableView tableView, int titleForFooterInSection);                /// <summary>        /// Asks the data source to commit the insertion or deletion of a specified row in the receiver.        /// </summary>        /// <param name="tableView">The table-view object requesting the insertion or deletion.</param>        /// <param name="commitEditingStyle">The cell editing style corresponding to a insertion or deletion requested for the row specified by indexPath. Possible editing styles are UITableViewCellEditingStyleInsert or UITableViewCellEditingStyleDelete.</param>        /// <param name="forRowAtIndexPath">An index path locating the row in tableView.</param>        [iOSVersion(2)]        [Export("tableView")]        [Optional]        void TableView(UITableView tableView, UITableViewCellEditingStyle commitEditingStyle, NSIndexPath forRowAtIndexPath);                /// <summary>        /// Asks the data source to verify that the given row is editable.        /// </summary>        /// <param name="tableView">The table-view object requesting this information.</param>        /// <param name="canEditRowAtIndexPath">An index path locating a row in tableView.</param>        /// <returns>true if the row indicated by indexPath is editable; otherwise, false.</returns>        [iOSVersion(2)]        [Export("tableView")]        [Optional]        bool TableViewCanEditRowAtIndex(UITableView tableView, NSIndexPath canEditRowAtIndexPath);                /// <summary>        /// Asks the data source whether a given row can be moved to another location in the table view.        /// </summary>        /// <param name="tableView">The table-view object requesting this information.</param>        /// <param name="canMoveRowAtIndexPath">An index path locating a row in tableView.</param>        /// <returns>true if the row can be moved; otherwise false.</returns>        [iOSVersion(2)]        [Export("tableView")]        [Optional]        bool TableViewCanMoveRowAtIndex(UITableView tableView, NSIndexPath canMoveRowAtIndexPath);                /// <summary>        /// Tells the data source to move a row at a specific location in the table view to another location.        /// </summary>        /// <param name="tableView">The table-view object requesting this action.</param>        /// <param name="moveRowAtIndexPath">An index path locating the row to be moved in tableView.</param>        /// <param name="toIndexPath">An index path locating the row in tableView that is the destination of the move.</param>        [iOSVersion(2)]        [Export("tableView")]        [Optional]        void TableView(UITableView tableView, NSIndexPath moveRowAtIndexPath, NSIndexPath toIndexPath);    }}