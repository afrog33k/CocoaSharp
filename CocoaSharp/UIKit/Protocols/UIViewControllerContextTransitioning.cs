using ObjectiveC;using System;using SwiftSharp.Attributes;using Foundation;namespace UIKit{	//https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIViewControllerContextTransitioning_protocol/index.html#//apple_ref/occ/intf/UIViewControllerContextTransitioning	/// <summary>	/// The UIViewControllerContextTransitioning protocol’s methods provide contextual information for transition animations between view controllers. Do not adopt this protocol in your own classes, nor should you directly create objects that adopt this protocol. During a transition, the animator objects involved in that transition receive a fully configured context object from UIKit. Custom animator objects—objects that adopt the UIViewControllerAnimatorTransitioning or UIViewControllerinteractiveTransitioning protocol—should simply retrieve the information they need from the provided object.	/// </summary>	[iOSVersion(7)]	public interface UIViewControllerContextTransitioning	{		/// <summary>		/// The view that acts as the superview for the views involved in the transition. (required)		/// </summary>		/// <returns>The view that contains both views involved in the transition.</returns>		[iOSVersion(7)]		[Export("containerView")]		UIView ContainerView();				/// <summary>		/// Returns a view controller involved in the transition. (required)		/// </summary>		/// <param name="key">The key identifying the view controller you want. For a list of possible keys, see View Controller Transition Keys.</param>		/// <returns>The view controller object for the specified key or nil if the view controller could not be found.</returns>		[iOSVersion(7)]		[Export("viewControllerForKey")]		UIViewController ViewControllerForKey(string key);				/// <summary>		/// Returns the specified view involved in the transition. (required)		/// </summary>		/// <param name="key">The key identifying the view you want. For a list of possible keys, see View Transition Keys.</param>		/// <returns>The view object for the specified key or nil if the view could not be found.</returns>		[iOSVersion(8)]		[Export("viewForKey")]		UIView ViewForKey(string key);				/// <summary>		/// Returns the starting frame rectangle for the specified view controller’s view. (required)		/// </summary>		/// <param name="vc">The view controller whose frame rectangle you want.</param>		/// <returns>The frame rectangle for the view or CGRectZero if the frame rectangle is not known or the view is not visible.</returns>		[iOSVersion(7)]		[Export("initialFrameForViewController")]		CGRect InitialFrameForViewController(UIViewController vc);				/// <summary>		/// Returns the ending frame rectangle for the specified view controller’s view. (required)		/// </summary>		/// <param name="vc">The view controller whose frame rectangle you want.</param>		/// <returns>The frame rectangle for the view or CGRectZero if the frame rectangle is not known or the view is not visible.</returns>		[iOSVersion(7)]		[Export("finalFrameForViewController")]		CGRect FinalFrameForViewController(UIViewController vc);				/// <summary>		/// Returns a Boolean value indicating, in the case of a modal presentation style, whether the transition should be animated. (required)		/// </summary>		/// <returns>Always returns true for modal presentations styles other than the UIModalPresentationCustom style. For the UIModalPresentationCustom style, returns true if the transition should be animated or false if it should not.</returns>		[iOSVersion(7)]		[Export("isAnimated")]		bool IsAnimated();				/// <summary>		/// Returns a Boolean value indicating whether the transition is interactive. (required)		/// </summary>		/// <returns>true if the transition is interactive or false if it is not.</returns>		[iOSVersion(7)]		[Export("isinteractive")]		bool Isinteractive();				/// <summary>		/// Returns the presentation style for the view controller transition. (required)		/// </summary>		/// <returns>The presentation style to use when presenting the final view controller.</returns>		[iOSVersion(7)]		[Export("presentationStyle")]		UIModalPresentationStyle PresentationStyle();				/// <summary>		/// Notifies the system that the transition animation is done. (required)		/// </summary>		/// <param name="didComplete">true if the transition to the presented view controller completed successfully or false if the original view controller is still being displayed.</param>		[iOSVersion(7)]		[Export("completeTransition")]		void CompleteTransition(bool didComplete);				/// <summary>		/// Updates the completion percentage of the transition. (required)		/// </summary>		[iOSVersion(7)]		[Export("updateinteractiveTransition")]		void UpdateinteractiveTransition(CGFloat percentComplete);				/// <summary>		/// Notifies the system that user interactions signaled the completion of the transition. (required)		/// </summary>		[iOSVersion(7)]		[Export("finishinteractiveTransition")]		void FinishinteractiveTransition();				/// <summary>		/// Notifies the system that user interactions canceled the transition. (required)		/// </summary>		[iOSVersion(7)]		[Export("cancelinteractiveTransition")]		void CancelinteractiveTransition();				/// <summary>		/// Returns a Boolean value indicating whether the transition was canceled. (required)		/// </summary>		/// <returns>true if the transition was canceled or false if it is ongoing or finished normally.</returns>		[iOSVersion(7)]		[Export("transitionWasCancelled")]		bool TransitionWasCancelled();				/// <summary>		/// Returns a transform indicating the amount of rotation being applied during the transition. (required)		/// </summary>		/// <returns>An affine transform indicating the amount of rotation being applied to the interface. This transform is the identity transform when no rotation is applied; otherwise, it is a transform that applies a 90 degree, -90 degree, or 180 degree rotation.</returns>		[iOSVersion(8)]		[Export("targetTransform")]		CGAffineTransform TargetTransform();				/// <summary>		/// The keys you use to identify the view controllers involved in a transition.		/// </summary>				/// <summary>		/// Identifies the view controller that is visible at the beginning of the transition (and at the end of a canceled transition). This view controller is typically the one presenting the &quot;to” view controller or is the one being replaced by the &quot;to” view controller.		/// </summary>		[iOSVersion(7)]		string UITransitionContextFromViewControllerKey { get; }				/// <summary>		/// Identifies the view controller that is visible at the end of a completed transition. This view controller is the one being presented.		/// </summary>		[iOSVersion(7)]		string UITransitionContextToViewControllerKey { get; }				/// <summary>		/// The keys you use to identify the views involved in a transition.		/// </summary>				/// <summary>		/// Identifies the view that is shown at the beginning of the transition (and at the end of a canceled transition). This view is typically the presenting view controller’s view.		/// </summary>		[iOSVersion(8)]		string UITransitionContextFromViewKey { get; }				/// <summary>		/// Identifies the view that is shown at the end of a completed transition. This view is typically the presented view controller’s view but may also be an ancestor of that view.		/// </summary>		[iOSVersion(8)]		string UITransitionContextToViewKey { get; }	}}