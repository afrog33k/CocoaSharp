using ObjectiveC;using System;using SharpSwift.Attributes;using System.Collections.Generic;using Foundation;using CoreGraphics;namespace UIKit{    /// <summary>    /// The UIViewControllerContextTransitioning protocol’s methods provide contextual information for transition animations between view controllers. Do not adopt this protocol in your own classes, nor should you directly create objects that adopt this protocol. During a transition, the animator objects involved in that transition receive a fully configured context object from UIKit. Custom animator objects—objects that adopt the UIViewControllerAnimatorTransitioning or UIViewControllerInteractiveTransitioning protocol—should simply retrieve the information they need from the provided object.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIViewControllerContextTransitioning_protocol/index.html#//apple_ref/occ/intf/UIViewControllerContextTransitioning"/>    [iOSVersion(7)]    [Export("")]    public interface UIViewControllerContextTransitioning//: NSObjectProtocol    {        /// <summary>        /// The view that acts as the superview for the views involved in the transition. (required)        /// </summary>        [iOSVersion(7)]        [Export("containerView")]        UIView ContainerView();                /// <summary>        /// Returns a view controller involved in the transition. (required)        /// </summary>        /// <param name="key">The key identifying the view controller you want. For a list of possible keys, see View Controller Transition Keys.</param>        [iOSVersion(7)]        [Export("viewControllerForKey")]        [return:Optional]        UIViewController ViewControllerForKey(string key);                /// <summary>        /// Returns the specified view involved in the transition. (required)        /// </summary>        /// <param name="key">The key identifying the view you want. For a list of possible keys, see View Transition Keys.</param>        [iOSVersion(8)]        [Export("viewForKey")]        [return:Optional]        UIView ViewForKey(string key);                /// <summary>        /// Returns the starting frame rectangle for the specified view controller’s view. (required)        /// </summary>        /// <param name="vc">The view controller whose frame rectangle you want.</param>        [iOSVersion(7)]        [Export("initialFrameForViewController")]        CGRect InitialFrameForViewController(UIViewController vc);                /// <summary>        /// Returns the ending frame rectangle for the specified view controller’s view. (required)        /// </summary>        /// <param name="vc">The view controller whose frame rectangle you want.</param>        [iOSVersion(7)]        [Export("finalFrameForViewController")]        CGRect FinalFrameForViewController(UIViewController vc);                /// <summary>        /// Returns a Boolean value indicating, in the case of a modal presentation style, whether the transition should be animated. (required)        /// </summary>        [iOSVersion(7)]        [Export("isAnimated")]        bool IsAnimated();                /// <summary>        /// Returns a Boolean value indicating whether the transition is interactive. (required)        /// </summary>        [iOSVersion(7)]        [Export("isInteractive")]        bool IsInteractive();                /// <summary>        /// Returns the presentation style for the view controller transition. (required)        /// </summary>        [iOSVersion(7)]        [Export("presentationStyle")]        UIModalPresentationStyle PresentationStyle();                /// <summary>        /// Notifies the system that the transition animation is done. (required)        /// </summary>        /// <param name="didComplete">true if the transition to the presented view controller completed successfully or false if the original view controller is still being displayed.</param>        [iOSVersion(7)]        [Export("completeTransition")]        void CompleteTransition(bool didComplete);                /// <summary>        /// Updates the completion percentage of the transition. (required)        /// </summary>        /// <param name="percentComplete"></param>        [iOSVersion(7)]        [Export("updateInteractiveTransition")]        void UpdateInteractiveTransition(CGFloat percentComplete);                /// <summary>        /// Notifies the system that user interactions signaled the completion of the transition. (required)        /// </summary>        [iOSVersion(7)]        [Export("finishInteractiveTransition")]        void FinishInteractiveTransition();                /// <summary>        /// Notifies the system that user interactions canceled the transition. (required)        /// </summary>        [iOSVersion(7)]        [Export("cancelInteractiveTransition")]        void CancelInteractiveTransition();                /// <summary>        /// Returns a Boolean value indicating whether the transition was canceled. (required)        /// </summary>        [iOSVersion(7)]        [Export("transitionWasCancelled")]        bool TransitionWasCancelled();                /// <summary>        /// Returns a transform indicating the amount of rotation being applied during the transition. (required)        /// </summary>        [iOSVersion(8)]        [Export("targetTransform")]        CGAffineTransform TargetTransform();    }}