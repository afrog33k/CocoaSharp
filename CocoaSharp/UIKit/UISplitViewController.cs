using ObjectiveC;using System;using SharpSwift.Attributes;using System.Collections.Generic;using Foundation;using CoreGraphics;namespace UIKit{    /// <summary>    /// The UISplitViewController class is a container view controller that presents a master-detail interface. In a master-detail interface, changes in the primary view controller (the master) drive changes in a secondary view controller (the detail). The two view controllers can be arranged so that they are side-by-side, so that only one at a time is visible, or so that one only partially hides the other. In iOS 8 and later, you can use the UISplitViewController class on all iOS devices; in previous versions of iOS, the class is available only on iPad.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UISplitViewController_class/index.html#//apple_ref/occ/cl/UISplitViewController"/>    [iOSVersion(3.2)]    public class UISplitViewController : UIViewController//, AnyObject, NSCoding, NSExtensionRequestHandling, NSObjectProtocol, UIAppearanceContainer, UIContentContainer, UIStateRestoring, UITraitEnvironment    {        public UISplitViewController() : base("", null) { }        /// <summary>        /// A button that changes the display mode of the split view controller.        /// </summary>        [iOSVersion(8)]        [Export("displayModeButtonItem")]        public UIBarButtonItem DisplayModeButtonItem() { return default(UIBarButtonItem); }                /// <summary>        /// Presents the specified view controller as the secondary view controller of the split view interface.        /// </summary>        /// <param name="vc">The view controller to display in the secondary (or detail) location of the split view interface. If you specify nil for this parameter or if this view controller is the same as the one it would replace, this method does nothing.</param>        /// <param name="sender">The view or view controller that made the request.</param>        [iOSVersion(8)]        [Export("showDetailViewController")]        public void ShowDetailViewController(UIViewController vc, AnyObject sender) {  }                /// <summary>        /// Presents the specified view controller as the primary view controller in the split view interface.        /// </summary>        /// <param name="vc">The view controller to display in the primary (or master) location of the split view interface.</param>        /// <param name="sender">The object that made the request to show the view controller.</param>        [iOSVersion(8)]        [Export("showViewController")]        public void ShowViewController(UIViewController vc, AnyObject sender) {  }                /// <summary>        /// The array of view controllers managed by the receiver.        /// </summary>        [iOSVersion(3.2)]        [Export("viewControllers")]        public AnyObject[] ViewControllers { get; set; }                /// <summary>        /// Specifies whether a hidden view controller can be presented and dismissed using a swipe gesture.        /// </summary>        [iOSVersion(5.1)]        [Export("presentsWithGesture")]        public bool PresentsWithGesture { get; set; }                /// <summary>        /// The preferred arrangement of the split view controller interface.        /// </summary>        [iOSVersion(8)]        [Export("preferredDisplayMode")]        public UISplitViewControllerDisplayMode PreferredDisplayMode { get; set; }                /// <summary>        /// The current arrangement of the split view controller’s contents. (read-only)        /// </summary>        [iOSVersion(8)]        [Export("displayMode")]        public UISplitViewControllerDisplayMode DisplayMode { get; private set; }                /// <summary>        /// A Boolean value indicating whether only one of the child view controllers is displayed. (read-only)        /// </summary>        [iOSVersion(8)]        [Export("collapsed")]        public bool Collapsed { get; private set; }                /// <summary>        /// The relative width of the primary view controller’s content.        /// </summary>        [iOSVersion(8)]        [Export("preferredPrimaryColumnWidthFraction")]        public CGFloat PreferredPrimaryColumnWidthFraction { get; set; }                /// <summary>        /// The width (in points) of the primary view controller’s content. (read-only)        /// </summary>        [iOSVersion(8)]        [Export("primaryColumnWidth")]        public CGFloat PrimaryColumnWidth { get; private set; }                /// <summary>        /// The minimum width (in points) required for the primary view controller’s content.        /// </summary>        [iOSVersion(8)]        [Export("minimumPrimaryColumnWidth")]        public CGFloat MinimumPrimaryColumnWidth { get; set; }                /// <summary>        /// The maximum width (in points) allowed for the primary view controller’s content.        /// </summary>        [iOSVersion(8)]        [Export("maximumPrimaryColumnWidth")]        public CGFloat MaximumPrimaryColumnWidth { get; set; }                /// <summary>        /// The delegate you want to receive split view controller messages.        /// </summary>        [iOSVersion(3.2)]        [Export("delegate")]        public UISplitViewControllerDelegate Delegate { get; set; }    }    /// <summary>    /// Constants describing the possible display modes for a split view controller.    /// </summary>    [iOSVersion(8)]    public enum UISplitViewControllerDisplayMode    {        /// <summary>        /// The split view controller automatically decides the most appropriate display mode based on the device and the current app size. You can assign this constant as the value of the preferredDisplayMode property but this value is never reported by the displayMode property.        /// </summary>        [iOSVersion(8)]        Automatic,        /// <summary>        /// The primary view controller is hidden.        /// </summary>        [iOSVersion(8)]        PrimaryHidden,        /// <summary>        /// The primary and secondary view controllers are displayed side-by-side onscreen.        /// </summary>        [iOSVersion(8)]        AllVisible,        /// <summary>        /// The primary view controller is layered on top of the secondary view controller, leaving the secondary view controller partially visible.        /// </summary>        [iOSVersion(8)]        PrimaryOverlay,    }}