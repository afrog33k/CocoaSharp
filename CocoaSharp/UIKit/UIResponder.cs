using ObjectiveC;using System;using SwiftSharp.Attributes;using Foundation;namespace UIKit{	//https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIResponder_Class/index.html#//apple_ref/occ/cl/UIResponder	/// <summary>	/// The UIResponder class defines an interface for objects that respond to and handle events. It is the superclass of UIApplication, UIView and its subclasses (which include UIWindow). Instances of these classes are sometimes referred to as responder objects or, simply, responders.	/// </summary>	[iOSVersion(2)]	public class UIResponder : NSObject	{		/// <summary>		/// Returns the receiver's next responder, or nil if it has none.		/// </summary>		/// <returns>The next object in the responder chain to be presented with an event for handling.</returns>		[iOSVersion(2)]		[Export("nextResponder")]		public UIResponder NextResponder() { return null; }				/// <summary>		/// Returns a Boolean value indicating whether the receiver is the first responder.		/// </summary>		/// <returns>true if the receiver is the first responder, false otherwise.</returns>		[iOSVersion(2)]		[Export("isFirstResponder")]		public bool IsFirstResponder() { return false; }				/// <summary>		/// Returns a Boolean value indicating whether the receiver can become first responder.		/// </summary>		/// <returns>true if the receiver can become the first responder, false otherwise.</returns>		[iOSVersion(2)]		[Export("canBecomeFirstResponder")]		public bool CanBecomeFirstResponder() { return false; }				/// <summary>		/// Notifies the receiver that it is about to become first responder in its window.		/// </summary>		/// <returns>true if the receiver accepts first-responder status or false if it refuses this status. The default implementation returns true, accepting first responder status.</returns>		[iOSVersion(2)]		[Export("becomeFirstResponder")]		public bool BecomeFirstResponder() { return false; }				/// <summary>		/// Returns a Boolean value indicating whether the receiver is willing to relinquish first-responder status.		/// </summary>		/// <returns>true if the receiver can resign first-responder status, false otherwise.</returns>		[iOSVersion(2)]		[Export("canResignFirstResponder")]		public bool CanResignFirstResponder() { return false; }				/// <summary>		/// Notifies the receiver that it has been asked to relinquish its status as first responder in its window.		/// </summary>		[iOSVersion(2)]		[Export("resignFirstResponder")]		public bool ResignFirstResponder() { return false; }				/// <summary>		/// The custom input view to display when the receiver becomes the first responder. (read-only)		/// </summary>		[iOSVersion(3.2)]		[Export("inputView")]		public UIView InputView { get; private set; }				/// <summary>		/// The custom input view controller to use when the receiver becomes the first responder. (read-only)		/// </summary>		[iOSVersion(8)]		[Export("inputViewController")]		public UIInputViewController InputViewController { get; private set; }				/// <summary>		/// The custom input accessory view to display when the receiver becomes the first responder. (read-only)		/// </summary>		[iOSVersion(3.2)]		[Export("inputAccessoryView")]		public UIView InputAccessoryView { get; private set; }				/// <summary>		/// The custom input accessory view controller to display when the receiver becomes the first responder. (read-only)		/// </summary>		[iOSVersion(8)]		[Export("inputAccessoryViewController")]		public UIInputViewController InputAccessoryViewController { get; private set; }				/// <summary>		/// Updates the custom input and accessory views when the object is the first responder.		/// </summary>		[iOSVersion(3.2)]		[Export("reloadInputViews")]		public void ReloadInputViews() { }				/// <summary>		/// Tells the receiver when one or more fingers touch down in a view or window.		/// </summary>		/// <param name="touches">A set of UITouch instances that represent the touches for the starting phase of the event represented by event.</param>		/// <param name="withEvent">An object representing the event to which the touches belong.</param>		[iOSVersion(2)]		[Export("touchesBegan")]		public void TouchesBegan(NSSet touches, UIEvent withEvent) { }				/// <summary>		/// Tells the receiver when one or more fingers associated with an event move within a view or window.		/// </summary>		/// <param name="touches">A set of UITouch instances that represent the touches that are moving during the event represented by event.</param>		/// <param name="withEvent">An object representing the event to which the touches belong.</param>		[iOSVersion(2)]		[Export("touchesMoved")]		public void TouchesMoved(NSSet touches, UIEvent withEvent) { }				/// <summary>		/// Tells the receiver when one or more fingers are raised from a view or window.		/// </summary>		/// <param name="touches">A set of UITouch instances that represent the touches for the ending phase of the event represented by event.</param>		/// <param name="withEvent">An object representing the event to which the touches belong.</param>		[iOSVersion(2)]		[Export("touchesEnded")]		public void TouchesEnded(NSSet touches, UIEvent withEvent) { }				/// <summary>		/// Sent to the receiver when a system event (such as a low-memory warning) cancels a touch event.		/// </summary>		/// <param name="touches">A set of UITouch instances that represent the touches for the ending phase of the event represented by event.</param>		/// <param name="withEvent">An object representing the event to which the touches belong.</param>		[iOSVersion(2)]		[Export("touchesCancelled")]		public void TouchesCancelled(NSSet touches, UIEvent withEvent) { }				/// <summary>		/// Tells the receiver that a motion event has begun.		/// </summary>		/// <param name="motion">An event-subtype constant indicating the kind of motion. A common motion is shaking, which is indicated by UIEventSubtypeMotionShake.</param>		/// <param name="withEvent">An object representing the event associated with the motion.</param>		[iOSVersion(3)]		[Export("motionBegan")]		public void MotionBegan(UIEventSubtype motion, UIEvent withEvent) { }				/// <summary>		/// Tells the receiver that a motion event has ended.		/// </summary>		/// <param name="motion">An event-subtype constant indicating the kind of motion. A common motion is shaking, which is indicated by UIEventSubtypeMotionShake.</param>		/// <param name="withEvent">An object representing the event associated with the motion.</param>		[iOSVersion(3)]		[Export("motionEnded")]		public void MotionEnded(UIEventSubtype motion, UIEvent withEvent) { }				/// <summary>		/// Tells the receiver that a motion event has been cancelled.		/// </summary>		/// <param name="motion">An event-subtype constant indicating the kind of motion associated with event. A common motion is shaking, which is indicated by UIEventSubtypeMotionShake.</param>		/// <param name="withEvent">An object representing the event associated with the motion.</param>		[iOSVersion(3)]		[Export("motionCancelled")]		public void MotionCancelled(UIEventSubtype motion, UIEvent withEvent) { }				/// <summary>		/// Sent to the receiver when a remote-control event is received.		/// </summary>		/// <param name="event">An event object encapsulating a remote-control command. Remote-control events have a type of UIEventTypeRemoteControl.</param>		[iOSVersion(4)]		[Export("remoteControlReceivedWithEvent")]		public void RemoteControlReceivedWithEvent(UIEvent event) { }				/// <summary>		/// Returns the nearest shared undo manager in the responder chain. (read-only)		/// </summary>		[iOSVersion(3)]		[Export("undoManager")]		public NSUndoManager UndoManager { get; private set; }				/// <summary>		/// Requests the receiving responder to enable or disable the specified command in the user interface.		/// </summary>		/// <param name="action">A selector that identifies a method associated with a command. For the editing menu, this is one of the editing methods declared by the UIResponderStandardEditActions informal protocol (for example, copy:).</param>		/// <param name="withSender">The object calling this method. For the editing menu commands, this is the shared UIApplication object. Depending on the context, you can query the sender for information to help you determine whether a command should be enabled.</param>		/// <returns>true if the the command identified by action should be enabled or false if it should be disabled. Returning true means that your class can handle the command in the current context.</returns>		[iOSVersion(3)]		[Export("canPerformAction")]		public bool CanPerformAction(Selector action, AnyObject withSender) { return false; }				/// <summary>		/// Returns the target object that responds to an action.		/// </summary>		/// <param name="action">A selector that identifies a method associated with a command.</param>		/// <param name="withSender">The object calling this method. For the editing menu commands, this is the shared UIApplication object. Depending on the context, you can query the sender for information to help you determine the target of the command.</param>		/// <returns>The object whose action method is invoked to execute the command.</returns>		[iOSVersion(7)]		[Export("targetForAction")]		public AnyObject TargetForAction(Selector action, AnyObject withSender) { return null; }				/// <summary>		/// The key commands that trigger actions on this responder. (read-only)		/// </summary>		[iOSVersion(7)]		[Export("keyCommands")]		public AnyObject[] KeyCommands { get; private set; }				/// <summary>		/// The text input mode for this responder object. (read-only)		/// </summary>		[iOSVersion(7)]		[Export("textInputMode")]		public UITextInputMode TextInputMode { get; private set; }				/// <summary>		/// An identifier signifying that the responder should preserve its text input mode information. (read-only)		/// </summary>		[iOSVersion(7)]		[Export("textInputContextIdentifier")]		public string TextInputContextIdentifier { get; private set; }				/// <summary>		/// Clears text input mode information from the app’s user defaults.		/// </summary>		/// <param name="identifier">An identifier assigned to the textInputContextIdentifier property of one of your responders.</param>		[iOSVersion(7)]		[Export("clearTextInputContextIdentifier")]		public static void ClearTextInputContextIdentifier(string identifier) { }	}}