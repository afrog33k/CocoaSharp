using ObjectiveC;using System;using SharpSwift.Attributes;using System.Collections.Generic;using Foundation;using CoreGraphics;namespace UIKit{    /// <summary>    /// The UIPasteboard class enables an app to share data within the app and with another app. To share data with any other app, you can use system-wide pasteboards; to share data with another app that has the same team ID as your app, you can use app-specific pasteboards.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIPasteboard_Class/index.html#//apple_ref/occ/cl/UIPasteboard"/>    [iOSVersion(3)]    [Export("")]    public class UIPasteboard : NSObject//, AnyObject, CVarArgType, Equatable, Hashable, NSObjectProtocol, Printable    {        public UIPasteboard() { }        /// <summary>        /// Returns the general pasteboard, which is used for general copy-paste operations        /// </summary>        [iOSVersion(3)]        [Export("generalPasteboard")]        public static UIPasteboard GeneralPasteboard() { return default(UIPasteboard); }                /// <summary>        /// Returns an app pasteboard identified by a unique system-generated name.        /// </summary>        [iOSVersion(3)]        [Export("pasteboardWithUniqueName")]        public static UIPasteboard PasteboardWithUniqueName() { return default(UIPasteboard); }                /// <summary>        /// Invalidates the designated app pasteboard.        /// </summary>        /// <param name="pasteboardName">The name of the pasteboard to be invalidated.</param>        [iOSVersion(3)]        [Export("removePasteboardWithName")]        public static void RemovePasteboardWithName(string pasteboardName) {  }                /// <summary>        /// Returns the types of the first item on the pasteboard.        /// </summary>        [iOSVersion(3)]        [Export("pasteboardTypes")]        public virtual AnyObject[] PasteboardTypes() { return default(AnyObject[]); }                /// <summary>        /// Returns whether the pasteboard holds data of the specified representation type.        /// </summary>        /// <param name="pasteboardTypes">An array of strings. Each string should identify a representation of the pasteboard item that the pasteboard reader can handle. These string are frequently UTIs. See the class description for more information about pasteboard item types.</param>        [iOSVersion(3)]        [Export("containsPasteboardTypes")]        public virtual bool ContainsPasteboardTypes(AnyObject[] pasteboardTypes) { return default(bool); }                /// <summary>        /// Returns the data in the pasteboard for the given representation type.        /// </summary>        /// <param name="pasteboardType">A string identifying a representation type of a pasteboard item.</param>        [iOSVersion(3)]        [Export("dataForPasteboardType")]        [return:Optional]        public virtual NSData DataForPasteboardType(string pasteboardType) { return default(NSData); }                /// <summary>        /// Returns an object in the pasteboard for the given representation type.        /// </summary>        /// <param name="pasteboardType">A string identifying a representation type of a pasteboard item.</param>        [iOSVersion(3)]        [Export("valueForPasteboardType")]        [return:Optional]        public virtual AnyObject ValueForPasteboardType(string pasteboardType) { return default(AnyObject); }                /// <summary>        /// Puts data in the pasteboard for the specified representation type.        /// </summary>        /// <param name="data">The data object to be written to the pasteboard.</param>        /// <param name="forPasteboardType">A string identifying the representation type of the pasteboard item. This is typically a UTI.</param>        [iOSVersion(3)]        [Export("setData")]        public virtual void SetData(NSData data, string forPasteboardType) {  }                /// <summary>        /// Puts an object in the pasteboard for the specified representation type.        /// </summary>        /// <param name="value">The object to be written to the pasteboard.</param>        /// <param name="forPasteboardType">A string identifying the representation type of the pasteboard item. If the type is a UTI, it must be compatible with the class of value; otherwise, nothing is written to the pasteboard.</param>        [iOSVersion(3)]        [Export("setValue")]        public virtual void SetValue(AnyObject value, string forPasteboardType) {  }                /// <summary>        /// Returns an array of representation types for each specified pasteboard item.        /// </summary>        /// <param name="itemSet">An index set with each integer value identifying a pasteboard item positionally in the pasteboard. Pass in nil to request all pasteboard items.</param>        [iOSVersion(3)]        [Export("pasteboardTypesForItemSet")]        public virtual AnyObject[] PasteboardTypesForItemSet([Optional] NSIndexSet itemSet) { return default(AnyObject[]); }                /// <summary>        /// Returns an index set identifying pasteboard items having the specified representation types.        /// </summary>        /// <param name="pasteboardTypes">An array of strings, with each string identifying a representation type. Typically you use UTIs as pasteboard types.</param>        [iOSVersion(3)]        [Export("itemSetWithPasteboardTypes")]        [return:Optional]        public virtual NSIndexSet ItemSetWithPasteboardTypes(AnyObject[] pasteboardTypes) { return default(NSIndexSet); }                /// <summary>        /// Returns whether the specified pasteboard items contain data of the given representation types.        /// </summary>        /// <param name="pasteboardTypes">An array of strings, with each string identifying a representation type. Typically you use UTIs as pasteboard types.</param>        /// <param name="inItemSet">An index set with each integer value identifying a pasteboard item positionally in the pasteboard. Pass in nil to request all pasteboard items.</param>        [iOSVersion(3)]        [Export("containsPasteboardTypes")]        public virtual bool ContainsPasteboardTypes(AnyObject[] pasteboardTypes, [Optional] NSIndexSet inItemSet) { return default(bool); }                /// <summary>        /// Returns the data objects in the indicated pasteboard items that have the given representation type.        /// </summary>        /// <param name="pasteboardType">A string identifying a representation type. Typically this is a UTI.</param>        /// <param name="inItemSet">An index set with each integer value identifying a pasteboard item positionally in the pasteboard. Pass in nil to request all pasteboard items.</param>        [iOSVersion(3)]        [Export("dataForPasteboardType")]        public virtual AnyObject[] DataForPasteboardType(string pasteboardType, [Optional] NSIndexSet inItemSet) { return default(AnyObject[]); }                /// <summary>        /// Returns the objects in the indicated pasteboard items that have the given representation type.        /// </summary>        /// <param name="pasteboardType">A string identifying a representation type. Typically this is a UTI.</param>        /// <param name="inItemSet">An index set with each integer value identifying a pasteboard item positionally in the pasteboard. Pass in nil to request all pasteboard items.</param>        [iOSVersion(3)]        [Export("valuesForPasteboardType")]        public virtual AnyObject[] ValuesForPasteboardType(string pasteboardType, [Optional] NSIndexSet inItemSet) { return default(AnyObject[]); }                /// <summary>        /// Appends pasteboard items to the current contents of the pasteboard.        /// </summary>        /// <param name="items">An array of dictionaries. Each dictionary represents a pasteboard item, with the key being the representation type and the value being the object associated with that type.</param>        [iOSVersion(3)]        [Export("addItems")]        public virtual void AddItems(AnyObject[] items) {  }                /// <summary>        /// The name of the pasteboard. (read-only)        /// </summary>        [iOSVersion(3)]        [Export("name")]        public string Name { get; private set; }                /// <summary>        /// A Boolean value that indicates whether the pasteboard is persistent.        /// </summary>        [iOSVersion(3)]        [Export("persistent")]        public bool Persistent { get; set; }                /// <summary>        /// The number of times the pasteboardâ€™s contents have changed. (read-only)        /// </summary>        [iOSVersion(3)]        [Export("changeCount")]        public int ChangeCount { get; private set; }                /// <summary>        /// Returns the number of items in the pasteboard (read-only)        /// </summary>        [iOSVersion(3)]        [Export("numberOfItems")]        public int NumberOfItems { get; private set; }                /// <summary>        /// The pasteboard items on the pasteboard.        /// </summary>        [iOSVersion(3)]        [Export("items")]        public AnyObject[] Items { get; set; }                /// <summary>        /// The string value of the first pasteboard item.        /// </summary>        [iOSVersion(3)]        [Export("string")]        [Optional]        public string String { get; set; }                /// <summary>        /// An array of strings in all pasteboard items.        /// </summary>        [iOSVersion(3)]        [Export("strings")]        public AnyObject[] Strings { get; set; }                /// <summary>        /// The image object of the first pasteboard item.        /// </summary>        [iOSVersion(3)]        [Export("image")]        [Optional]        public UIImage Image { get; set; }                /// <summary>        /// An array of image objects in all pasteboard items.        /// </summary>        [iOSVersion(3)]        [Export("images")]        public AnyObject[] Images { get; set; }                /// <summary>        /// The URL object of the first pasteboard item.        /// </summary>        [iOSVersion(3)]        [Optional]        public NSURL URL { get; set; }                /// <summary>        /// An array of URL objects in all pasteboard items.        /// </summary>        [iOSVersion(3)]        public AnyObject[] URLs { get; set; }                /// <summary>        /// The color object of the first pasteboard item.        /// </summary>        [iOSVersion(3)]        [Export("color")]        [Optional]        public UIColor Color { get; set; }                /// <summary>        /// An array of color objects in all pasteboard items.        /// </summary>        [iOSVersion(3)]        [Export("colors")]        public AnyObject[] Colors { get; set; }    }            //TODO:    /// <summary>    /// Pasteboard-item representation types for a given object value.    /// </summary>    //[Unwrapped]    //public NSArray!        var UIPasteboardTypeListURL: NSArray!        var UIPasteboardTypeListImage: NSArray!        var UIPasteboardTypeListColor: NSArray UIPasteboardTypeListString { get; set; }    /// <summary>    /// Posted by a pasteboard object when its contents change. This happens at the same time the pasteboardâ€™s change count (changeCount property) is incremented. Changes include the addition, removal, and modification of pasteboard items. The userInfo dictionary may contain the representation types of pasteboard items that have been added to or removed from the pasteboard. See UserInfo Dictionary Keys for the keys used to access these representation types. If pasteboard items have been modified but not added or removed, the userInfo dictionary is nil.    /// </summary>    public class UIPasteboardChangedNotification : NSNotification    {        public UIPasteboardChangedNotification() : base("", null) { }    }    /// <summary>    /// Posted by a pasteboard object just before an app removes it. The removal class method is removePasteboardWithName:. There is no userInfo dictionary.    /// </summary>    public class UIPasteboardRemovedNotification : NSNotification    {        public UIPasteboardRemovedNotification() : base("", null) { }    }}