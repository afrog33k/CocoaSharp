using ObjectiveC;using System;using SwiftSharp.Attributes;using Foundation;namespace UIKit{	//https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIPasteboard_Class/index.html#//apple_ref/occ/cl/UIPasteboard	/// <summary>	/// The UIPasteboard class enables an app to share data within the app and with another app. To share data with any other app, you can use system-wide pasteboards; to share data with another app that has the same team ID as your app, you can use app-specific pasteboards.	/// </summary>	[iOSVersion(3)]	public class UIPasteboard : NSObject	{		/// <summary>		/// Returns the general pasteboard, which is used for general copy-paste operations		/// </summary>		/// <returns>A shared system pasteboard object with the name of UIPasteboardNameGeneral.</returns>		[iOSVersion(3)]		[Export("generalPasteboard")]		public static UIPasteboard GeneralPasteboard() { return null; }				/// <summary>		/// Returns a pasteboard identified by name, optionally creating it if it doesn’t exist.		/// </summary>		/// <param name="name">A string or string constant that identifies (or should identify) the pasteboard. Specify nil if you want UIPasteboard to create a pasteboard with a unique name.</param>		/// <param name="create">A Boolean value that indicates whether the pasteboard should be created if it doesn’t already exist. Specify false for system pasteboards or if you want an existing app pasteboard.</param>		/// <returns>A pasteboard object that can be used for transferring data within an app or between apps that have the same team ID.</returns>		[iOSVersion(3)]		public UIPasteboard Init(string name, bool create) { }				/// <summary>		/// Returns an app pasteboard identified by a unique system-generated name.		/// </summary>		/// <returns>An app pasteboard object with a unique name.</returns>		[iOSVersion(3)]		[Export("pasteboardWithUniqueName")]		public static UIPasteboard PasteboardWithUniqueName() { return null; }				/// <summary>		/// Invalidates the designated app pasteboard.		/// </summary>		/// <param name="pasteboardName">The name of the pasteboard to be invalidated.</param>		[iOSVersion(3)]		[Export("removePasteboardWithName")]		public static void RemovePasteboardWithName(string pasteboardName) { }				/// <summary>		/// The name of the pasteboard. (read-only)		/// </summary>		[iOSVersion(3)]		[Export("name")]		public string Name { get; private set; }				/// <summary>		/// A Boolean value that indicates whether the pasteboard is persistent.		/// </summary>		[iOSVersion(3)]		[Export("persistent")]		public bool Persistent { get; set; }				/// <summary>		/// The number of times the pasteboard’s contents have changed. (read-only)		/// </summary>		[iOSVersion(3)]		[Export("changeCount")]		public int ChangeCount { get; private set; }				/// <summary>		/// Returns the types of the first item on the pasteboard.		/// </summary>		/// <returns>An array of strings indicating the representation types of the first item on the pasteboard.</returns>		[iOSVersion(3)]		[Export("pasteboardTypes")]		public AnyObject[] PasteboardTypes() { return null; }				/// <summary>		/// Returns whether the pasteboard holds data of the specified representation type.		/// </summary>		/// <param name="pasteboardTypes">An array of strings. Each string should identify a representation of the pasteboard item that the pasteboard reader can handle. These string are frequently UTIs. See the class description for more information about pasteboard item types.</param>		/// <returns>true if the pasteboard item holds data of the indicated representation type, otherwise false.</returns>		[iOSVersion(3)]		[Export("containsPasteboardTypes")]		public bool ContainsPasteboardTypes(AnyObject[] pasteboardTypes) { return false; }				/// <summary>		/// Returns the data in the pasteboard for the given representation type.		/// </summary>		/// <param name="pasteboardType">A string identifying a representation type of a pasteboard item.</param>		/// <returns>A data object or nil if there is no data in the pasteboard of the given type.</returns>		[iOSVersion(3)]		[Export("dataForPasteboardType")]		public NSData DataForPasteboardType(string pasteboardType) { return null; }				/// <summary>		/// Returns an object in the pasteboard for the given representation type.		/// </summary>		/// <param name="pasteboardType">A string identifying a representation type of a pasteboard item.</param>		/// <returns>An object that is an instance of the appropriate class based on pasteboardType or an NSData object containing “raw” data.</returns>		[iOSVersion(3)]		[Export("valueForPasteboardType")]		public AnyObject ValueForPasteboardType(string pasteboardType) { return null; }				/// <summary>		/// Puts data in the pasteboard for the specified representation type.		/// </summary>		/// <param name="data">The data object to be written to the pasteboard.</param>		/// <param name="forPasteboardType">A string identifying the representation type of the pasteboard item. This is typically a UTI.</param>		[iOSVersion(3)]		[Export("setData")]		public void SetData(NSData data, string forPasteboardType) { }				/// <summary>		/// Puts an object in the pasteboard for the specified representation type.		/// </summary>		/// <param name="value">The object to be written to the pasteboard.</param>		/// <param name="forPasteboardType">A string identifying the representation type of the pasteboard item. If the type is a UTI, it must be compatible with the class of value; otherwise, nothing is written to the pasteboard.</param>		[iOSVersion(3)]		[Export("setValue")]		public void SetValue(AnyObject value, string forPasteboardType) { }				/// <summary>		/// Returns the number of items in the pasteboard (read-only)		/// </summary>		[iOSVersion(3)]		[Export("numberOfItems")]		public int NumberOfItems { get; private set; }				/// <summary>		/// Returns an array of representation types for each specified pasteboard item.		/// </summary>		/// <param name="itemSet">An index set with each integer value identifying a pasteboard item positionally in the pasteboard. Pass in nil to request all pasteboard items.</param>		/// <returns>An array of arrays, with each inner array holding the representation types for a particular pasteboard item.</returns>		[iOSVersion(3)]		[Export("pasteboardTypesForItemSet")]		public AnyObject[] PasteboardTypesForItemSet(NSIndexSet itemSet) { return null; }				/// <summary>		/// Returns an index set identifying pasteboard items having the specified representation types.		/// </summary>		/// <param name="pasteboardTypes">An array of strings, with each string identifying a representation type. Typically you use UTIs as pasteboard types.</param>		/// <returns>An index set with each integer positionally identifying a pasteboard item that has one of the representation types specified in pasteboardTypes.</returns>		[iOSVersion(3)]		[Export("itemSetWithPasteboardTypes")]		public NSIndexSet ItemSetWithPasteboardTypes(AnyObject[] pasteboardTypes) { return null; }				/// <summary>		/// Returns whether the specified pasteboard items contain data of the given representation types.		/// </summary>		/// <param name="pasteboardTypes">An array of strings, with each string identifying a representation type. Typically you use UTIs as pasteboard types.</param>		/// <param name="inItemSet">An index set with each integer value identifying a pasteboard item positionally in the pasteboard. Pass in nil to request all pasteboard items.</param>		/// <returns>true if the pasteboard items identified by itemSet have data corresponding to the representation types specified by pasteboardTypes; otherwise, returns false.</returns>		[iOSVersion(3)]		[Export("containsPasteboardTypes")]		public bool ContainsPasteboardTypes(AnyObject[] pasteboardTypes, NSIndexSet inItemSet) { return false; }				/// <summary>		/// The pasteboard items on the pasteboard.		/// </summary>		[iOSVersion(3)]		[Export("items")]		public AnyObject[] Items { get; set; }				/// <summary>		/// Returns the data objects in the indicated pasteboard items that have the given representation type.		/// </summary>		/// <param name="pasteboardType">A string identifying a representation type. Typically this is a UTI.</param>		/// <param name="inItemSet">An index set with each integer value identifying a pasteboard item positionally in the pasteboard. Pass in nil to request all pasteboard items.</param>		/// <returns>An array of NSData objects or, if a requested pasteboard item has no data of the the type indicated by pasteboardType, a NSNull object.</returns>		[iOSVersion(3)]		[Export("dataForPasteboardType")]		public AnyObject[] DataForPasteboardType(string pasteboardType, NSIndexSet inItemSet) { return null; }				/// <summary>		/// Returns the objects in the indicated pasteboard items that have the given representation type.		/// </summary>		/// <param name="pasteboardType">A string identifying a representation type. Typically this is a UTI.</param>		/// <param name="inItemSet">An index set with each integer value identifying a pasteboard item positionally in the pasteboard. Pass in nil to request all pasteboard items.</param>		/// <returns>An array of objects that have the type indicated by pasteboardType; or—if the pasteboard type is custom or unknown—an array of NSData objects.</returns>		[iOSVersion(3)]		[Export("valuesForPasteboardType")]		public AnyObject[] ValuesForPasteboardType(string pasteboardType, NSIndexSet inItemSet) { return null; }				/// <summary>		/// Appends pasteboard items to the current contents of the pasteboard.		/// </summary>		/// <param name="items">An array of dictionaries. Each dictionary represents a pasteboard item, with the key being the representation type and the value being the object associated with that type.</param>		[iOSVersion(3)]		[Export("addItems")]		public void AddItems(AnyObject[] items) { }				/// <summary>		/// The string value of the first pasteboard item.		/// </summary>		[iOSVersion(3)]		[Export("string")]		public string String { get; set; }				/// <summary>		/// An array of strings in all pasteboard items.		/// </summary>		[iOSVersion(3)]		[Export("strings")]		public AnyObject[] Strings { get; set; }				/// <summary>		/// The image object of the first pasteboard item.		/// </summary>		[iOSVersion(3)]		[Export("image")]		public UIImage Image { get; set; }				/// <summary>		/// An array of image objects in all pasteboard items.		/// </summary>		[iOSVersion(3)]		[Export("images")]		public AnyObject[] Images { get; set; }				/// <summary>		/// The URL object of the first pasteboard item.		/// </summary>		[iOSVersion(3)]		[Export("URL")]		public NSURL URL { get; set; }				/// <summary>		/// An array of URL objects in all pasteboard items.		/// </summary>		[iOSVersion(3)]		[Export("URLs")]		public AnyObject[] URLs { get; set; }				/// <summary>		/// The color object of the first pasteboard item.		/// </summary>		[iOSVersion(3)]		[Export("color")]		public UIColor Color { get; set; }				/// <summary>		/// An array of color objects in all pasteboard items.		/// </summary>		[iOSVersion(3)]		[Export("colors")]		public AnyObject[] Colors { get; set; }				/// <summary>		/// Names identifying the system pasteboards.		/// </summary>				/// <summary>		/// The name identifying the General pasteboard, which is used for general copy-cut-paste operations.		/// </summary>		[iOSVersion(3)]		public string UIPasteboardNameGeneral { get; private set; }				/// <summary>		/// The name identifying the Find pasteboard, which is used in search operations. In such operations, the most recent search string in the search bar is put in the Find pasteboard.		/// </summary>		[iOSVersion(3)]		public string UIPasteboardNameFind { get; private set; }				/// <summary>		/// Pasteboard-item representation types for a given object value.		/// </summary>				/// <summary>		/// An array of pasteboard-item representation types for strings, including kUTTypeUTF8PlainText and kUTTypeText. Related properties are string and strings.		/// </summary>		[iOSVersion(3)]		public NSArray UIPasteboardTypeListString { get; private set; }				/// <summary>		/// An array of pasteboard-item representation types for URLs, including kUTTypeURL. Related properties are URL and URLs.		/// </summary>		[iOSVersion(3)]		public NSArray UIPasteboardTypeListURL { get; private set; }				/// <summary>		/// An array of pasteboard-item representation types for images, including kUTTypePNG and kUTTypeJPEG. Related properties are image and images.		/// </summary>		[iOSVersion(3)]		public NSArray UIPasteboardTypeListImage { get; private set; }				/// <summary>		/// An array of pasteboard-item representation types for colors. Related properties are color and colors.		/// </summary>		[iOSVersion(3)]		public NSArray UIPasteboardTypeListColor { get; private set; }				/// <summary>		/// You use the following keys to access the representation types of pasteboard items that have been added to or removed from a pasteboard.		/// </summary>				/// <summary>		/// With the notification named UIPasteboardChangedNotification, use this key to access the added representation types. These types are stored as an array in the notification’s userInfo dictionary.		/// </summary>		[iOSVersion(3)]		public string UIPasteboardChangedTypesAddedKey { get; private set; }				/// <summary>		/// With the notification named UIPasteboardChangedNotification, use this key to access the removed representation types. These types are stored as an array in the notification’s userInfo dictionary.		/// </summary>		[iOSVersion(3)]		public string UIPasteboardChangedTypesRemovedKey { get; private set; }								WHAT								WHAT	}}