using ObjectiveC;using System;using SwiftSharp.Attributes;using System.Collections.Generic;using Foundation;using CoreGraphics;namespace UIKit{    /// <summary>    /// The UIPasteboard class enables an app to share data within the app and with another app. To share data with any other app, you can use system-wide pasteboards; to share data with another app that has the same team ID as your app, you can use app-specific pasteboards.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIPasteboard_Class/index.html#//apple_ref/occ/cl/UIPasteboard"/>    [iOSVersion(3)]    public class UIPasteboard : NSObject//, AnyObject, NSObjectProtocol    {        /// <summary>        /// Returns the general pasteboard, which is used for general copy-paste operations        /// </summary>        [iOSVersion(3)]        [Export("generalPasteboard")]        public static UIPasteboard GeneralPasteboard() { return default(UIPasteboard); }                /// <summary>        /// Returns a pasteboard identified by name, optionally creating it if it doesn’t exist.        /// </summary>        /// <param name="name">A string or string constant that identifies (or should identify) the pasteboard. Specify nil if you want UIPasteboard to create a pasteboard with a unique name.</param>        /// <param name="create">A Boolean value that indicates whether the pasteboard should be created if it doesn’t already exist. Specify false for system pasteboards or if you want an existing app pasteboard.</param>        [iOSVersion(3)]        public UIPasteboard(string name, bool create) { }                /// <summary>        /// Returns an app pasteboard identified by a unique system-generated name.        /// </summary>        [iOSVersion(3)]        [Export("pasteboardWithUniqueName")]        public static UIPasteboard PasteboardWithUniqueName() { return default(UIPasteboard); }                /// <summary>        /// Invalidates the designated app pasteboard.        /// </summary>        /// <param name="pasteboardName">The name of the pasteboard to be invalidated.</param>        [iOSVersion(3)]        [Export("removePasteboardWithName")]        public static void RemovePasteboardWithName(string pasteboardName) {  }                /// <summary>        /// Returns the types of the first item on the pasteboard.        /// </summary>        [iOSVersion(3)]        [Export("pasteboardTypes")]        public AnyObject[] PasteboardTypes() { return default(AnyObject[]); }                /// <summary>        /// Returns whether the pasteboard holds data of the specified representation type.        /// </summary>        /// <param name="pasteboardTypes">An array of strings. Each string should identify a representation of the pasteboard item that the pasteboard reader can handle. These string are frequently UTIs. See the class description for more information about pasteboard item types.</param>        [iOSVersion(3)]        [Export("containsPasteboardTypes")]        public bool ContainsPasteboardTypes(AnyObject[] pasteboardTypes) { return default(bool); }                /// <summary>        /// Returns the data in the pasteboard for the given representation type.        /// </summary>        /// <param name="pasteboardType">A string identifying a representation type of a pasteboard item.</param>        [iOSVersion(3)]        [Export("dataForPasteboardType")]        public NSData DataForPasteboardType(string pasteboardType) { return default(NSData); }                /// <summary>        /// Returns an object in the pasteboard for the given representation type.        /// </summary>        /// <param name="pasteboardType">A string identifying a representation type of a pasteboard item.</param>        [iOSVersion(3)]        [Export("valueForPasteboardType")]        public AnyObject ValueForPasteboardType(string pasteboardType) { return default(AnyObject); }                /// <summary>        /// Puts data in the pasteboard for the specified representation type.        /// </summary>        /// <param name="data">The data object to be written to the pasteboard.</param>        /// <param name="forPasteboardType">A string identifying the representation type of the pasteboard item. This is typically a UTI.</param>        [iOSVersion(3)]        [Export("setData")]        public void SetData(NSData data, string forPasteboardType) {  }                /// <summary>        /// Puts an object in the pasteboard for the specified representation type.        /// </summary>        /// <param name="value">The object to be written to the pasteboard.</param>        /// <param name="forPasteboardType">A string identifying the representation type of the pasteboard item. If the type is a UTI, it must be compatible with the class of value; otherwise, nothing is written to the pasteboard.</param>        [iOSVersion(3)]        [Export("setValue")]        public void SetValue(AnyObject value, string forPasteboardType) {  }                /// <summary>        /// Returns an array of representation types for each specified pasteboard item.        /// </summary>        /// <param name="itemSet">An index set with each integer value identifying a pasteboard item positionally in the pasteboard. Pass in nil to request all pasteboard items.</param>        [iOSVersion(3)]        [Export("pasteboardTypesForItemSet")]        public AnyObject[] PasteboardTypesForItemSet(NSIndexSet itemSet) { return default(AnyObject[]); }                /// <summary>        /// Returns an index set identifying pasteboard items having the specified representation types.        /// </summary>        /// <param name="pasteboardTypes">An array of strings, with each string identifying a representation type. Typically you use UTIs as pasteboard types.</param>        [iOSVersion(3)]        [Export("itemSetWithPasteboardTypes")]        public NSIndexSet ItemSetWithPasteboardTypes(AnyObject[] pasteboardTypes) { return default(NSIndexSet); }                /// <summary>        /// Returns whether the specified pasteboard items contain data of the given representation types.        /// </summary>        /// <param name="pasteboardTypes">An array of strings, with each string identifying a representation type. Typically you use UTIs as pasteboard types.</param>        /// <param name="inItemSet">An index set with each integer value identifying a pasteboard item positionally in the pasteboard. Pass in nil to request all pasteboard items.</param>        [iOSVersion(3)]        [Export("containsPasteboardTypes")]        public bool ContainsPasteboardTypes(AnyObject[] pasteboardTypes, NSIndexSet inItemSet) { return default(bool); }                /// <summary>        /// Returns the data objects in the indicated pasteboard items that have the given representation type.        /// </summary>        /// <param name="pasteboardType">A string identifying a representation type. Typically this is a UTI.</param>        /// <param name="inItemSet">An index set with each integer value identifying a pasteboard item positionally in the pasteboard. Pass in nil to request all pasteboard items.</param>        [iOSVersion(3)]        [Export("dataForPasteboardType")]        public AnyObject[] DataForPasteboardType(string pasteboardType, NSIndexSet inItemSet) { return default(AnyObject[]); }                /// <summary>        /// Returns the objects in the indicated pasteboard items that have the given representation type.        /// </summary>        /// <param name="pasteboardType">A string identifying a representation type. Typically this is a UTI.</param>        /// <param name="inItemSet">An index set with each integer value identifying a pasteboard item positionally in the pasteboard. Pass in nil to request all pasteboard items.</param>        [iOSVersion(3)]        [Export("valuesForPasteboardType")]        public AnyObject[] ValuesForPasteboardType(string pasteboardType, NSIndexSet inItemSet) { return default(AnyObject[]); }                /// <summary>        /// Appends pasteboard items to the current contents of the pasteboard.        /// </summary>        /// <param name="items">An array of dictionaries. Each dictionary represents a pasteboard item, with the key being the representation type and the value being the object associated with that type.</param>        [iOSVersion(3)]        [Export("addItems")]        public void AddItems(AnyObject[] items) {  }                /// <summary>        /// The name of the pasteboard. (read-only)        /// </summary>        [iOSVersion(3)]        [Export("name")]        public string Name { get; private set; }                /// <summary>        /// A Boolean value that indicates whether the pasteboard is persistent.        /// </summary>        [iOSVersion(3)]        [Export("persistent")]        public bool Persistent { get; set; }                /// <summary>        /// The number of times the pasteboard’s contents have changed. (read-only)        /// </summary>        [iOSVersion(3)]        [Export("changeCount")]        public int ChangeCount { get; private set; }                /// <summary>        /// Returns the number of items in the pasteboard (read-only)        /// </summary>        [iOSVersion(3)]        [Export("numberOfItems")]        public int NumberOfItems { get; private set; }                /// <summary>        /// The pasteboard items on the pasteboard.        /// </summary>        [iOSVersion(3)]        [Export("items")]        public AnyObject[] Items { get; set; }                /// <summary>        /// The string value of the first pasteboard item.        /// </summary>        [iOSVersion(3)]        [Export("string")]        public string String { get; set; }                /// <summary>        /// An array of strings in all pasteboard items.        /// </summary>        [iOSVersion(3)]        [Export("strings")]        public AnyObject[] Strings { get; set; }                /// <summary>        /// The image object of the first pasteboard item.        /// </summary>        [iOSVersion(3)]        [Export("image")]        public UIImage Image { get; set; }                /// <summary>        /// An array of image objects in all pasteboard items.        /// </summary>        [iOSVersion(3)]        [Export("images")]        public AnyObject[] Images { get; set; }                /// <summary>        /// The URL object of the first pasteboard item.        /// </summary>        [iOSVersion(3)]        public NSURL URL { get; set; }                /// <summary>        /// An array of URL objects in all pasteboard items.        /// </summary>        [iOSVersion(3)]        public AnyObject[] URLs { get; set; }                /// <summary>        /// The color object of the first pasteboard item.        /// </summary>        [iOSVersion(3)]        [Export("color")]        public UIColor Color { get; set; }                /// <summary>        /// An array of color objects in all pasteboard items.        /// </summary>        [iOSVersion(3)]        [Export("colors")]        public AnyObject[] Colors { get; set; }                /// <summary>        /// Pasteboard-item representation types for a given object value.        /// </summary>        public NSArray!        var UIPasteboardTypeListURL: NSArray!        var UIPasteboardTypeListImage: NSArray!        var UIPasteboardTypeListColor: NSArray UIPasteboardTypeListString { get; set; }    }    /// <summary>    ///     /// </summary>    [iOSVersion(3)]    public class UIPasteboardChangedNotification : NSNotification    {        public UIPasteboardChangedNotification() : base("", null) { }    }    /// <summary>    ///     /// </summary>    [iOSVersion(3)]    public class UIPasteboardRemovedNotification : NSNotification    {        public UIPasteboardRemovedNotification() : base("", null) { }    }}