using CoreGraphics;
using ObjectiveC;using System;using SwiftSharp.Attributes;using Foundation;namespace UIKit{    //https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIGestureRecognizer_Class/index.html#//apple_ref/occ/cl/UIGestureRecognizer    /// <summary>    /// UIGestureRecognizer is an abstract base class for concrete gesture-recognizer classes. A gesture-recognizer object—or, simply, a gesture recognizer—decouples the logic for recognizing a gesture and acting on that recognition. When one of these objects recognizes a common gesture or, in some cases, a change in the gesture, it sends an action message to each designated target object.    /// </summary>    [iOSVersion(3.2)]    public class UIGestureRecognizer : NSObject    {        /// <summary>        /// Initializes an allocated gesture-recognizer object with a target and an action selector.        /// </summary>        /// <param name="target">An object that is the recipient of action messages sent by the receiver when it recognizes a gesture. nil is not a valid value.</param>        /// <param name="action">A selector that identifies the method implemented by the target to handle the gesture recognized by the receiver. The action selector must conform to the signature described in the class overview. NULL is not a valid value.</param>        /// <returns>An initialized instance of a concrete UIGestureRecognizer subclass or nil if an error occurred in the attempt to initialize the object.</returns>        [iOSVersion(3.2)]        public UIGestureRecognizer(AnyObject target, Selector action) { }                /// <summary>        /// Adds a target and an action to a gesture-recognizer object.        /// </summary>        /// <param name="target">An object that is a recipient of action messages sent by the receiver when the represented gesture occurs. nil is not a valid value.</param>        /// <param name="action">A selector identifying a method of a target to be invoked by the action message. NULL is not a valid value.</param>        [iOSVersion(3.2)]        [Export("addTarget")]        public void AddTarget(AnyObject target, Selector action) { }                /// <summary>        /// Removes a target and an action from a gesture-recognizer object.        /// </summary>        /// <param name="target">An object that currently is a recipient of action messages sent by the receiver when the represented gesture occurs. Specify nil if you want to remove all targets from the receiver.</param>        /// <param name="action">A selector identifying a method of a target to be invoked by the action message. Specify NULL if you want to remove all actions from the receiver.</param>        [iOSVersion(3.2)]        [Export("removeTarget")]        public void RemoveTarget(AnyObject target, Selector action) { }                /// <summary>        /// Returns the point computed as the location in a given view of the gesture represented by the receiver.        /// </summary>        /// <param name="view">A UIView object on which the gesture took place. Specify nil to indicate the window.</param>        /// <returns>A point in the local coordinate system of view that identifies the location of the gesture. If nil is specified for view, the method returns the gesture location in the window’s base coordinate system.</returns>        [iOSVersion(3.2)]        [Export("locationInView")]        public CGPoint LocationInView(UIView view) { return new CGPoint(); }                /// <summary>        /// Returns the location of one of the gesture’s touches in the local coordinate system of a given view.        /// </summary>        /// <param name="touchIndex">The index of a UITouch object in a private array maintained by the receiver. This touch object represents a touch of the current gesture.</param>        /// <param name="inView">A UIView object on which the gesture took place. Specify nil to indicate the window.</param>        /// <returns>A point in the local coordinate system of view that identifies the location of the touch. If nil is specified for view, the method returns the touch location in the window’s base coordinate system.</returns>        [iOSVersion(3.2)]        [Export("locationOfTouch")]        public CGPoint LocationOfTouch(int touchIndex, UIView inView) { return new CGPoint(); }                /// <summary>        /// Returns the number of touches involved in the gesture represented by the receiver.        /// </summary>        /// <returns>The number of UITouch objects in a private array maintained by the receiver. Each of these objects represents a touch in the current gesture.</returns>        [iOSVersion(3.2)]        [Export("numberOfTouches")]        public int NumberOfTouches() { return 0; }                /// <summary>        /// The current state of the gesture recognizer. (read-only)        /// </summary>        [iOSVersion(3.2)]        [Export("state")]        public UIGestureRecognizerState State { get; private set; }                /// <summary>        /// The view the gesture recognizer is attached to. (read-only)        /// </summary>        [iOSVersion(3.2)]        [Export("view")]        public UIView View { get; private set; }                /// <summary>        /// A Boolean property that indicates whether the gesture recognizer is enabled.        /// </summary>        [iOSVersion(3.2)]        [Export("enabled")]        public bool Enabled { get; set; }                /// <summary>        /// A Boolean value affecting whether touches are delivered to a view when a gesture is recognized.        /// </summary>        [iOSVersion(3.2)]        [Export("cancelsTouchesInView")]        public bool CancelsTouchesInView { get; set; }                /// <summary>        /// A Boolean value determining whether the receiver delays sending touches in a begin phase to its view.        /// </summary>        [iOSVersion(3.2)]        [Export("delaysTouchesBegan")]        public bool DelaysTouchesBegan { get; set; }                /// <summary>        /// A Boolean value determining whether the receiver delays sending touches in a end phase to its view.        /// </summary>        [iOSVersion(3.2)]        [Export("delaysTouchesEnded")]        public bool DelaysTouchesEnded { get; set; }                /// <summary>        /// Creates a dependency relationship between the receiver and another gesture recognizer.        /// </summary>        /// <param name="otherGestureRecognizer">Another gesture-recognizer object (an instance of a subclass of UIGestureRecognizer).</param>        [iOSVersion(3.2)]        [Export("requireGestureRecognizerToFail")]        public void RequireGestureRecognizerToFail(UIGestureRecognizer otherGestureRecognizer) { }                /// <summary>        /// The delegate of the gesture recognizer.        /// </summary>        [iOSVersion(3.2)]        [Export("delegate")]        public UIGestureRecognizerDelegate Delegate { get; set; }    }

    /// <summary>
    /// The current state a gesture recognizer is in.
    /// </summary>
    public enum UIGestureRecognizerState
    {
        /// <summary>
        /// The gesture recognizer has not yet recognized its gesture, but may be evaluating touch events. This is the default state.
        /// </summary>
        [iOSVersion(3.2)]
        Possible,

        /// <summary>
        /// The gesture recognizer has received touch objects recognized as a continuous gesture. It sends its action message (or messages) at the next cycle of the run loop.
        /// </summary>
        [iOSVersion(3.2)]
        Began,

        /// <summary>
        /// The gesture recognizer has received touches recognized as a change to a continuous gesture. It sends its action message (or messages) at the next cycle of the run loop.
        /// </summary>
        [iOSVersion(3.2)]
        Changed,

        /// <summary>
        /// The gesture recognizer has received touches recognized as the end of a continuous gesture. It sends its action message (or messages) at the next cycle of the run loop and resets its state to UIGestureRecognizerStatePossible.
        /// </summary>
        [iOSVersion(3.2)]
        Ended,

        /// <summary>
        /// The gesture recognizer has received touches resulting in the cancellation of a continuous gesture. It sends its action message (or messages) at the next cycle of the run loop and resets its state to UIGestureRecognizerStatePossible.
        /// </summary>
        [iOSVersion(3.2)]
        Cancelled,

        /// <summary>
        /// The gesture recognizer has received a multi-touch sequence that it cannot recognize as its gesture. No action message is sent and the gesture recognizer is reset to UIGestureRecognizerStatePossible.
        /// </summary>
        [iOSVersion(3.2)]
        Failed,
    }}