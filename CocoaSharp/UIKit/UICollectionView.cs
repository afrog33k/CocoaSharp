using CoreGraphics;
using ObjectiveC;using System;using SwiftSharp.Attributes;using Foundation;namespace UIKit{	//https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UICollectionView_class/index.html#//apple_ref/occ/cl/UICollectionView	/// <summary>	/// The UICollectionView class manages an ordered collection of data items and presents them using customizable layouts. Collection views provide the same general function as table views except that a collection view is able to support more than just single-column layouts. Collection views support customizable layouts that can be used to implement multi-column grids, tiled layouts, circular layouts, and many more. You can even change the layout of a collection view dynamically if you want.	/// </summary>	[iOSVersion(6)]	public class UICollectionView : UIScrollView	{		/// <summary>		/// Initializes and returns a newly allocated collection view object with the specified frame and layout.		/// </summary>		/// <param name="frame">The frame rectangle for the collection view, measured in points. The origin of the frame is relative to the superview in which you plan to add it. This frame is passed to the superclass during initialization.</param>		/// <param name="collectionViewLayout">The layout object to use for organizing items. The collection view stores a strong reference to the specified object. Must not be nil.</param>		/// <returns>An initialized collection view object or nil if the object could not be created.</returns>		[iOSVersion(6)]		public UICollectionView(CGRect frame, UICollectionViewLayout collectionViewLayout) { }				/// <summary>		/// The object that acts as the delegate of the collection view.		/// </summary>		[iOSVersion(6)]		[Export("delegate")]		public UICollectionViewDelegate Delegate { get; set; }				/// <summary>		/// The object that provides the data for the collection view.		/// </summary>		[iOSVersion(6)]		[Export("dataSource")]		public UICollectionViewDataSource DataSource { get; set; }				/// <summary>		/// The view that provides the background appearance.		/// </summary>		[iOSVersion(6)]		[Export("backgroundView")]		public UIView BackgroundView { get; set; }				/// <summary>		/// Register a class for use in creating new collection view cells.		/// </summary>		/// <param name="cellClass">The class of a cell that you want to use in the collection view.</param>		/// <param name="forCellWithReuseIdentifier">The reuse identifier to associate with the specified class. This parameter must not be nil and must not be an empty string.</param>		[iOSVersion(6)]		[Export("registerClass")]		public void RegisterClass(AnyClass cellClass, string forCellWithReuseIdentifier) { }				/// <summary>		/// Register a nib file for use in creating new collection view cells.		/// </summary>		/// <param name="nib">The nib object containing the cell object. The nib file must contain only one top-level object and that object must be of the type UICollectionViewCell.</param>		/// <param name="forCellWithReuseIdentifier">The reuse identifier to associate with the specified nib file. This parameter must not be nil and must not be an empty string.</param>		[iOSVersion(6)]		[Export("registerNib")]		public void RegisterNib(UINib nib, string forCellWithReuseIdentifier) { }				/// <summary>		/// Registers a class for use in creating supplementary views for the collection view.		/// </summary>		/// <param name="viewClass">The class to use for the supplementary view.</param>		/// <param name="forSupplementaryViewOfKind">The kind of supplementary view to create. This value is defined by the layout object. This parameter must not be nil.</param>		/// <param name="withReuseIdentifier">The reuse identifier to associate with the specified class. This parameter must not be nil and must not be an empty string.</param>		[iOSVersion(6)]		[Export("registerClass")]		public void RegisterClass(AnyClass viewClass, string forSupplementaryViewOfKind, string withReuseIdentifier) { }				/// <summary>		/// Registers a nib file for use in creating supplementary views for the collection view.		/// </summary>		/// <param name="nib">The nib object containing the view object. The nib file must contain only one top-level object and that object must be of the type UICollectionReusableView.</param>		/// <param name="forSupplementaryViewOfKind">The kind of supplementary view to create. The layout defines the types of supplementary views it supports. The value of this string may correspond to one of the predefined kind strings or to a custom string that the layout added to support a new type of supplementary view. This parameter must not be nil.</param>		/// <param name="withReuseIdentifier">The reuse identifier to associate with the specified nib file. This parameter must not be nil and must not be an empty string.</param>		[iOSVersion(6)]		[Export("registerNib")]		public void RegisterNib(UINib nib, string forSupplementaryViewOfKind, string withReuseIdentifier) { }				/// <summary>		/// Returns a reusable cell object located by its identifier		/// </summary>		/// <param name="identifier">The reuse identifier for the specified cell. This parameter must not be nil.</param>		/// <param name="forIndexPath">The index path specifying the location of the cell. The data source receives this information when it is asked for the cell and should just pass it along. This method uses the index path to perform additional configuration based on the cell’s position in the collection view.</param>		/// <returns>A valid UICollectionReusableView object.</returns>		[iOSVersion(6)]		[Export("dequeueReusableCellWithReuseIdentifier")]		public AnyObject DequeueReusableCellWithReuseIdentifier(string identifier, NSIndexPath forIndexPath) { return null; }				/// <summary>		/// Returns a reusable supplementary view located by its identifier and kind.		/// </summary>		/// <param name="elementKind">The kind of supplementary view to retrieve. This value is defined by the layout object. This parameter must not be nil.</param>		/// <param name="withReuseIdentifier">The reuse identifier for the specified view. This parameter must not be nil.</param>		/// <param name="forIndexPath">The index path specifying the location of the supplementary view in the collection view. The data source receives this information when it is asked for the view and should just pass it along. This method uses the information to perform additional configuration based on the view’s position in the collection view.</param>		/// <returns>A valid UICollectionReusableView object.</returns>		[iOSVersion(6)]		[Export("dequeueReusableSupplementaryViewOfKind")]		public AnyObject DequeueReusableSupplementaryViewOfKind(string elementKind, string withReuseIdentifier, NSIndexPath forIndexPath) { return null; }				/// <summary>		/// The layout used to organize the collected view’s items.		/// </summary>		[iOSVersion(6)]		[Export("collectionViewLayout")]		public UICollectionViewLayout CollectionViewLayout { get; set; }				/// <summary>		/// Changes the collection view’s layout and optionally animates the change.		/// </summary>		/// <param name="layout">The new layout object for the collection view.</param>		/// <param name="animated">Specify true if you want to animate changes from the current layout to the new layout specified by the layout parameter. Specify false to make the change without animations.</param>		[iOSVersion(6)]		[Export("setCollectionViewLayout")]		public void SetCollectionViewLayout(UICollectionViewLayout layout, bool animated) { }				/// <summary>		/// Changes the collection view’s layout and notifies you when the animations complete.		/// </summary>		/// <param name="layout">The new layout object for the collection view.</param>		/// <param name="animated">Specify true if you want to animate changes from the current layout to the new layout specified by the layout parameter. Specify false to make the change without animations.</param>		/// <param name="completion">The block that is executed when the layout transition finishes or is aborted by the user. This block takes the following parameter:           finished              A Boolean indicating whether the transition completed successfully. This parameter is true if the transition finished and the new layout is installed. It is false if the user aborted the transition and returned to the old layout.</param>		[iOSVersion(7)]		[Export("setCollectionViewLayout")]		public void SetCollectionViewLayout(UICollectionViewLayout layout, bool animated, Action<bool> completion) { }				/// <summary>		/// Changes the collection view’s current layout using an interactive transition effect.		/// </summary>		/// <param name="layout">The new layout object for the collected views. This is the layout that you want the collection view to use after the interactive transition is done.</param>		/// <param name="completion">A completion handler to execute after the transition finishes.</param>		/// <returns>The intermediate transition layout object responsible for managing the interactive transition behavior.</returns>		[iOSVersion(7)]		[Export("startinteractiveTransitionToCollectionViewLayout")]		public UICollectionViewTransitionLayout StartinteractiveTransitionToCollectionViewLayout(UICollectionViewLayout layout, UICollectionViewLayoutinteractiveTransitionCompletion completion) { return null; }				/// <summary>		/// Tells the collection view to finish an interactive transition by installing the intended target layout.		/// </summary>		[iOSVersion(7)]		[Export("finishinteractiveTransition")]		public void FinishinteractiveTransition() { }				/// <summary>		/// Tells the collection view to abort an interactive transition and return to its original layout object.		/// </summary>		[iOSVersion(7)]		[Export("cancelinteractiveTransition")]		public void CancelinteractiveTransition() { }				/// <summary>		/// Reloads all of the data for the collection view.		/// </summary>		[iOSVersion(6)]		[Export("reloadData")]		public void ReloadData() { }				/// <summary>		/// Reloads the data in the specified sections of the collection view.		/// </summary>		/// <param name="sections">The indexes of the sections to reload.</param>		[iOSVersion(6)]		[Export("reloadSections")]		public void ReloadSections(NSIndexSet sections) { }				/// <summary>		/// Reloads just the items at the specified index paths.		/// </summary>		/// <param name="indexPaths">An array of NSIndexPath objects identifying the items you want to update.</param>		[iOSVersion(6)]		[Export("reloadItemsAtIndexPaths")]		public void ReloadItemsAtIndexPaths(AnyObject[] indexPaths) { }				/// <summary>		/// Returns the number of sections displayed by the collection view.		/// </summary>		/// <returns>The number of sections in the collection view.</returns>		[iOSVersion(6)]		[Export("numberOfSections")]		public int NumberOfSections() { return 0; }				/// <summary>		/// Returns the number of items in the specified section.		/// </summary>		/// <param name="section">The index of the section for which you want a count of the items.</param>		/// <returns>The number of items in the specified section.</returns>		[iOSVersion(6)]		[Export("numberOfItemsInSection")]		public int NumberOfItemsInSection(int section) { return 0; }				/// <summary>		/// Returns an array of visible cells currently displayed by the collection view.		/// </summary>		/// <returns>An array of UICollectionViewCell objects. If no cells are visible, this method returns an empty array.</returns>		[iOSVersion(6)]		[Export("visibleCells")]		public AnyObject[] VisibleCells() { return null; }				/// <summary>		/// Inserts new items at the specified index paths.		/// </summary>		/// <param name="indexPaths">An array of NSIndexPath objects, each of which contains a section index and item index at which to insert a new cell. This parameter must not be nil.</param>		[iOSVersion(6)]		[Export("insertItemsAtIndexPaths")]		public void InsertItemsAtIndexPaths(AnyObject[] indexPaths) { }				/// <summary>		/// Moves an item from one location to another in the collection view.		/// </summary>		/// <param name="indexPath">The index path of the item you want to move. This parameter must not be nil.</param>		/// <param name="toIndexPath">The index path of the item’s new location. This parameter must not be nil.</param>		[iOSVersion(6)]		[Export("moveItemAtIndexPath")]		public void MoveItemAtIndexPath(NSIndexPath indexPath, NSIndexPath toIndexPath) { }				/// <summary>		/// Deletes the items at the specified index paths.		/// </summary>		/// <param name="indexPaths">An array of NSIndexPath objects, each of which contains a section index and item index for the item you want to delete from the collection view. This parameter must not be nil.</param>		[iOSVersion(6)]		[Export("deleteItemsAtIndexPaths")]		public void DeleteItemsAtIndexPaths(AnyObject[] indexPaths) { }				/// <summary>		/// Inserts new sections at the specified indexes.		/// </summary>		/// <param name="sections">An index set containing the indexes of the sections you want to insert. This parameter must not be nil.</param>		[iOSVersion(6)]		[Export("insertSections")]		public void InsertSections(NSIndexSet sections) { }				/// <summary>		/// Moves a section from one location to another in the collection view.		/// </summary>		/// <param name="section">The index path of the section you want to move. This parameter must not be nil.</param>		/// <param name="toSection">The index path of the section’s new location. This parameter must not be nil.</param>		[iOSVersion(6)]		[Export("moveSection")]		public void MoveSection(int section, int toSection) { }				/// <summary>		/// Deletes the sections at the specified indexes.		/// </summary>		/// <param name="sections">The indexes of the sections you want to delete. This parameter must not be nil.</param>		[iOSVersion(6)]		[Export("deleteSections")]		public void DeleteSections(NSIndexSet sections) { }				/// <summary>		/// A Boolean value that indicates whether users can select items in the collection view.		/// </summary>		[iOSVersion(6)]		[Export("allowsSelection")]		public bool AllowsSelection { get; set; }				/// <summary>		/// A Boolean value that determines whether users can select more than one item in the collection view.		/// </summary>		[iOSVersion(6)]		[Export("allowsMultipleSelection")]		public bool AllowsMultipleSelection { get; set; }				/// <summary>		/// Returns the index paths for the selected items.		/// </summary>		/// <returns>An array of NSIndexPath objects, each of which corresponds to a single selected item. If there are no selected items, this method returns an empty array.</returns>		[iOSVersion(6)]		[Export("indexPathsForSelectedItems")]		public AnyObject[] IndexPathsForSelectedItems() { return null; }				/// <summary>		/// Selects the item at the specified index path and optionally scrolls it into view.		/// </summary>		/// <param name="indexPath">The index path of the item to select. Specifying nil for this parameter clears the current selection.</param>		/// <param name="animated">Specify true to animate the change in the selection or false to make the change without animating it.</param>		/// <param name="scrollPosition">An option that specifies where the item should be positioned when scrolling finishes. For a list of possible values, see “UICollectionViewScrollPosition”.</param>		[iOSVersion(6)]		[Export("selectItemAtIndexPath")]		public void SelectItemAtIndexPath(NSIndexPath indexPath, bool animated, UICollectionViewScrollPosition scrollPosition) { }				/// <summary>		/// Deselects the item at the specified index.		/// </summary>		/// <param name="indexPath">The index path of the item to select. Specifying nil results in no change to the current selection.</param>		/// <param name="animated">Specify true to animate the change in the selection or false to make the change without animating it.</param>		[iOSVersion(6)]		[Export("deselectItemAtIndexPath")]		public void DeselectItemAtIndexPath(NSIndexPath indexPath, bool animated) { }				/// <summary>		/// Returns the index path of the item at the specified point in the collection view.		/// </summary>		/// <param name="point">A point in the collection view’s coordinate system.</param>		/// <returns>The index path of the item at the specified point or nil if no item was found at the specified point.</returns>		[iOSVersion(6)]		[Export("indexPathForItemAtPoint")]		public NSIndexPath IndexPathForItemAtPoint(CGPoint point) { return null; }				/// <summary>		/// Returns an array of the visible items in the collection view.		/// </summary>		/// <returns>An array of NSIndexPath objects, each of which corresponds to a visible cell in the collection view. This array does not include any supplementary views that are currently visible. If there are no visible items, this method returns an empty array.</returns>		[iOSVersion(6)]		[Export("indexPathsForVisibleItems")]		public AnyObject[] IndexPathsForVisibleItems() { return null; }				/// <summary>		/// Returns the index path of the specified cell.		/// </summary>		/// <param name="cell">The cell object whose index path you want.</param>		/// <returns>The index path of the cell or nil if the specified cell is not in the collection view.</returns>		[iOSVersion(6)]		[Export("indexPathForCell")]		public NSIndexPath IndexPathForCell(UICollectionViewCell cell) { return null; }				/// <summary>		/// Returns the visible cell object at the specified index path.		/// </summary>		/// <param name="indexPath">The index path that specifies the section and item number of the cell.</param>		/// <returns>The cell object at the corresponding index path or nil if the cell is not visible or indexPath is out of range.</returns>		[iOSVersion(6)]		[Export("cellForItemAtIndexPath")]		public UICollectionViewCell CellForItemAtIndexPath(NSIndexPath indexPath) { return null; }				/// <summary>		/// Returns the layout information for the item at the specified index path.		/// </summary>		/// <param name="indexPath">The index path of the item.</param>		/// <returns>The layout attributes for the item or nil if no item exists at the specified path.</returns>		[iOSVersion(6)]		[Export("layoutAttributesForItemAtIndexPath")]		public UICollectionViewLayoutAttributes LayoutAttributesForItemAtIndexPath(NSIndexPath indexPath) { return null; }				/// <summary>		/// Returns the layout information for the specified supplementary view.		/// </summary>		/// <param name="kind">A string specifying the kind of supplementary view whose layout attributes you want. Layout classes are responsible for defining the kinds of supplementary views they support.</param>		/// <param name="atIndexPath">The index path of the supplementary view. The interpretation of this value depends on how the layout implements the view. For example, a view associated with a section might contain just a section value.</param>		/// <returns>The layout attributes of the supplementary view or nil if the specified supplementary view does not exist.</returns>		[iOSVersion(6)]		[Export("layoutAttributesForSupplementaryElementOfKind")]		public UICollectionViewLayoutAttributes LayoutAttributesForSupplementaryElementOfKind(string kind, NSIndexPath atIndexPath) { return null; }				/// <summary>		/// Scrolls the collection view contents until the specified item is visible.		/// </summary>		/// <param name="indexPath">The index path of the item to scroll into view.</param>		/// <param name="atScrollPosition">An option that specifies where the item should be positioned when scrolling finishes. For a list of possible values, see “UICollectionViewScrollPosition”.</param>		/// <param name="animated">Specify true to animate the scrolling behavior or false to adjust the scroll view’s visible content immediately.</param>		[iOSVersion(6)]		[Export("scrollToItemAtIndexPath")]		public void ScrollToItemAtIndexPath(NSIndexPath indexPath, UICollectionViewScrollPosition atScrollPosition, bool animated) { }				/// <summary>		/// Animates multiple insert, delete, reload, and move operations as a group.		/// </summary>		/// <param name="updates">The block that performs the relevant insert, delete, reload, or move operations.</param>		/// <param name="completion">A completion handler block to execute when all of the operations are finished. This block takes a single Boolean parameter that contains the value true if all of the related animations completed successfully or false if they were interrupted. This parameter may be nil.</param>		[iOSVersion(6)]		[Export("performBatchUpdates")]		public void PerformBatchUpdates(Action updates, Action<bool> completion) { }	}			/// <summary>	/// Constants that indicate how to scroll an item into the visible portion of the collection view.	/// </summary>	public enum UICollectionViewScrollPosition	{		/// <summary>		/// Do not scroll the item into view.		/// </summary>		[iOSVersion(6)]		None,					/// <summary>		/// Scroll so that the item is positioned at the top of the collection view’s bounds. This option is mutually exclusive with the UICollectionViewScrollPositionCenteredVertically and UICollectionViewScrollPositionBottom options.		/// </summary>		[iOSVersion(6)]		Top,					/// <summary>		/// Scroll so that the item is centered vertically in the collection view. This option is mutually exclusive with the UICollectionViewScrollPositionTop and UICollectionViewScrollPositionBottom options.		/// </summary>		[iOSVersion(6)]		CenteredVertically,					/// <summary>		/// Scroll so that the item is positioned at the bottom of the collection view’s bounds. This option is mutually exclusive with the UICollectionViewScrollPositionTop and UICollectionViewScrollPositionCenteredVertically options.		/// </summary>		[iOSVersion(6)]		Bottom,					/// <summary>		/// Scroll so that the item is positioned at the left edge of the collection view’s bounds. This option is mutually exclusive with the UICollectionViewScrollPositionCenteredHorizontally and UICollectionViewScrollPositionRight options.		/// </summary>		[iOSVersion(6)]		Left,					/// <summary>		/// Scroll so that the item is centered horizontally in the collection view. This option is mutually exclusive with the UICollectionViewScrollPositionLeft and UICollectionViewScrollPositionRight options.		/// </summary>		[iOSVersion(6)]		CenteredHorizontally,					/// <summary>		/// Scroll so that the item is positioned at the right edge of the collection view’s bounds. This option is mutually exclusive with the UICollectionViewScrollPositionLeft and UICollectionViewScrollPositionCenteredHorizontally options.		/// </summary>		[iOSVersion(6)]		Right,	}}