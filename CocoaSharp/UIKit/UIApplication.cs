using CoreGraphics;
using ObjectiveC;using System;using SwiftSharp.Attributes;using Foundation;namespace UIKit{    //https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIApplication_Class/index.html#//apple_ref/occ/cl/UIApplication    /// <summary>    /// The UIApplication class provides a centralized point of control and coordination for apps running on iOS. Every app must have exactly one instance of UIApplication (or a subclass of UIApplication). When an app is launched, the UIApplicationMain function is called; among its other tasks, this function creates a singleton UIApplication object. Thereafter you access this object by invoking the sharedApplication class method.    /// </summary>    [iOSVersion(2)]    public class UIApplication : UIResponder    {        /// <summary>        /// Returns the singleton app instance.        /// </summary>        /// <returns>The app instance is created in the UIApplicationMain function.</returns>        [iOSVersion(2)]        [Export("sharedApplication")]        public static UIApplication SharedApplication() { return null; }                /// <summary>        /// The delegate of the app object.        /// </summary>        [iOSVersion(2)]        [Export("delegate")]        public UIApplicationDelegate Delegate { get; set; }                /// <summary>        /// The app's key window. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("keyWindow")]        public UIWindow KeyWindow { get; private set; }                /// <summary>        /// The app's visible and hidden windows. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("windows")]        public AnyObject[] Windows { get; private set; }                /// <summary>        /// Dispatches an event to the appropriate responder objects in the app.        /// </summary>        /// <param name="event">A UIEvent object encapsulating the information about an event, including the touches involved.</param>        [iOSVersion(2)]        [Export("sendEvent")]        public void SendEvent(UIEvent @event) { }                /// <summary>        /// Sends an action message identified by selector to a specified target.        /// </summary>        /// <param name="action">A selector identifying an action method. See the discussion for information on the permitted selector forms.</param>        /// <param name="to">The object to receive the action message. If target is nil, the app sends the message to the first responder, from whence it progresses up the responder chain until it is handled.</param>        /// <param name="from">The object that is sending the action message. The default sender is the UIControl object that invokes this method.</param>        /// <param name="forEvent">A UIEvent object that encapsulates information about the event originating the action message.</param>        /// <returns>true if a responder object handled the action message, false if no object in the responder chain handled the message.</returns>        [iOSVersion(2)]        [Export("sendAction")]        public bool SendAction(Selector action, AnyObject to, AnyObject from, UIEvent forEvent) { return false; }                /// <summary>        /// Tells the receiver to suspend the handling of touch-related events.        /// </summary>        [iOSVersion(2)]        [Export("beginIgnoringinteractionEvents")]        public void BeginIgnoringinteractionEvents() { }                /// <summary>        /// Tells the receiver to resume the handling of touch-related events.        /// </summary>        [iOSVersion(2)]        [Export("endIgnoringinteractionEvents")]        public void EndIgnoringinteractionEvents() { }                /// <summary>        /// Returns whether the receiver is ignoring events initiated by touches on the screen.        /// </summary>        /// <returns>true if the receiver is ignoring interaction events; otherwise false. The method returns true if the nested beginIgnoringinteractionEvents and endIgnoringinteractionEvents calls are at least one level deep.</returns>        [iOSVersion(2)]        [Export("isIgnoringinteractionEvents")]        public bool IsIgnoringinteractionEvents() { return false; }                /// <summary>        /// A Boolean value that determines whether shaking the device displays the undo-redo user interface.        /// </summary>        [iOSVersion(3)]        [Export("applicationSupportsShakeToEdit")]        public bool ApplicationSupportsShakeToEdit { get; set; }                /// <summary>        /// Opens the resource at the specified URL.        /// </summary>        /// <param name="url">An object representing a URL (Universal Resource Locator). UIKit supports many schemes, including http, https, tel, facetime, and mailto schemes.</param>        /// <returns>true if the resource located by the URL was successfully opened; otherwise false.</returns>        [iOSVersion(2)]        [Export("openURL")]        public bool OpenURL(NSURL url) { return false; }                /// <summary>        /// Returns whether an app can open a given URL resource.        /// </summary>        /// <param name="url">A URL object that identifies a given resource. The URL’s scheme—possibly a custom scheme—identifies which app can handle the URL.</param>        /// <returns>false if no app is available that will accept the URL; otherwise, returns true.</returns>        [iOSVersion(3)]        [Export("canOpenURL")]        public bool CanOpenURL(NSURL url) { return false; }                /// <summary>        /// Registers your preferred options for notifying the user.        /// </summary>        /// <param name="notificationSettings">The types of notifications that your app wants to use. You also use this object to specify custom actions that can be initiated by the user from an alert displayed in response to a local or remote notification.</param>        [iOSVersion(8)]        [Export("registerUserNotificationSettings")]        public void RegisterUserNotificationSettings(UIUserNotificationSettings notificationSettings) { }                /// <summary>        /// Returns the user notification settings for the app.        /// </summary>        /// <returns>A user notification settings object indicating the types of notifications that your app may use.</returns>        [iOSVersion(8)]        [Export("currentUserNotificationSettings")]        public UIUserNotificationSettings CurrentUserNotificationSettings() { return null; }                /// <summary>        /// Register to receive push notifications via Apple Push Service.        /// </summary>        [iOSVersion(8)]        [Export("registerForRemoteNotifications")]        public void RegisterForRemoteNotifications() { }                /// <summary>        /// Unregister for all push notifications received via Apple Push Service.        /// </summary>        [iOSVersion(3)]        [Export("unregisterForRemoteNotifications")]        public void UnregisterForRemoteNotifications() { }                /// <summary>        /// Returns a Boolean indicating whether the app is currently registered for remote notifications.        /// </summary>        /// <returns>true if the app is registered for remote notifications and received its device token or false if registration has not occurred, has failed, or has been denied by the user.</returns>        [iOSVersion(8)]        [Export("isRegisteredForRemoteNotifications")]        public bool IsRegisteredForRemoteNotifications() { return false; }                /// <summary>        /// Schedules a local notification for delivery at its encapsulated date and time.        /// </summary>        /// <param name="notification">The local notification object that you want to schedule. This object contains information about when to deliver the notification and what to do when that date occurs. The system keeps a copy of this object so you may release the object once it is scheduled.</param>        [iOSVersion(4)]        [Export("scheduleLocalNotification")]        public void ScheduleLocalNotification(UILocalNotification notification) { }                /// <summary>        /// Presents a local notification immediately.        /// </summary>        /// <param name="notification">A local notification that the operating system presents for the app immediately, regardless of the value of the notification’s fireDate property. Apps running in the background state can immediately present local notifications when there are incoming chats, messages, or updates. Because the operating system copies notification, you may release it once you have scheduled it.</param>        [iOSVersion(4)]        [Export("presentLocalNotificationNow")]        public void PresentLocalNotificationNow(UILocalNotification notification) { }                /// <summary>        /// Cancels the delivery of the specified scheduled local notification.        /// </summary>        /// <param name="notification">The local notification to cancel.</param>        [iOSVersion(4)]        [Export("cancelLocalNotification")]        public void CancelLocalNotification(UILocalNotification notification) { }                /// <summary>        /// Cancels the delivery of all scheduled local notifications.        /// </summary>        [iOSVersion(4)]        [Export("cancelAllLocalNotifications")]        public void CancelAllLocalNotifications() { }                /// <summary>        /// All currently scheduled local notifications.        /// </summary>        [iOSVersion(4)]        [Export("scheduledLocalNotifications")]        public AnyObject[] ScheduledLocalNotifications { get; set; }                /// <summary>        /// The runtime state of the app. (read-only)        /// </summary>        [iOSVersion(4)]        [Export("applicationState")]        public UIApplicationState ApplicationState { get; private set; }                /// <summary>        /// The amount of time the app has to run in the background. (read-only)        /// </summary>        [iOSVersion(4)]        [Export("backgroundTimeRemaining")]        public NSTimeinterval BackgroundTimeRemaining { get; private set; }                /// <summary>        /// The ability of the app to be launched into the background so that it can perform background behaviors. (read-only)        /// </summary>        [iOSVersion(7)]        [Export("backgroundRefreshStatus")]        public UIBackgroundRefreshStatus BackgroundRefreshStatus { get; private set; }                /// <summary>        /// Specifies the minimum amount of time that must elapse between background fetch operations.        /// </summary>        /// <param name="minimumBackgroundFetchinterval">The minimum number of seconds that must elapse before another background fetch can be initiated. This value is advisory only and does not indicate the exact amount of time expected between fetch operations.</param>        [iOSVersion(7)]        [Export("setMinimumBackgroundFetchinterval")]        public void SetMinimumBackgroundFetchinterval(NSTimeinterval minimumBackgroundFetchinterval) { }                /// <summary>        /// Marks the beginning of a new long-running background task with the specified name.        /// </summary>        /// <param name="taskName">The name to display in the debugger when viewing the background task. If you specify nil for this parameter, this method generates a name based on the name of the calling function or method.</param>        /// <param name="expirationHandler">A handler to be called shortly before the app’s remaining background time reaches 0. You should use this handler to clean up and mark the end of the background task. Failure to end the task explicitly will result in the termination of the app. The handler is called synchronously on the main thread, blocking the app’s suspension momentarily while the app is notified.</param>        /// <returns>A unique identifier for the new background task. You must pass this value to the endBackgroundTask: method to mark the end of this task. This method returns UIBackgroundTaskInvalid if running in the background is not possible.</returns>        [iOSVersion(7)]        [Export("beginBackgroundTaskWithName")]        public UIBackgroundTaskIdentifier BeginBackgroundTaskWithName(string taskName, Action<> expirationHandler) { return null; }                /// <summary>        /// Marks the beginning of a new long-running background task.        /// </summary>        /// <param name="handler">A handler to be called shortly before the app’s remaining background time reaches 0. You should use this handler to clean up and mark the end of the background task. Failure to end the task explicitly will result in the termination of the app. The handler is called synchronously on the main thread, blocking the app’s suspension momentarily while the app is notified.</param>        /// <returns>A unique identifier for the new background task. You must pass this value to the endBackgroundTask: method to mark the end of this task. This method returns UIBackgroundTaskInvalid if running in the background is not possible.</returns>        [iOSVersion(4)]        [Export("beginBackgroundTaskWithExpirationHandler")]        public UIBackgroundTaskIdentifier BeginBackgroundTaskWithExpirationHandler(Action<> handler) { return null; }                /// <summary>        /// Marks the end of a specific long-running background task.        /// </summary>        /// <param name="identifier">An identifier returned by the beginBackgroundTaskWithExpirationHandler: method.</param>        [iOSVersion(4)]        [Export("endBackgroundTask")]        public void EndBackgroundTask(UIBackgroundTaskIdentifier identifier) { }                /// <summary>        /// Configures a periodic handler for VoIP apps in older versions of iOS.        /// </summary>        /// <param name="timeout">The maximum interval (measured in seconds) at which your app should be woken up to check its VoIP connection. The minimum acceptable timeout value is 600 seconds.</param>        /// <param name="handler">A block that performs the tasks needed to maintain your VoIP network connection. Setting this parameter to nil releases the current handler block and prevents UIKit from scheduling the next wake.</param>        /// <returns>true if the handler was installed or false if it was not.</returns>        [iOSVersion(4)]        [Export("setKeepAliveTimeout")]        public bool SetKeepAliveTimeout(NSTimeinterval timeout, Action<> handler) { return false; }                /// <summary>        /// Removes a previously installed periodic handler block.        /// </summary>        [iOSVersion(4)]        [Export("clearKeepAliveTimeout")]        public void ClearKeepAliveTimeout() { }                /// <summary>        /// Tells the app that your code is restoring state asynchronously.        /// </summary>        [iOSVersion(6)]        [Export("extendStateRestoration")]        public void ExtendStateRestoration() { }                /// <summary>        /// Tells the app that your code has finished any asynchronous state restoration.        /// </summary>        [iOSVersion(6)]        [Export("completeStateRestoration")]        public void CompleteStateRestoration() { }                /// <summary>        /// Prevents the app from using the recent snapshot image during the next launch cycle.        /// </summary>        [iOSVersion(7)]        [Export("ignoreSnapshotOnNextApplicationLaunch")]        public void IgnoreSnapshotOnNextApplicationLaunch() { }                /// <summary>        /// Registers a custom object for use with the state restoration system.        /// </summary>        /// <param name="object">The object to be registered with the restoration archive. The object must adopt the UIStateRestoring protocol. This parameter must not be nil.</param>        /// <param name="restorationIdentifier">The restoration identifier for the object. UIKit uses this parameter to distinguish the object from other objects in the archive. This parameter must not be nil.</param>        [iOSVersion(7)]        [Export("registerObjectForStateRestoration")]        public static void RegisterObjectForStateRestoration(UIStateRestoring @object, string restorationIdentifier) { }                /// <summary>        /// A Boolean value indicating whether content protection is active. (read-only)        /// </summary>        [iOSVersion(4)]        [Export("protectedDataAvailable")]        public bool ProtectedDataAvailable { get; private set; }                /// <summary>        /// Tells the app to begin receiving remote-control events.        /// </summary>        [iOSVersion(4)]        [Export("beginReceivingRemoteControlEvents")]        public void BeginReceivingRemoteControlEvents() { }                /// <summary>        /// Tells the app to stop receiving remote-control events.        /// </summary>        [iOSVersion(4)]        [Export("endReceivingRemoteControlEvents")]        public void EndReceivingRemoteControlEvents() { }                /// <summary>        /// A Boolean value that controls whether the idle timer is disabled for the app.        /// </summary>        [iOSVersion(2)]        [Export("idleTimerDisabled")]        public bool IdleTimerDisabled { get; set; }                /// <summary>        /// Hides or shows the status bar, optionally animating the transition.        /// </summary>        /// <param name="hidden">true to hide the status bar, false to show the status bar.</param>        /// <param name="withAnimation">A constant that indicates whether there should be an animation and, if one is requested, whether it should fade the status bar in or out or whether it should slide the status bar in or out.</param>        [iOSVersion(3.2)]        [Export("setStatusBarHidden")]        public void SetStatusBarHidden(bool hidden, UIStatusBarAnimation withAnimation) { }                /// <summary>        /// A Boolean value that determines whether the status bar is hidden.        /// </summary>        [iOSVersion(2)]        [Export("statusBarHidden")]        public bool StatusBarHidden { get; set; }                /// <summary>        /// Sets the style of the status bar, optionally animating the transition to the new style.        /// </summary>        /// <param name="statusBarStyle">A constant that specifies a style for the status bar. See the descriptions of the constants in UIStatusBarStyle for details.</param>        /// <param name="animated">true if the transition to the new style should be animated; otherwise false .</param>        [iOSVersion(2)]        [Export("setStatusBarStyle")]        public void SetStatusBarStyle(UIStatusBarStyle statusBarStyle, bool animated) { }                /// <summary>        /// The current style of the status bar.        /// </summary>        [iOSVersion(2)]        [Export("statusBarStyle")]        public UIStatusBarStyle StatusBarStyle { get; set; }                /// <summary>        /// The frame rectangle defining the area of the status bar. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("statusBarFrame")]        public CGRect StatusBarFrame { get; private set; }                /// <summary>        /// A Boolean value that turns an indicator of network activity on or off.        /// </summary>        [iOSVersion(2)]        [Export("networkActivityIndicatorVisible")]        public bool NetworkActivityIndicatorVisible { get; set; }                /// <summary>        /// The number currently set as the badge of the app icon in Springboard.        /// </summary>        [iOSVersion(2)]        [Export("applicationIconBadgeNumber")]        public int ApplicationIconBadgeNumber { get; set; }                /// <summary>        /// Returns the layout direction of the user interface. (read-only)        /// </summary>        [iOSVersion(5)]        [Export("userinterfaceLayoutDirection")]        public UIUserinterfaceLayoutDirection UserinterfaceLayoutDirection { get; private set; }                /// <summary>        /// The font sizing option preferred by the user. (read-only)        /// </summary>        [iOSVersion(7)]        [Export("preferredContentSizeCategory")]        public string PreferredContentSizeCategory { get; private set; }                /// <summary>        /// Sets the icon of a Newsstand app to an image depicting the current issue of a publication.        /// </summary>        /// <param name="image">An image to use as the icon of a Newsstand app. Pass nil to clear the currently set image and revert to the icon stored in the app bundle.</param>        [iOSVersion(5)]        [Export("setNewsstandIconImage")]        public void SetNewsstandIconImage(UIImage image) { }                /// <summary>        /// Returns the default set of interface orientations to use for the view controllers in the specified window.        /// </summary>        /// <param name="window">The window whose default interface orientations you want to retrieve.</param>        /// <returns>A bit mask specifying which orientations are supported. See “UIinterfaceOrientationMask” for valid bit-mask values. The value returned by this method must not be 0.</returns>        [iOSVersion(6)]        [Export("supportedinterfaceOrientationsForWindow")]        public int SupportedinterfaceOrientationsForWindow(UIWindow window) { return 0; }                /// <summary>        /// Sets the app's status bar to the specified orientation, optionally animating the transition.        /// </summary>        /// <param name="interfaceOrientation">A specific orientation of the status bar. See UIinterfaceOrientation for details. The default value is UIinterfaceOrientationPortrait.</param>        /// <param name="animated">true if the transition to the new orientation should be animated; false if it should be immediate, without animation.</param>        [iOSVersion(2)]        [Export("setStatusBarOrientation")]        public void SetStatusBarOrientation(UIinterfaceOrientation interfaceOrientation, bool animated) { }                /// <summary>        /// The current orientation of the app's status bar.        /// </summary>        [iOSVersion(2)]        [Export("statusBarOrientation")]        public UIinterfaceOrientation StatusBarOrientation { get; set; }                /// <summary>        /// The animation duration in seconds for the status bar during a 90 degree orientation change. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("statusBarOrientationAnimationDuration")]        public NSTimeinterval StatusBarOrientationAnimationDuration { get; private set; }                /// <summary>        /// Register to receive push notifications of the specified types via Apple Push Service.				 		  Deprecation Statement		  		 Use the registerForRemoteNotifications method instead.        /// </summary>        /// <param name="types">A bit mask specifying the types of notifications the app accepts. For a list of values, see UIRemoteNotificationType.</param>        [Obsolete]        [iOSVersion(3)]        [Export("registerForRemoteNotificationTypes")]        public void RegisterForRemoteNotificationTypes(UIRemoteNotificationType types) { }                /// <summary>        /// Returns the types of notifications the app accepts. 				 		  Deprecation Statement		  		 Use the isRegisteredForRemoteNotifications method instead.        /// </summary>        /// <returns>A bit mask whose values indicate the types of notifications the user has requested for the app. See UIRemoteNotificationType for valid bit-mask values.</returns>        [Obsolete]        [iOSVersion(3)]        [Export("enabledRemoteNotificationTypes")]        public UIRemoteNotificationType EnabledRemoteNotificationTypes() { return null; }                /// <summary>        /// A Boolean value that determines whether proximity sensing is enabled.				 		  Deprecation Statement		  		 Use the proximityMonitoringEnabled and proximityState properties of the UIDevice class instead.        /// </summary>        [Obsolete]        [iOSVersion(2)]        [Export("proximitySensingEnabled")]        public bool ProximitySensingEnabled { get; set; }                /// <summary>        /// Hides or shows the status bar, optionally animating the transition.				 		  Deprecation Statement		  		 Use the setStatusBarHidden:withAnimation: method instead.        /// </summary>        /// <param name="hidden">true if the status bar should be hidden, false if it should be visible. The default value is false.</param>        /// <param name="animated">true if the transition to or from a hidden state should be animated, false otherwise.</param>        [Obsolete]        [iOSVersion(2)]        [Export("setStatusBarHidden")]        public void SetStatusBarHidden(bool hidden, bool animated) { }                                WHAT                /// <summary>        /// Constants used when running in the background.        /// </summary>                /// <summary>        /// An token indicating an invalid task request. This constant should be used to initialize variables or to check for errors.        /// </summary>        [iOSVersion(4)]        public UIBackgroundTaskIdentifier UIBackgroundTaskInvalid { get; private set; }                /// <summary>        /// The minimum amount of time (measured in seconds) an app may run a critical background task in the background.        /// </summary>        [iOSVersion(4)]        public NSTimeinterval UIMinimumKeepAliveTimeout { get; private set; }        /// <summary>        /// Constants indicating fetch intervals for background downloads.        /// </summary>                /// <summary>        /// The smallest fetch interval supported by the system.        /// </summary>        [iOSVersion(7)]        public NSTimeinterval UIApplicationBackgroundFetchintervalMinimum { get; private set; }                /// <summary>        /// A fetch interval large enough to prevent fetch operations from occurring.        /// </summary>        [iOSVersion(7)]        public NSTimeinterval UIApplicationBackgroundFetchintervalNever { get; private set; }        /// <summary>        /// Constant used to open the app’s settings.        /// </summary>        [Export("UIApplicationOpenSettingsURLString")]        public string UIApplicationOpenSettingsURLString { get; private set; }                /// <summary>        /// Keys used to access values in the userInfo dictionary of some UIApplication-posted notifications.        /// </summary>                /// <summary>        /// A key whose value is an NSNumber object that encapsulates a UIinterfaceOrientation value indicating the current orientation (see UIinterfaceOrientation). This key is used with UIApplicationDidChangeStatusBarOrientationNotification and UIApplicationWillChangeStatusBarOrientationNotification notifications.        /// </summary>        [iOSVersion(2)]        public string UIApplicationStatusBarOrientationUserInfoKey { get; private set; }                /// <summary>        /// A key whose value is an NSValue object that encapsulates a CGRect structure expressing the location and size of the new status bar frame. This key is used with UIApplicationDidChangeStatusBarFrameNotification and UIApplicationWillChangeStatusBarFrameNotification notifications.        /// </summary>        [iOSVersion(2)]        public string UIApplicationStatusBarFrameUserInfoKey { get; private set; }                /// <summary>        /// Constants that indicate the user’s preferred font size.        /// </summary>                /// <summary>        /// An extra small font.        /// </summary>        [iOSVersion(7)]        public string UIContentSizeCategoryExtraSmall { get; private set; }                /// <summary>        /// A small font.        /// </summary>        [iOSVersion(7)]        public string UIContentSizeCategorySmall { get; private set; }                /// <summary>        /// A medium-sized font.        /// </summary>        [iOSVersion(7)]        public string UIContentSizeCategoryMedium { get; private set; }                /// <summary>        /// A large font.        /// </summary>        [iOSVersion(7)]        public string UIContentSizeCategoryLarge { get; private set; }                /// <summary>        /// An extra large font.        /// </summary>        [iOSVersion(7)]        public string UIContentSizeCategoryExtraLarge { get; private set; }                /// <summary>        /// An increasingly large font.        /// </summary>        [iOSVersion(7)]        public string UIContentSizeCategoryExtraExtraLarge { get; private set; }                /// <summary>        /// The largest font option.        /// </summary>        [iOSVersion(7)]        public string UIContentSizeCategoryExtraExtraExtraLarge { get; private set; }                /// <summary>        /// Constants that indicate the preferred font sizes when accessibility is enabled.        /// </summary>                /// <summary>        /// A medium font size reflecting the current accessibility settings.        /// </summary>        [iOSVersion(7)]        public string UIContentSizeCategoryAccessibilityMedium { get; private set; }                /// <summary>        /// A large font size reflecting the current accessibility settings.        /// </summary>        [iOSVersion(7)]        public string UIContentSizeCategoryAccessibilityLarge { get; private set; }                /// <summary>        /// A medium font size reflecting the current accessibility settings.        /// </summary>        [iOSVersion(7)]        public string UIContentSizeCategoryAccessibilityExtraLarge { get; private set; }                /// <summary>        /// A medium font size reflecting the current accessibility settings.        /// </summary>        [iOSVersion(7)]        public string UIContentSizeCategoryAccessibilityExtraExtraLarge { get; private set; }                /// <summary>        /// A medium font size reflecting the current accessibility settings.        /// </summary>        [iOSVersion(7)]        public string UIContentSizeCategoryAccessibilityExtraExtraExtraLarge { get; private set; }                /// <summary>        /// Key identifying the new content size category.        /// </summary>        [Export("UIContentSizeCategoryNewValueKey")]        public string UIContentSizeCategoryNewValueKey { get; private set; }                /// <summary>        /// Mode while tracking in controls is taking place.        /// </summary>        [Export("UITrackingRunLoopMode")]        public string UITrackingRunLoopMode { get; private set; }                /// <summary>        /// The following constant defines an exception that can be thrown by the app.        /// </summary>        [Export("UIApplicationInvalidinterfaceOrientationException")]        public string UIApplicationInvalidinterfaceOrientationException { get; private set; }                                WHAT                                WHAT                                WHAT                                WHAT                                WHAT                                WHAT                                WHAT                                WHAT                                WHAT                                WHAT                                WHAT                                WHAT                                WHAT                                WHAT                                WHAT                                WHAT                                WHAT    }    /// <summary>    /// The style of the device’s status bar.    /// </summary>    public enum UIStatusBarStyle    {        /// <summary>        /// A dark status bar, intended for use on light backgrounds.        /// </summary>        [iOSVersion(2)]        Default,                    /// <summary>        /// A light status bar, intended for use on dark backgrounds.        /// </summary>        [iOSVersion(7)]        LightContent,                    /// <summary>        /// An opaque black style.        /// </summary>        [iOSVersion(7)]        BlackOpaque,    }    /// <summary>    /// The animation applied to the status bar as it is hidden or made visible.    /// </summary>    public enum UIStatusBarAnimation    {        /// <summary>        /// No animation is applied to the status bar as it is shown or hidden.        /// </summary>        [iOSVersion(3.2)]        None,                    /// <summary>        /// The status bar fades in and out as it is shown or hidden, respectively.        /// </summary>        [iOSVersion(3.2)]        Fade,                    /// <summary>        /// The status bar slides in or out as it is shown or hidden, respectively.        /// </summary>        [iOSVersion(3.2)]        Slide,    }    /// <summary>    /// The running states of an app    /// </summary>    public enum UIApplicationState    {        /// <summary>        /// The app is running in the foreground and currently receiving events.        /// </summary>        [iOSVersion(4)]        Active,                    /// <summary>        /// The app is running in the foreground but is not receiving events. This might happen as a result of an interruption or because the app is transitioning to or from the background.        /// </summary>        [iOSVersion(4)]        Inactive,                    /// <summary>        /// The app is running in the background.        /// </summary>        [iOSVersion(4)]        Background,    }            /// <summary>    /// Constants that indicate the result of a background fetch operation.    /// </summary>    public enum UIBackgroundFetchResult    {        /// <summary>        /// New data was successfully downloaded.        /// </summary>        [iOSVersion(7)]        NewData,                    /// <summary>        /// There was no new data to download.        /// </summary>        [iOSVersion(7)]        NoData,                    /// <summary>        /// An attempt to download data was made but that attempt failed.        /// </summary>        [iOSVersion(7)]        Failed,    }            /// <summary>    /// Constants indicating whether background execution is enabled for the app.    /// </summary>    public enum UIBackgroundRefreshStatus    {        /// <summary>        /// Background updates are unavailable and the user cannot enable them again. For example, this status can occur when parental controls are in effect for the current user.        /// </summary>        [iOSVersion(7)]        Restricted,                    /// <summary>        /// The user explicitly disabled background behavior for this app or for the whole system.        /// </summary>        [iOSVersion(7)]        Denied,                    /// <summary>        /// Background updates are available for the app.        /// </summary>        [iOSVersion(7)]        Available,    }    /// <summary>    /// The orientation of the app's user interface.    /// </summary>    public enum UIinterfaceOrientation    {        /// <summary>        /// The orientation of the device cannot be determined.        /// </summary>        [iOSVersion(8)]        Unknown,                    /// <summary>        /// The device is in portrait mode, with the device held upright and the home button on the bottom.        /// </summary>        [iOSVersion(2)]        Portrait,                    /// <summary>        /// The device is in portrait mode but upside down, with the device held upright and the home button at the top.        /// </summary>        [iOSVersion(2)]        PortraitUpsideDown,                    /// <summary>        /// The device is in landscape mode, with the device held upright and the home button on the left side.        /// </summary>        [iOSVersion(2)]        LandscapeLeft,                    /// <summary>        /// The device is in landscape mode, with the device held upright and the home button on the right side.        /// </summary>        [iOSVersion(2)]        LandscapeRight,    }    /// <summary>    /// These constants are mask bits for specifying a view controller’s supported interface orientations.    /// </summary>    public enum UIinterfaceOrientationMask    {        /// <summary>        /// The view controller supports a portrait interface orientation.        /// </summary>        [iOSVersion(6)]        Portrait,                    /// <summary>        /// The view controller supports a landscape-left interface orientation.        /// </summary>        [iOSVersion(6)]        LandscapeLeft,                    /// <summary>        /// The view controller supports a landscape-right interface orientation.        /// </summary>        [iOSVersion(6)]        LandscapeRight,                    /// <summary>        /// The view controller supports an upside-down portrait interface orientation.        /// </summary>        [iOSVersion(6)]        PortraitUpsideDown,                    /// <summary>        /// The view controller supports both landscape-left and landscape-right interface orientation.        /// </summary>        [iOSVersion(6)]        Landscape,                    /// <summary>        /// The view controller supports all interface orientations.        /// </summary>        [iOSVersion(6)]        All,                    /// <summary>        /// The view controller supports all but the upside-down portrait interface orientation.        /// </summary>        [iOSVersion(6)]        AllButUpsideDown,    }    /// <summary>    /// Specifies the directional flow of the user interface.    /// </summary>    public enum UIUserinterfaceLayoutDirection    {        /// <summary>        /// The layout direction is left to right.        /// </summary>        [iOSVersion(5)]        LeftToRight,                    /// <summary>        /// The layout direction right to left. This value is appropriate when running with localizations such as Arabic or Hebrew that should have the user interface layout origin on the right edge of the coordinate system.        /// </summary>        [iOSVersion(5)]        RightToLeft,    }}