using ObjectiveC;using System;using SwiftSharp.Attributes;using Foundation;namespace UIKit{	//https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIPrinterPickerController_class/index.html#//apple_ref/occ/cl/UIPrinterPickerController	/// <summary>	/// A UIPrinterPickerController object displays the system interface for selecting a printer. You can use a printer picker controller to display a list of printers to the user prior to printing a document, photo, or other content. Printer pickers display all pickers normally but you can filter out printers by assigning an appropriate delegate object to the picker before displaying it.	/// </summary>	[iOSVersion(8)]	public class UIPrinterPickerController : NSObject	{		/// <summary>		/// Creates and returns a printer picker with an initially selected printer object.		/// </summary>		/// <param name="initiallySelectedPrinter">A printer object to select initially. Specify nil if you do not want to display a selected printer initially.</param>		/// <returns>An initialized printer picker controller object.</returns>		[iOSVersion(8)]		public UIPrinterPickerController Init(UIPrinter initiallySelectedPrinter) { }				/// <summary>		/// The delegate for the printer picker controller.		/// </summary>		[iOSVersion(8)]		[Export("delegate")]		public UIPrinterPickerControllerDelegate Delegate { get; set; }				/// <summary>		/// Presents the picker from a view controller of your app.		/// </summary>		/// <param name="animated">true to animate the display of the picker or false to display it without animations.</param>		/// <param name="completionHandler">A block to execute when the picker is dismissed. Use this block to receive information about the selected printer or information about any errors that occurred.</param>		/// <returns>true if the picker was displayed or false if the picker was already visible.</returns>		[iOSVersion(8)]		[Export("presentAnimated")]		public bool PresentAnimated(bool animated, UIPrinterPickerCompletionHandler completionHandler) { return false; }				/// <summary>		/// Present the picker in a popover that is anchored to the specified bar button item.		/// </summary>		/// <param name="item">The bar button item to use as the anchor for the popover.</param>		/// <param name="animated">true to animate the display of the picker or false to display it without animations.</param>		/// <param name="completionHandler">A block to execute when the picker is dismissed. Use this block to receive information about the selected printer or information about any errors that occurred.</param>		/// <returns>true if the picker was displayed or false if the picker was already visible.</returns>		[iOSVersion(8)]		[Export("presentFromBarButtonItem")]		public bool PresentFromBarButtonItem(UIBarButtonItem item, bool animated, UIPrinterPickerCompletionHandler completionHandler) { return false; }				/// <summary>		/// Present the picker in a popover that is anchored to a rectangle in the specified view.		/// </summary>		/// <param name="rect">The rectangle to which to anchor the popover. Specify the rectangle using the coordinate system of the view in the view parameter.</param>		/// <param name="inView">The view containing the specified rectangle.</param>		/// <param name="animated">true to animate the display of the picker or false to display it without animations.</param>		/// <param name="completionHandler">A block to execute when the picker is dismissed. Use this block to receive information about the selected printer or information about any errors that occurred.</param>		/// <returns>true if the picker was displayed or false if the picker was already visible.</returns>		[iOSVersion(8)]		[Export("presentFromRect")]		public bool PresentFromRect(CGRect rect, UIView inView, bool animated, UIPrinterPickerCompletionHandler completionHandler) { return false; }				/// <summary>		/// Dismiss the picker.		/// </summary>		/// <param name="animated">true to animate the dismissal of the picker or false to remove it without animations.</param>		[iOSVersion(8)]		[Export("dismissAnimated")]		public void DismissAnimated(bool animated) { }				/// <summary>		/// The selected printer. (read-only)		/// </summary>		[iOSVersion(8)]		[Export("selectedPrinter")]		public UIPrinter SelectedPrinter { get; private set; }				/// <summary>		/// The completion handler to execute when dismissing a printer picker controller.		/// </summary>		[iOSVersion(8)]		public 		//typealias UIPrinterPickerCompletionHandler = (UIPrinterPickerController!, Bool, NSError!) -> Void	}}