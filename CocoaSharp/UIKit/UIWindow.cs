using ObjectiveC;using System;using SharpSwift.Attributes;using System.Collections.Generic;using Foundation;using CoreGraphics;namespace UIKit{    /// <summary>    /// The UIWindow class defines an object known as a window that manages and coordinates the views an app displays on a device screen. Unless an app can display content on an external device screen, an app has only one window.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIWindow_Class/index.html#//apple_ref/occ/cl/UIWindow"/>    [iOSVersion(2)]    [Export("")]    public class UIWindow : UIView//, AnyObject, CVarArgType, Equatable, Hashable, NSCoding, NSObjectProtocol, Printable, Reflectable, UIAccessibilityIdentification, UIAppearance, UIAppearanceContainer, UICoordinateSpace, UIDynamicItem, UITraitEnvironment    {        public UIWindow() { }        /// <summary>        /// Makes the receiver the key window and visible.        /// </summary>        [iOSVersion(2)]        [Export("makeKeyAndVisible")]        public virtual void MakeKeyAndVisible() {  }                /// <summary>        /// Invoked automatically to inform the receiver that it has become the key window; never invoke this method directly.        /// </summary>        [iOSVersion(2)]        [Export("becomeKeyWindow")]        public virtual void BecomeKeyWindow() {  }                /// <summary>        /// Makes the receiver the main window.        /// </summary>        [iOSVersion(2)]        [Export("makeKeyWindow")]        public virtual void MakeKeyWindow() {  }                /// <summary>        /// Invoked automatically when the window resigns key window status; never invoke this method directly.        /// </summary>        [iOSVersion(2)]        [Export("resignKeyWindow")]        public virtual void ResignKeyWindow() {  }                /// <summary>        /// Converts a point from the receiver’s coordinate system to that of another window.        /// </summary>        /// <param name="point">A point specifying a location in the logical coordinate system of the receiver.</param>        /// <param name="toWindow">The window into whose coordinate system point is to be converted. If nil, this method converts the point to the logical coordinate system of the screen, which is measured in points.</param>        [iOSVersion(2)]        [Export("convertPoint")]        public virtual CGPoint ConvertPoint(CGPoint point, [Optional] UIWindow toWindow) { return default(CGPoint); }                /// <summary>        /// Converts a point from the coordinate system of a given window to that of the receiver.        /// </summary>        /// <param name="point">A point specifying a location in the coordinate system of window.</param>        /// <param name="fromWindow">The window with point in its coordinate system. If nil, this method converts the point from the logical coordinate system of the screen, which is measured in points.</param>        /// <param name="NAME_YOUR_PARAMS">DO NOT USE THIS PARAMETER - Instead make sure to name the parameters you're using.</param>        [iOSVersion(2)]        [Export("convertPoint")]        [IgnoreParameter("NAME_YOUR_PARAMS")]        public virtual CGPoint ConvertPoint(CGPoint point, [Optional] UIWindow fromWindow, bool NAME_YOUR_PARAMS = false) { return default(CGPoint); }                /// <summary>        /// Converts a rectangle from the receiver’s coordinate system to that of another window.        /// </summary>        /// <param name="rect">A rectangle in the receiver&#39;s coordinate system.</param>        /// <param name="toWindow">The window that is the target of the conversion operation. If nil, this method instead converts the rectangle to the logical coordinate system of the screen, which is measured in points.</param>        [iOSVersion(2)]        [Export("convertRect")]        public virtual CGRect ConvertRect(CGRect rect, [Optional] UIWindow toWindow) { return default(CGRect); }                /// <summary>        /// Converts a rectangle from the coordinate system of another window to that of the receiver.        /// </summary>        /// <param name="rect">The rectangle in the window&#39;s coordinate system.</param>        /// <param name="fromWindow">The window with rect in its coordinate system. If nil, this method instead converts the rectangle from the logical coordinate system of the screen, which is measured in points.</param>        /// <param name="NAME_YOUR_PARAMS">DO NOT USE THIS PARAMETER - Instead make sure to name the parameters you're using.</param>        [iOSVersion(2)]        [Export("convertRect")]        [IgnoreParameter("NAME_YOUR_PARAMS")]        public virtual CGRect ConvertRect(CGRect rect, [Optional] UIWindow fromWindow, bool NAME_YOUR_PARAMS = false) { return default(CGRect); }                /// <summary>        /// Dispatches events sent to the receiver by the UIApplication object to its views.        /// </summary>        /// <param name="event">The event to process.</param>        [iOSVersion(2)]        [Export("sendEvent")]        public virtual void SendEvent(UIEvent @event) {  }                /// <summary>        /// The receiver’s window level.        /// </summary>        [iOSVersion(2)]        [Export("windowLevel")]        public UIWindowLevel WindowLevel { get; set; }                /// <summary>        /// The screen on which the window is currently displayed.        /// </summary>        [iOSVersion(3.2)]        [Export("screen")]        public UIScreen Screen { get; set; }                /// <summary>        /// The root view controller for the window.        /// </summary>        [iOSVersion(4)]        [Export("rootViewController")]        [Optional]        public UIViewController RootViewController { get; set; }                /// <summary>        /// A Boolean value that indicates whether the receiver is the key window for the application. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("keyWindow")]        public bool KeyWindow { get; private set; }    }    /// <summary>    /// The positioning of windows relative to each other.    /// </summary>    [iOSVersion(2)]    public struct UIWindowLevel    {        static public implicit operator UIWindowLevel(CGFloat value)        {            return default(UIWindowLevel);        }        static public implicit operator CGFloat(UIWindowLevel value)        {            return default(CGFloat);        }    }    /// <summary>    /// Posted when an UIWindow object becomes visible.    ///   The notification object is the window object that has become visible. This notification does not contain a userInfo dictionary.    /// </summary>    public class UIWindowDidBecomeVisibleNotification : NSNotification    {        public UIWindowDidBecomeVisibleNotification() : base("", null) { }    }    /// <summary>    /// Posted when an UIWindow object becomes hidden.    ///   The notification object is the window object that has become hidden. This notification does not contain a userInfo dictionary.    /// </summary>    public class UIWindowDidBecomeHiddenNotification : NSNotification    {        public UIWindowDidBecomeHiddenNotification() : base("", null) { }    }    /// <summary>    /// Posted whenever a UIWindow object becomes the key window.    ///   The notification object is the window object that has become key. This notification does not contain a userInfo dictionary.    /// </summary>    public class UIWindowDidBecomeKeyNotification : NSNotification    {        public UIWindowDidBecomeKeyNotification() : base("", null) { }    }    /// <summary>    /// Posted whenever a UIWindow object resigns its status as main window.    ///   The notification object is the window object that has resigned its main window status. This notification does not contain a userInfo dictionary.    /// </summary>    public class UIWindowDidResignKeyNotification : NSNotification    {        public UIWindowDidResignKeyNotification() : base("", null) { }    }    /// <summary>    /// Posted immediately prior to the display of the keyboard.    ///   The notification object is nil. The userInfo dictionary contains information about the keyboard. Use the keys described in Keyboard Notification User Info Keys to get the location and size of the keyboard from the userInfo dictionary.    ///   For more information about using the system keyboard, see Text Programming Guide for iOS.    /// </summary>    public class UIKeyboardWillShowNotification : NSNotification    {        public UIKeyboardWillShowNotification() : base("", null) { }    }    /// <summary>    /// Posted immediately after the display of the keyboard.    ///   The notification object is nil. The userInfo dictionary contains information about the keyboard. Use the keys described in Keyboard Notification User Info Keys to get the location and size of the keyboard from the userInfo dictionary.    ///   For more information about using the system keyboard, see Text Programming Guide for iOS.    /// </summary>    public class UIKeyboardDidShowNotification : NSNotification    {        public UIKeyboardDidShowNotification() : base("", null) { }    }    /// <summary>    /// Posted immediately prior to the dismissal of the keyboard.    ///   The notification object is nil. The userInfo dictionary contains information about the keyboard. Use the keys described in Keyboard Notification User Info Keys to get the location and size of the keyboard from the userInfo dictionary.    ///   For more information about using the system keyboard, see Text Programming Guide for iOS.    /// </summary>    public class UIKeyboardWillHideNotification : NSNotification    {        public UIKeyboardWillHideNotification() : base("", null) { }    }    /// <summary>    /// Posted immediately after the dismissal of the keyboard.    ///   The notification object is nil. The userInfo dictionary contains information about the keyboard. Use the keys described in Keyboard Notification User Info Keys to get the location and size of the keyboard from the userInfo dictionary.    ///   For more information about using the system keyboard, see Text Programming Guide for iOS.    /// </summary>    public class UIKeyboardDidHideNotification : NSNotification    {        public UIKeyboardDidHideNotification() : base("", null) { }    }    /// <summary>    /// Posted immediately prior to a change in the keyboard’s frame.    ///   The notification object is nil. The userInfo dictionary contains information about the keyboard. Use the keys described in Keyboard Notification User Info Keys to get the location and size of the keyboard from the userInfo dictionary.    /// </summary>    public class UIKeyboardWillChangeFrameNotification : NSNotification    {        public UIKeyboardWillChangeFrameNotification() : base("", null) { }    }    /// <summary>    /// Posted immediately after a change in the keyboard’s frame.    ///   The notification object is nil. The userInfo dictionary contains information about the keyboard. Use the keys described in Keyboard Notification User Info Keys to get the location and size of the keyboard from the userInfo dictionary.    /// </summary>    public class UIKeyboardDidChangeFrameNotification : NSNotification    {        public UIKeyboardDidChangeFrameNotification() : base("", null) { }    }}