using CoreGraphics;
using ObjectiveC;using System;using SwiftSharp.Attributes;using Foundation;namespace UIKit{	//https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIWindow_Class/index.html#//apple_ref/occ/cl/UIWindow	/// <summary>	/// The UIWindow class defines an object known as a window that manages and coordinates the views an app displays on a device screen. Unless an app can display content on an external device screen, an app has only one window.	/// </summary>	[iOSVersion(2)]	public class UIWindow : UIView	{		/// <summary>		/// The receiver’s window level.		/// </summary>		[iOSVersion(2)]		[Export("windowLevel")]		public UIWindowLevel WindowLevel { get; set; }				/// <summary>		/// The screen on which the window is currently displayed.		/// </summary>		[iOSVersion(3.2)]		[Export("screen")]		public UIScreen Screen { get; set; }				/// <summary>		/// The root view controller for the window.		/// </summary>		[iOSVersion(4)]		[Export("rootViewController")]		public UIViewController RootViewController { get; set; }				/// <summary>		/// A Boolean value that indicates whether the receiver is the key window for the application. (read-only)		/// </summary>		[iOSVersion(2)]		[Export("keyWindow")]		public bool KeyWindow { get; private set; }				/// <summary>		/// Makes the receiver the key window and visible.		/// </summary>		[iOSVersion(2)]		[Export("makeKeyAndVisible")]		public void MakeKeyAndVisible() { }				/// <summary>		/// Invoked automatically to inform the receiver that it has become the key window; never invoke this method directly.		/// </summary>		[iOSVersion(2)]		[Export("becomeKeyWindow")]		public void BecomeKeyWindow() { }				/// <summary>		/// Makes the receiver the main window.		/// </summary>		[iOSVersion(2)]		[Export("makeKeyWindow")]		public void MakeKeyWindow() { }				/// <summary>		/// Invoked automatically when the window resigns key window status; never invoke this method directly.		/// </summary>		[iOSVersion(2)]		[Export("resignKeyWindow")]		public void ResignKeyWindow() { }				/// <summary>		/// Converts a point from the receiver’s coordinate system to that of another window.		/// </summary>		/// <param name="point">A point specifying a location in the logical coordinate system of the receiver.</param>		/// <param name="toWindow">The window into whose coordinate system point is to be converted. If nil, this method converts the point to the logical coordinate system of the screen, which is measured in points.</param>		/// <returns>The point converted to the coordinate system of window.</returns>		[iOSVersion(2)]		[Export("convertPoint")]		public CGPoint ConvertPoint(CGPoint point, UIWindow toWindow) { return new CGPoint(); }				/// <summary>		/// Converts a point from the coordinate system of a given window to that of the receiver.		/// </summary>		/// <param name="point">A point specifying a location in the coordinate system of window.</param>		/// <param name="fromWindow">The window with point in its coordinate system. If nil, this method converts the point from the logical coordinate system of the screen, which is measured in points.</param>		/// <returns>The point converted to the coordinate system of the receiver.</returns>		[iOSVersion(2)]		[Export("convertPoint")]		public CGPoint ConvertPoint(CGPoint point, UIWindow fromWindow) { return new CGPoint(); }				/// <summary>		/// Converts a rectangle from the receiver’s coordinate system to that of another window.		/// </summary>		/// <param name="rect">A rectangle in the receiver's coordinate system.</param>		/// <param name="toWindow">The window that is the target of the conversion operation. If nil, this method instead converts the rectangle to the logical coordinate system of the screen, which is measured in points.</param>		/// <returns>The converted rectangle.</returns>		[iOSVersion(2)]		[Export("convertRect")]		public CGRect ConvertRect(CGRect rect, UIWindow toWindow) { return new CGRect(); }				/// <summary>		/// Converts a rectangle from the coordinate system of another window to that of the receiver.		/// </summary>		/// <param name="rect">The rectangle in the window's coordinate system.</param>		/// <param name="fromWindow">The window with rect in its coordinate system. If nil, this method instead converts the rectangle from the logical coordinate system of the screen, which is measured in points.</param>		/// <returns>The converted rectangle.</returns>		[iOSVersion(2)]		[Export("convertRect")]		public CGRect ConvertRect(CGRect rect, UIWindow fromWindow) { return new CGPoiCGRectnt(); }				/// <summary>		/// Dispatches events sent to the receiver by the UIApplication object to its views.		/// </summary>		/// <param name="event">The event to process.</param>		[iOSVersion(2)]		[Export("sendEvent")]		public void SendEvent(UIEvent @event) { }				/// <summary>		/// Keys used to get values from the user information dictionary of keyboard notifications.		/// </summary>				/// <summary>		/// The key for an NSValue object containing a CGRect that identifies the start frame of the keyboard in screen coordinates. These coordinates do not take into account any rotation factors applied to the window’s contents as a result of interface orientation changes. Thus, you may need to convert the rectangle to window coordinates (using the convertRect:fromWindow: method) or to view coordinates (using the convertRect:fromView: method) before using it.		/// </summary>		[iOSVersion(3.2)]		public string UIKeyboardFrameBeginUserInfoKey { get; private set; }				/// <summary>		/// The key for an NSValue object containing a CGRect that identifies the end frame of the keyboard in screen coordinates. These coordinates do not take into account any rotation factors applied to the window’s contents as a result of interface orientation changes. Thus, you may need to convert the rectangle to window coordinates (using the convertRect:fromWindow: method) or to view coordinates (using the convertRect:fromView: method) before using it.		/// </summary>		[iOSVersion(3.2)]		public string UIKeyboardFrameEndUserInfoKey { get; private set; }				/// <summary>		/// The key for an NSNumber object containing a UIViewAnimationCurve constant that defines how the keyboard will be animated onto or off the screen.		/// </summary>		[iOSVersion(3)]		public string UIKeyboardAnimationCurveUserInfoKey { get; private set; }				/// <summary>		/// The key for an NSNumber object containing a double that identifies the duration of the animation in seconds.		/// </summary>		[iOSVersion(3)]		public string UIKeyboardAnimationDurationUserInfoKey { get; private set; }				/// <summary>		/// The key for an NSValue object containing a CGPoint that is the center of the keyboard in window coordinates before animation. These coordinates actually take into account any rotation factors applied to the window’s contents as a result of interface orientation changes. Thus, the center point of the keyboard is different in portrait versus landscape orientations.		/// </summary>		[iOSVersion(3.2)]		public string UIKeyboardCenterBeginUserInfoKey { get; private set; }				/// <summary>		/// The key for an NSValue object containing a CGPoint that is the center of the keyboard in window coordinates after animation. These coordinates take into account any rotation factors applied to the window’s contents as a result of interface orientation changes. Thus, the center point of the keyboard is different in portrait versus landscape orientations.		/// </summary>		[iOSVersion(3.2)]		public string UIKeyboardCenterEndUserInfoKey { get; private set; }				/// <summary>		/// The key for an NSValue object containing a CGRect that identifies the bounds rectangle of the keyboard in window coordinates. This value is sufficient for obtaining the size of the keyboard. If you want to get the origin of the keyboard on the screen (before or after animation) use the values obtained from the user info dictionary through the UIKeyboardCenterBeginUserInfoKey or UIKeyboardCenterEndUserInfoKey constants.		/// </summary>		[iOSVersion(3.2)]		public string UIKeyboardBoundsUserInfoKey { get; private set; }								WHAT								WHAT								WHAT								WHAT								WHAT								WHAT								WHAT								WHAT								WHAT								WHAT	}}