using ObjectiveC;using System;using SwiftSharp.Attributes;using System.Collections.Generic;using Foundation;using CoreGraphics;namespace UIKit{    /// <summary>    /// The UIPickerView class implements objects, called picker views, that use a spinning-wheel or slot-machine metaphor to show one or more sets of values. Users select values by rotating the wheels so that the desired row of values aligns with a selection indicator.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIPickerView_Class/index.html#//apple_ref/occ/cl/UIPickerView"/>    [iOSVersion(2)]    public class UIPickerView : UIView//, AnyObject, NSCoding, NSObjectProtocol, Reflectable, UIAccessibilityIdentification, UIAppearance, UIAppearanceContainer, UICoordinateSpace, UIDynamicItem, UITableViewDataSource, UITraitEnvironment    {        public UIPickerView() : base(new CGRect()) { }        /// <summary>        /// Returns the number of rows for a component.        /// </summary>        /// <param name="component">A zero-indexed number identifying a component.</param>        [iOSVersion(2)]        [Export("numberOfRowsInComponent")]        public int NumberOfRowsInComponent(int component) { return default(int); }                /// <summary>        /// Returns the size of a row for a component.        /// </summary>        /// <param name="component">A zero-indexed number identifying a component.</param>        [iOSVersion(2)]        [Export("rowSizeForComponent")]        public CGSize RowSizeForComponent(int component) { return default(CGSize); }                /// <summary>        /// Reloads all components of the picker view.        /// </summary>        [iOSVersion(2)]        [Export("reloadAllComponents")]        public void ReloadAllComponents() {  }                /// <summary>        /// Reloads a particular component of the picker view.        /// </summary>        /// <param name="component">A zero-indexed number identifying a component of the picker view.</param>        [iOSVersion(2)]        [Export("reloadComponent")]        public void ReloadComponent(int component) {  }                /// <summary>        /// Selects a row in a specified component of the picker view.        /// </summary>        /// <param name="row">A zero-indexed number identifying a row of component.</param>        /// <param name="inComponent">A zero-indexed number identifying a component of the picker view.</param>        /// <param name="animated">true to animate the selection by spinning the wheel (component) to the new value; if you specify false, the new selection is shown immediately.</param>        [iOSVersion(2)]        [Export("selectRow")]        public void SelectRow(int row, int inComponent, bool animated) {  }                /// <summary>        /// Returns the index of the selected row in a given component.        /// </summary>        /// <param name="component">A zero-indexed number identifying a component of the picker view.</param>        [iOSVersion(2)]        [Export("selectedRowInComponent")]        public int SelectedRowInComponent(int component) { return default(int); }                /// <summary>        /// Returns the view used by the picker view for a given row and component.        /// </summary>        /// <param name="row">The zero-indexed number of a row of the picker view.</param>        /// <param name="forComponent">The zero-indexed number of a component of the picker view.</param>        [iOSVersion(2)]        [Export("viewForRow")]        public UIView ViewForRow(int row, int forComponent) { return default(UIView); }                /// <summary>        /// Gets the number of components for the picker view. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("numberOfComponents")]        public int NumberOfComponents { get; private set; }                /// <summary>        /// The delegate for the picker view.        /// </summary>        [iOSVersion(2)]        [Export("delegate")]        public UIPickerViewDelegate Delegate { get; set; }                /// <summary>        /// The data source for the picker view.        /// </summary>        [iOSVersion(2)]        [Export("dataSource")]        public UIPickerViewDataSource DataSource { get; set; }                /// <summary>        /// A Boolean value that determines whether the selection indicator is displayed.        /// </summary>        [iOSVersion(2)]        [Export("showsSelectionIndicator")]        public bool ShowsSelectionIndicator { get; set; }    }}