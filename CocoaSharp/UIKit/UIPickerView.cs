using ObjectiveC;using System;using SwiftSharp.Attributes;using Foundation;namespace UIKit{	//https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIPickerView_Class/index.html#//apple_ref/occ/cl/UIPickerView	/// <summary>	/// The UIPickerView class implements objects, called picker views, that use a spinning-wheel or slot-machine metaphor to show one or more sets of values. Users select values by rotating the wheels so that the desired row of values aligns with a selection indicator.	/// </summary>	[iOSVersion(2)]	public class UIPickerView : UIView	{		/// <summary>		/// Gets the number of components for the picker view. (read-only)		/// </summary>		[iOSVersion(2)]		[Export("numberOfComponents")]		public int NumberOfComponents { get; private set; }				/// <summary>		/// Returns the number of rows for a component.		/// </summary>		/// <param name="component">A zero-indexed number identifying a component.</param>		/// <returns>The number of rows in the given component.</returns>		[iOSVersion(2)]		[Export("numberOfRowsInComponent")]		public int NumberOfRowsInComponent(int component) { return 0; }				/// <summary>		/// Returns the size of a row for a component.		/// </summary>		/// <param name="component">A zero-indexed number identifying a component.</param>		/// <returns>The size of rows in the given component. This is generally the size required to display the largest string or view used as a row in the component.</returns>		[iOSVersion(2)]		[Export("rowSizeForComponent")]		public CGSize RowSizeForComponent(int component) { return null; }				/// <summary>		/// Reloads all components of the picker view.		/// </summary>		[iOSVersion(2)]		[Export("reloadAllComponents")]		public void ReloadAllComponents() { }				/// <summary>		/// Reloads a particular component of the picker view.		/// </summary>		/// <param name="component">A zero-indexed number identifying a component of the picker view.</param>		[iOSVersion(2)]		[Export("reloadComponent")]		public void ReloadComponent(int component) { }				/// <summary>		/// Selects a row in a specified component of the picker view.		/// </summary>		/// <param name="row">A zero-indexed number identifying a row of component.</param>		/// <param name="inComponent">A zero-indexed number identifying a component of the picker view.</param>		/// <param name="animated">true to animate the selection by spinning the wheel (component) to the new value; if you specify false, the new selection is shown immediately.</param>		[iOSVersion(2)]		[Export("selectRow")]		public void SelectRow(int row, int inComponent, bool animated) { }				/// <summary>		/// Returns the index of the selected row in a given component.		/// </summary>		/// <param name="component">A zero-indexed number identifying a component of the picker view.</param>		/// <returns>A zero-indexed number identifying the selected row, or -1 if no row is selected.</returns>		[iOSVersion(2)]		[Export("selectedRowInComponent")]		public int SelectedRowInComponent(int component) { return 0; }				/// <summary>		/// Returns the view used by the picker view for a given row and component.		/// </summary>		/// <param name="row">The zero-indexed number of a row of the picker view.</param>		/// <param name="forComponent">The zero-indexed number of a component of the picker view.</param>		/// <returns>The view provided by the delegate in the pickerView:viewForRow:forComponent:reusingView: method. Returns nil if the specified row of the component is not visible or if the delegate does not implement pickerView:viewForRow:forComponent:reusingView:.</returns>		[iOSVersion(2)]		[Export("viewForRow")]		public UIView ViewForRow(int row, int forComponent) { return null; }				/// <summary>		/// The delegate for the picker view.		/// </summary>		[iOSVersion(2)]		[Export("delegate")]		public UIPickerViewDelegate Delegate { get; set; }				/// <summary>		/// The data source for the picker view.		/// </summary>		[iOSVersion(2)]		[Export("dataSource")]		public UIPickerViewDataSource DataSource { get; set; }				/// <summary>		/// A Boolean value that determines whether the selection indicator is displayed.		/// </summary>		[iOSVersion(2)]		[Export("showsSelectionIndicator")]		public bool ShowsSelectionIndicator { get; set; }	}}