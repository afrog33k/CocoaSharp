using ObjectiveC;using System;using SharpSwift.Attributes;using System.Collections.Generic;using Foundation;using CoreGraphics;namespace UIKit{    /// <summary>    /// The UIBezierPath class lets you define a path consisting of straight and curved line segments and render that path in your custom views. You use this class initially to specify just the geometry for your path. Paths can define simple shapes such as rectangles, ovals, and arcs or they can define complex polygons that incorporate a mixture of straight and curved line segments. After defining the shape, you can use additional methods of this class to render the path in the current drawing context.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIBezierPath_class/index.html#//apple_ref/occ/cl/UIBezierPath"/>    [iOSVersion(3.2)]    [Export("")]    public class UIBezierPath : NSObject//, AnyObject, CVarArgType, Equatable, Hashable, NSCoding, NSCopying, NSObjectProtocol, Printable    {        public UIBezierPath() { }        /// <summary>        /// Creates and returns a new UIBezierPath object initialized with a rectangular path.        /// </summary>        /// <param name="rect">The rectangle describing the path to create.</param>        [iOSVersion(3.2)]        public UIBezierPath(CGRect rect) { }                /// <summary>        /// Creates and returns a new UIBezierPath object initialized with an oval path inscribed in the specified rectangle        /// </summary>        /// <param name="ovalInRect">The rectangle in which to inscribe an oval.</param>        /// <param name="NAME_YOUR_PARAMS">DO NOT USE THIS PARAMETER - Instead make sure to name the parameters you're using.</param>        [iOSVersion(3.2)]        [IgnoreParameter("NAME_YOUR_PARAMS")]        public UIBezierPath(CGRect ovalInRect, bool NAME_YOUR_PARAMS = false) { }                /// <summary>        /// Creates and returns a new UIBezierPath object initialized with a rounded rectangular path.        /// </summary>        /// <param name="roundedRect">The rectangle that defines the basic shape of the path</param>        /// <param name="cornerRadius">The radius of each corner oval. A value of 0 results in a rectangle without rounded corners. Values larger than half the rectangle’s width or height are clamped appropriately to half the width or height.</param>        [iOSVersion(3.2)]        public UIBezierPath(CGRect roundedRect, CGFloat cornerRadius) { }                /// <summary>        /// Creates and returns a new UIBezierPath object initialized with a rounded rectangular path.        /// </summary>        /// <param name="roundedRect">The rectangle that defines the basic shape of the path.</param>        /// <param name="byRoundingCorners">A bitmask value that identifies the corners that you want rounded. You can use this parameter to round only a subset of the corners of the rectangle.</param>        /// <param name="cornerRadii">The radius of each corner oval. Values larger than half the rectangle’s width or height are clamped appropriately to half the width or height.</param>        [iOSVersion(3.2)]        public UIBezierPath(CGRect roundedRect, UIRectCorner byRoundingCorners, CGSize cornerRadii) { }                /// <summary>        /// Creates and returns a new UIBezierPath object initialized with an arc of a circle.        /// </summary>        /// <param name="arcCenter">Specifies the center point of the circle (in the current coordinate system) used to define the arc.</param>        /// <param name="radius">Specifies the radius of the circle used to define the arc.</param>        /// <param name="startAngle">Specifies the starting angle of the arc (measured in radians).</param>        /// <param name="endAngle">Specifies the end angle of the arc (measured in radians).</param>        /// <param name="clockwise">The direction in which to draw the arc.</param>        [iOSVersion(3.2)]        public UIBezierPath(CGPoint arcCenter, CGFloat radius, CGFloat startAngle, CGFloat endAngle, bool clockwise) { }                /// <summary>        /// Creates and returns a new UIBezierPath object initialized with the contents of a Core Graphics path.        /// </summary>        /// <param name="CGPath">The Core Graphics path from which to obtain the initial path information. If this parameter is nil, the method raises an exception.</param>        [iOSVersion(3.2)]        public UIBezierPath([Unwrapped] CGPath CGPath) { }                /// <summary>        /// Creates and returns a new bezier path object with the reversed contents of the current path.        /// </summary>        [iOSVersion(6)]        [Export("bezierPathByReversingPath")]        public virtual UIBezierPath BezierPathByReversingPath() { return default(UIBezierPath); }                /// <summary>        /// Moves the receiver’s current point to the specified location.        /// </summary>        /// <param name="point">A point in the current coordinate system.</param>        [iOSVersion(3.2)]        [Export("moveToPoint")]        public virtual void MoveToPoint(CGPoint point) {  }                /// <summary>        /// Appends a straight line to the receiver’s path.        /// </summary>        /// <param name="point">The destination point of the line segment, specified in the current coordinate system.</param>        [iOSVersion(3.2)]        [Export("addLineToPoint")]        public virtual void AddLineToPoint(CGPoint point) {  }                /// <summary>        /// Appends an arc to the receiver’s path.        /// </summary>        /// <param name="center">Specifies the center point of the circle (in the current coordinate system) used to define the arc.</param>        /// <param name="radius">Specifies the radius of the circle used to define the arc.</param>        /// <param name="startAngle">Specifies the starting angle of the arc (measured in radians).</param>        /// <param name="endAngle">Specifies the end angle of the arc (measured in radians).</param>        /// <param name="clockwise">The direction in which to draw the arc.</param>        [iOSVersion(4)]        [Export("addArcWithCenter")]        public virtual void AddArcWithCenter(CGPoint center, CGFloat radius, CGFloat startAngle, CGFloat endAngle, bool clockwise) {  }                /// <summary>        /// Appends a cubic Bézier curve to the receiver’s path.        /// </summary>        /// <param name="endPoint">The end point of the curve.</param>        /// <param name="controlPoint1">The first control point to use when computing the curve.</param>        /// <param name="controlPoint2">The second control point to use when computing the curve.</param>        [iOSVersion(3.2)]        [Export("addCurveToPoint")]        public virtual void AddCurveToPoint(CGPoint endPoint, CGPoint controlPoint1, CGPoint controlPoint2) {  }                /// <summary>        /// Appends a quadratic Bézier curve to the receiver’s path.        /// </summary>        /// <param name="endPoint">The end point of the curve.</param>        /// <param name="controlPoint">The control point of the curve.</param>        [iOSVersion(3.2)]        [Export("addQuadCurveToPoint")]        public virtual void AddQuadCurveToPoint(CGPoint endPoint, CGPoint controlPoint) {  }                /// <summary>        /// Closes the most recently added subpath.        /// </summary>        [iOSVersion(3.2)]        [Export("closePath")]        public virtual void ClosePath() {  }                /// <summary>        /// Removes all points from the receiver, effectively deleting all subpaths.        /// </summary>        [iOSVersion(3.2)]        [Export("removeAllPoints")]        public virtual void RemoveAllPoints() {  }                /// <summary>        /// Appends the contents of the specified path object to the receiver’s path.        /// </summary>        /// <param name="bezierPath">The path to add to the receiver.</param>        [iOSVersion(3.2)]        [Export("appendPath")]        public virtual void AppendPath(UIBezierPath bezierPath) {  }                /// <summary>        /// Sets the line-stroking pattern for the path.        /// </summary>        /// <param name="pattern">A C-style array of floating point values that contains the lengths (measured in points) of the line segments and gaps in the pattern. The values in the array alternate, starting with the first line segment length, followed by the first gap length, followed by the second line segment length, and so on.</param>        /// <param name="count">The number of values in pattern.</param>        /// <param name="phase">The offset at which to start drawing the pattern, measured in points along the dashed-line pattern. For example, a phase value of 6 for the pattern 5-2-3-2 would cause drawing to begin in the middle of the first gap.</param>        [iOSVersion(3.2)]        [Export("setLineDash")]        public virtual void SetLineDash(UnsafePointer<CGFloat> pattern, int count, CGFloat phase) {  }                /// <summary>        /// Retrieves the line-stroking pattern for the path.        /// </summary>        /// <param name="pattern">On input, a C-style array of floating point values, or nil if you do not want the pattern values. On output, this array contains the lengths (measured in points) of the line segments and gaps in the pattern. The values in the array alternate, starting with the first line segment length, followed by the first gap length, followed by the second line segment length, and so on.</param>        /// <param name="count">On input, a pointer to an integer or nil if you do not want the number of pattern entries. On output, the number of entries written to pattern.</param>        /// <param name="phase">On input, a pointer to a floating point value or nil if you do not want the phase. On output, this value contains the offset at which to start drawing the pattern, measured in points along the dashed-line pattern. For example, a phase of 6 in the pattern 5-2-3-2 would cause drawing to begin in the middle of the first gap.</param>        [iOSVersion(3.2)]        [Export("getLineDash")]        public virtual void GetLineDash(UnsafeMutablePointer<CGFloat> pattern, UnsafeMutablePointer<int> count, UnsafeMutablePointer<CGFloat> phase) {  }                /// <summary>        /// Paints the region enclosed by the receiver’s path using the current drawing properties.        /// </summary>        [iOSVersion(3.2)]        [Export("fill")]        public virtual void Fill() {  }                /// <summary>        /// Paints the region enclosed by the receiver’s path using the specified blend mode and transparency values.        /// </summary>        /// <param name="blendMode">The blend mode determines how the filled path is composited with any existing rendered content.</param>        /// <param name="alpha">The amount of transparency to apply to the filled path. Values can range between 0.0 (transparent) and 1.0 (opaque). Values outside this range are clamped to 0.0 or 1.0.</param>        [iOSVersion(3.2)]        [Export("fillWithBlendMode")]        public virtual void FillWithBlendMode(CGBlendMode blendMode, CGFloat alpha) {  }                /// <summary>        /// Draws a line along the receiver’s path using the current drawing properties.        /// </summary>        [iOSVersion(3.2)]        [Export("stroke")]        public virtual void Stroke() {  }                /// <summary>        /// Draws a line along the receiver’s path using the specified blend mode and transparency values.        /// </summary>        /// <param name="blendMode">The blend mode determines how the stroked path is composited with any existing rendered content.</param>        /// <param name="alpha">The amount of transparency to apply to the stroked path. Values can range between 0.0 (transparent) and 1.0 (opaque). Values outside this range are clamped to 0.0 or 1.0.</param>        [iOSVersion(3.2)]        [Export("strokeWithBlendMode")]        public virtual void StrokeWithBlendMode(CGBlendMode blendMode, CGFloat alpha) {  }                /// <summary>        /// Intersects the area enclosed by the receiver’s path with the clipping path of the current graphics context and makes the resulting shape the current clipping path.        /// </summary>        [iOSVersion(3.2)]        [Export("addClip")]        public virtual void AddClip() {  }                /// <summary>        /// Returns a Boolean value indicating whether the area enclosed by the receiver contains the specified point.        /// </summary>        /// <param name="point">The point to test against the path, specified in the path object&#39;s coordinate system.</param>        [iOSVersion(3.2)]        [Export("containsPoint")]        public virtual bool ContainsPoint(CGPoint point) { return default(bool); }                /// <summary>        /// Transforms all points in the path using the specified affine transform matrix.        /// </summary>        /// <param name="transform">The transform matrix to apply to the path.</param>        [iOSVersion(3.2)]        [Export("applyTransform")]        public virtual void ApplyTransform(CGAffineTransform transform) {  }                /// <summary>        /// The Core Graphics representation of the path.        /// </summary>        [iOSVersion(3.2)]        public CGPath CGPath { get; set; }                /// <summary>        /// The current point in the graphics path. (read-only)        /// </summary>        [iOSVersion(3.2)]        [Export("currentPoint")]        public CGPoint CurrentPoint { get; private set; }                /// <summary>        /// The line width of the path.        /// </summary>        [iOSVersion(3.2)]        [Export("lineWidth")]        public CGFloat LineWidth { get; set; }                /// <summary>        /// The shape of the paths end points when stroked.        /// </summary>        [iOSVersion(3.2)]        [Export("lineCapStyle")]        public CGLineCap LineCapStyle { get; set; }                /// <summary>        /// The shape of the joints between connected segments of a stroked path.        /// </summary>        [iOSVersion(3.2)]        [Export("lineJoinStyle")]        public CGLineJoin LineJoinStyle { get; set; }                /// <summary>        /// The limiting value that helps avoid spikes at junctions between connected line segments.        /// </summary>        [iOSVersion(3.2)]        [Export("miterLimit")]        public CGFloat MiterLimit { get; set; }                /// <summary>        /// The factor that determines the rendering accuracy for curved path segments.        /// </summary>        [iOSVersion(3.2)]        [Export("flatness")]        public CGFloat Flatness { get; set; }                /// <summary>        /// A Boolean indicating whether the even-odd winding rule is in use for drawing paths.        /// </summary>        [iOSVersion(3.2)]        [Export("usesEvenOddFillRule")]        public bool UsesEvenOddFillRule { get; set; }                /// <summary>        /// A Boolean value indicating whether the path has any valid elements. (read-only)        /// </summary>        [iOSVersion(3.2)]        [Export("empty")]        public bool Empty { get; private set; }                /// <summary>        /// The bounding rectangle of the path. (read-only)        /// </summary>        [iOSVersion(3.2)]        [Export("bounds")]        public CGRect Bounds { get; private set; }    }    /// <summary>    /// The corners of a rectangle.    /// </summary>    public enum UIRectCorner    {        /// <summary>        /// The top-left corner of the rectangle.        /// </summary>        [iOSVersion(3.2)]        TopLeft,        /// <summary>        /// The top-right corner of the rectangle.        /// </summary>        [iOSVersion(3.2)]        TopRight,        /// <summary>        /// The bottom-left corner of the rectangle.        /// </summary>        [iOSVersion(3.2)]        BottomLeft,        /// <summary>        /// The bottom-right corner of the rectangle.        /// </summary>        [iOSVersion(3.2)]        BottomRight,        /// <summary>        /// All corners of the rectangle.        /// </summary>        [iOSVersion(3.2)]        AllCorners,    }}