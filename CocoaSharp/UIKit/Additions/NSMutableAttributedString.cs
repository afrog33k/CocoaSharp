using ObjectiveC;using System;using SharpSwift.Attributes;using System.Collections.Generic;using Foundation;using CoreGraphics;namespace UIKit{    /// <summary>    /// The UIKit framework adds methods to NSMutableAttributedString to support replacing the string with contents of an external document and fixing attribute inconsistencies within a character range.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/NSMutableAttributedString_UIKit_Additions/index.html#//apple_ref/doc/uid/TP40013287"/>    [iOSVersion(3.2)]    [Export("")]    public partial class NSMutableAttributedString : NSAttributedString//, AnyObject, CVarArgType, Equatable, Hashable, NSCoding, NSCopying, NSMutableCopying, NSObjectProtocol, NSSecureCoding, Printable    {        public NSMutableAttributedString() { }        /// <summary>        /// Cleans up font, paragraph style, and attachment attributes within the given range.        /// </summary>        /// <param name="range">The character range within which to fix attributes. Raises an NSRangeException if any part of range lies beyond the end of the receiverâ€™s characters.</param>        [iOSVersion(7)]        [Export("fixAttributesInRange")]        public virtual void FixAttributesInRange(NSRange range) {  }                /// <summary>        /// Sets the contents of the receiver from the stream of the given data object.        /// </summary>        /// <param name="data">The data object providing text data.</param>        /// <param name="options">Keys specifying the types of documents and other document import options. See Option_keys_for_importing_documents for a list of keys.</param>        /// <param name="documentAttributes">On return, the dictionary (if provided) contains keys representing various document-wide attributes. See Keys_for_Options_and_Document_Attributes_Dictionaries for a list of keys.</param>        /// <param name="error">Upon return, if an error occurs, contains an NSError object that describes the problem. If you are not interested in possible errors, pass in NULL.</param>        [iOSVersion(7)]        [Export("readFromData")]        public virtual bool ReadFromData(NSData data, Dictionary<NSObject, AnyObject> options, AutoreleasingUnsafeMutablePointer<NSDictionary> documentAttributes, NSErrorPointer error) { return default(bool); }                /// <summary>        /// Sets the contents of the receiver from the file at the given URL.        /// </summary>        /// <param name="url">The location of the file providing text data.</param>        /// <param name="options">Keys specifying the types of documents and other document import options. See Option_keys_for_importing_documents for a list of keys.</param>        /// <param name="documentAttributes">On return, the dictionary (if provided) contains keys representing various document-wide attributes. See Keys_for_Options_and_Document_Attributes_Dictionaries for a list of keys.</param>        /// <param name="error">Upon return, if an error occurs, contains an NSError object that describes the problem. If you are not interested in possible errors, pass in NULL.</param>        [iOSVersion(7)]        [Export("readFromFileURL")]        public virtual bool ReadFromFileURL([Unwrapped] NSURL url, Dictionary<NSObject, AnyObject> options, AutoreleasingUnsafeMutablePointer<NSDictionary> documentAttributes, NSErrorPointer error) { return default(bool); }    }}