using ObjectiveC;using System;using SharpSwift.Attributes;using System.Collections.Generic;using Foundation;using CoreGraphics;namespace UIKit{    /// <summary>    /// The UIKit framework adds methods to NSString to support the drawing of strings and to compute the bounding box of a string prior to drawing. None of these methods affects the contents of the string object itself, only how it is drawn on screen.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/NSString_UIKit_Additions/index.html#//apple_ref/doc/uid/TP40006893"/>    [iOSVersion(2)]    [Export("")]    public class NSString//:    {        public NSString() { }        /// <summary>        /// Draws the receiver with the font and other display characteristics of the given attributes, at the specified point in the current graphics context.        /// </summary>        /// <param name="point">The point in the current graphics context where you want to start drawing the string. The coordinate system of the graphics context is usually defined by the view in which you are drawing.</param>        /// <param name="withAttributes">A dictionary of text attributes to be applied to the string. These are the same attributes that can be applied to an NSAttributedString object, but in the case of NSString objects, the attributes apply to the entire string, rather than ranges within the string.</param>        [iOSVersion(7)]        [Export("drawAtPoint")]        public virtual void DrawAtPoint(CGPoint point, Dictionary<NSObject, AnyObject> withAttributes) {  }                /// <summary>        /// Calculates and returns the bounding rect for the receiver drawn using the given options and display characteristics, within the specified rectangle in the current graphics context.        /// </summary>        /// <param name="size">The size of the rectangle to draw in.</param>        /// <param name="options">String drawing options.</param>        /// <param name="attributes">A dictionary of text attributes to be applied to the string. These are the same attributes that can be applied to an NSAttributedString object, but in the case of NSString objects, the attributes apply to the entire string, rather than ranges within the string.</param>        /// <param name="context">The string drawing context to use for the receiver, specifying minimum scale factor and tracking adjustments.</param>        [iOSVersion(7)]        [Export("boundingRectWithSize")]        public virtual CGRect BoundingRectWithSize(CGSize size, NSStringDrawingOptions options, Dictionary<NSObject, AnyObject> attributes, [Unwrapped] NSStringDrawingContext context) { return default(CGRect); }                /// <summary>        /// Draws the attributed string inside the specified bounding rectangle in the current graphics context.        /// </summary>        /// <param name="rect">The bounding rectangle in which to draw the string.</param>        /// <param name="withAttributes">The text attributes with which to draw the string. These are the same attributes that can be applied to an NSAttributedString object, but in the case of NSString objects, the attributes apply to the entire string, rather than ranges within the string.</param>        [iOSVersion(7)]        [Export("drawInRect")]        public virtual void DrawInRect(CGRect rect, Dictionary<NSObject, AnyObject> withAttributes) {  }                /// <summary>        /// Draws the attributed string in the specified bounding rectangle using the provided options.        /// </summary>        /// <param name="rect">The bounding rectangle in which to draw the string.</param>        /// <param name="options">Additional drawing options to apply to the string during rendering. For a list of possible values, see NSStringDrawingOptions.</param>        /// <param name="attributes">The text attributes with which to draw the string. These are the same attributes that can be applied to an NSAttributedString object, but in the case of NSString objects, the attributes apply to the entire string, rather than ranges within the string.</param>        /// <param name="context">A context object with information about how to adjust the font tracking and scaling information. On return, the specified object contains information about the actual values used to render the string. This parameter may be nil.</param>        [iOSVersion(7)]        [Export("drawWithRect")]        public virtual void DrawWithRect(CGRect rect, NSStringDrawingOptions options, Dictionary<NSObject, AnyObject> attributes, [Unwrapped] NSStringDrawingContext context) {  }                /// <summary>        /// Returns the bounding box size the receiver occupies when drawn with the given attributes.        /// </summary>        /// <param name="attrs">A dictionary of text attributes to be applied to the string. These are the same attributes that can be applied to an NSAttributedString object, but in the case of NSString objects, the attributes apply to the entire string, rather than ranges within the string.</param>        [iOSVersion(7)]        [Export("sizeWithAttributes")]        public virtual CGSize SizeWithAttributes(Dictionary<NSObject, AnyObject> attrs) { return default(CGSize); }    }    /// <summary>    /// Options for aligning text horizontally.    /// </summary>    public enum NSTextAlignment    {        /// <summary>        /// Align text along the left edge.        /// </summary>        [iOSVersion(6)]        Left,        /// <summary>        /// Align text equally along both sides of the center line.        /// </summary>        [iOSVersion(6)]        Center,        /// <summary>        /// Align text along the right edge.        /// </summary>        [iOSVersion(6)]        Right,        /// <summary>        /// Fully justify the text so that the last line in a paragraph is natural aligned.        /// </summary>        [iOSVersion(6)]        Justified,        /// <summary>        /// Use the default alignment associated with the current script.        /// </summary>        [iOSVersion(6)]        Natural,    }    /// <summary>    /// Vertical adjustment options.    /// </summary>    public enum UIBaselineAdjustment    {        /// <summary>        /// Adjust text relative to the position of its baseline.        /// </summary>        [iOSVersion(2)]        AlignBaselines,        /// <summary>        /// Adjust text based relative to the center of its bounding box.        /// </summary>        [iOSVersion(2)]        AlignCenters,        /// <summary>        /// Adjust text relative to the top-left corner of the bounding box. This is the default adjustment.        /// </summary>        [iOSVersion(2)]        None,    }    /// <summary>    /// Constants for specifying the writing direction to use.    /// </summary>    public enum NSWritingDirection    {        /// <summary>        /// Use the Unicode Bidi algorithm rules P2 and P3 to determine which direction to use.        /// </summary>        [iOSVersion(6)]        Natural,        /// <summary>        /// Use a left to right writing direction.        /// </summary>        [iOSVersion(6)]        LeftToRight,        /// <summary>        /// Use a right to left writing direction.        /// </summary>        [iOSVersion(6)]        RightToLeft,    }}