using ObjectiveC;using System;using SwiftSharp.Attributes;using Foundation;namespace UIKit{    //https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/NSString_UIKit_Additions/index.html#//apple_ref/doc/uid/TP40006893    /// <summary>    /// The UIKit framework adds methods to NSString to support the drawing of strings and to compute the bounding box of a string prior to drawing. None of these methods affects the contents of the string object itself, only how it is drawn on screen.    /// </summary>    [iOSVersion(2)]    [Export("NSString")]    public class NSStringAdditions    {        //TODO: is there anything else that goes here?        /// <summary>        /// Keys for dictionaries that contain text attributes.        /// </summary>                /// <summary>        /// Key to the font in a text attributes dictionary.        /// </summary>        [iOSVersion(7)]        public string UITextAttributeFont { get; private set; }                /// <summary>        /// Key to the text color in a text attributes dictionary.        /// </summary>        [iOSVersion(7)]        public string UITextAttributeTextColor { get; private set; }                /// <summary>        /// Key to the text shadow color in a text attributes dictionary.        /// </summary>        [iOSVersion(7)]        public string UITextAttributeTextShadowColor { get; private set; }                /// <summary>        /// Key to the offset used for the text shadow in a text attributes dictionary.        /// </summary>        [iOSVersion(7)]        public string UITextAttributeTextShadowOffset { get; private set; }    }            /// <summary>    /// Options for aligning text horizontally.    /// </summary>    public enum NSTextAlignment    {        /// <summary>        /// Align text along the left edge.        /// </summary>        [iOSVersion(6)]        Left,                    /// <summary>        /// Align text equally along both sides of the center line.        /// </summary>        [iOSVersion(6)]        Center,                    /// <summary>        /// Align text along the right edge.        /// </summary>        [iOSVersion(6)]        Right,                    /// <summary>        /// Fully justify the text so that the last line in a paragraph is natural aligned.        /// </summary>        [iOSVersion(6)]        Justified,                    /// <summary>        /// Use the default alignment associated with the current script.        /// </summary>        [iOSVersion(6)]        Natural,    }            /// <summary>    /// Vertical adjustment options.    /// </summary>    public enum UIBaselineAdjustment    {        /// <summary>        /// Adjust text relative to the position of its baseline.        /// </summary>        [iOSVersion(2)]        AlignBaselines,                    /// <summary>        /// Adjust text based relative to the center of its bounding box.        /// </summary>        [iOSVersion(2)]        AlignCenters,                    /// <summary>        /// Adjust text relative to the top-left corner of the bounding box. This is the default adjustment.        /// </summary>        [iOSVersion(2)]        None,    }    /// <summary>    /// Constants for specifying the writing direction to use.    /// </summary>    public enum NSWritingDirection    {        /// <summary>        /// Use the Unicode Bidi algorithm rules P2 and P3 to determine which direction to use.        /// </summary>        [iOSVersion(6)]        Natural,                    /// <summary>        /// Use a left to right writing direction.        /// </summary>        [iOSVersion(6)]        LeftToRight,                    /// <summary>        /// Use a right to left writing direction.        /// </summary>        [iOSVersion(6)]        RightToLeft,    }}