using ObjectiveC;using System;using SharpSwift.Attributes;using System.Collections.Generic;using Foundation;using CoreGraphics;namespace UIKit{    /// <summary>    /// The UIKit framework adds methods to NSAttributedString to support the drawing of styled strings and to compute the size and metrics of a string prior to drawing. None of these methods affects the contents of the object itself, only how it is drawn on screen.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/NSAttributedString_UIKit_Additions/index.html#//apple_ref/doc/uid/TP40011688"/>    [iOSVersion(6)]    public class NSAttributedString//:    {        public NSAttributedString() { }    }    /// <summary>    /// Options for customizing the way strings are drawn.    /// </summary>    [iOSVersion(6)]    public enum NSStringDrawingOptions    {        /// <summary>        /// Truncate and add an ellipsis character to the last visible line if the text does not fit into the specified bounds. This option is ignored if the NSStringDrawingUsesLineFragmentOrigin option is not also specified.        /// </summary>        [iOSVersion(6)]        TruncatesLastVisibleLine,        /// <summary>        /// The origin specified when drawing the string is the line fragment origin and not the baseline origin.        /// </summary>        [iOSVersion(6)]        UsesLineFragmentOrigin,        /// <summary>        /// Use the font leading information to calculate line heights.        /// </summary>        [iOSVersion(6)]        UsesFontLeading,        /// <summary>        /// Use the image glyph bounds (instead of the typographic bounds) when computing layout.        /// </summary>        [iOSVersion(6)]        UsesDeviceMetrics,    }    /// <summary>    /// Constants for specifying both the NSUnderlineStyleAttributeName and NSStrikethroughStyleAttributeName attributes of an attributed string.    /// </summary>    [iOSVersion(7)]    public enum NSUnderlineStyle    {        /// <summary>        /// Do not draw a line.        /// </summary>        [iOSVersion(6)]        StyleNone,        /// <summary>        /// Draw a single line.        /// </summary>        [iOSVersion(6)]        StyleSingle,        /// <summary>        /// Draw a thick line.        /// </summary>        [iOSVersion(7)]        StyleThick,        /// <summary>        /// Draw a double line.        /// </summary>        [iOSVersion(7)]        StyleDouble,        /// <summary>        /// Draw a line of dots.        /// </summary>        [iOSVersion(7)]        PatternDot,        /// <summary>        /// Draw a line of dashes.        /// </summary>        [iOSVersion(7)]        PatternDash,        /// <summary>        /// Draw a line of alternating dashes and dots.        /// </summary>        [iOSVersion(7)]        PatternDashDot,        /// <summary>        /// Draw a line of alternating dashes and two dots.        /// </summary>        [iOSVersion(7)]        PatternDashDotDot,        /// <summary>        /// Draw the line only underneath or through words, not whitespace.        /// </summary>        [iOSVersion(7)]        ByWord,    }    /// <summary>    /// Options for specifying text writing direction used with NSWritingDirectionAttributeName.    /// </summary>    [iOSVersion(7)]    public enum NSTextWritingDirection    {        /// <summary>        /// Text is embedded in text with another writing direction. For example, an English quotation in the middle of an Arabic sentence could be marked as being embedded left-to-right text.        /// </summary>        [iOSVersion(7)]        Embedding,        /// <summary>        /// Enables character types with inherent directionality to be overridden when required for special cases, such as for part numbers made of mixed English, digits, and Hebrew letters to be written from right to left.        /// </summary>        [iOSVersion(7)]        Override,    }}