using ObjectiveC;using System;using SharpSwift.Attributes;using System.Collections.Generic;using Foundation;using CoreGraphics;namespace UIKit{    /// <summary>    /// You use instances of the UITextChecker class to check a string (usually the text of a document) for misspelled words.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UITextChecker_Class/index.html#//apple_ref/occ/cl/UITextChecker"/>    [iOSVersion(3.2)]    public class UITextChecker : NSObject//, AnyObject, NSObjectProtocol    {        public UITextChecker() { }        /// <summary>        /// Initiates a search of a range of a string for a misspelled word.        /// </summary>        /// <param name="stringToCheck">The string to check for misspelled words.</param>        /// <param name="range">The range of stringToCheck to check for a misspelled word.</param>        /// <param name="startingAt">The offset within range of stringToCheck to begin checking for misspelled words.</param>        /// <param name="wrap">true to continue checking from the beginning of range if no misspelled word is found between startingOffset and the end of range. Specify false to have spell-checking end at the end of range.</param>        /// <param name="language">The language of the of words to be checked for correct spelling. This string is a ISO 639-1 language code or a combined ISO 639-1 language code and ISO 3166-1 regional code (for example, fr_FR).</param>        [iOSVersion(3.2)]        [Export("rangeOfMisspelledWordInString")]        public virtual NSRange RangeOfMisspelledWordInString(string stringToCheck, NSRange range, int startingAt, bool wrap, string language) { return default(NSRange); }                /// <summary>        /// Returns a list of words that are possible valid replacements for a misspelled word.        /// </summary>        /// <param name="range">The range of a misspelled word in string.</param>        /// <param name="inString">A string in which there is a misspelled word, as located by range.</param>        /// <param name="language">The language of the of the words that are possible corrections. This string is from the ISO 639-1 standard, for example es (Spanish).</param>        [iOSVersion(3.2)]        [Export("guessesForWordRange")]        public virtual AnyObject[] GuessesForWordRange(NSRange range, string inString, string language) { return default(AnyObject[]); }                /// <summary>        /// Returns an array of strings that are possible completions for a partially entered word.        /// </summary>        /// <param name="range">The range of a partially entered word in string.</param>        /// <param name="inString">A string in which there is a partially entered word, as located by range.</param>        /// <param name="language">The language of the of the words that are possible corrections. This string is a ISO 639-1 language code or a combined ISO 639-1 language code and ISO 3166-1 regional code (for example, fr_CA).</param>        [iOSVersion(3.2)]        [Export("completionsForPartialWordRange")]        public virtual AnyObject[] CompletionsForPartialWordRange(NSRange range, string inString, string language) { return default(AnyObject[]); }                /// <summary>        /// Tells the receiver to ignore the specified word when spell-checking.        /// </summary>        /// <param name="wordToIgnore">A string that is a word the receiver should ignore when it is spell-checking a document.</param>        [iOSVersion(3.2)]        [Export("ignoreWord")]        public virtual void IgnoreWord(string wordToIgnore) {  }                /// <summary>        /// Returns the words that the receiver ignores when spell-checking.        /// </summary>        [iOSVersion(3.2)]        [Export("ignoredWords")]        public virtual AnyObject[] IgnoredWords() { return default(AnyObject[]); }                /// <summary>        /// Sets the list of words that the receiver should ignore when it is spell-checking a document.        /// </summary>        /// <param name="words">An array of strings, each of which specifies a word the receiver should ignore when it is spell-checking a document.</param>        [iOSVersion(3.2)]        [Export("setIgnoredWords")]        public virtual void SetIgnoredWords(AnyObject[] words) {  }                /// <summary>        /// Tells the text checker to learn the specified word so that it is not evaluated as misspelled.        /// </summary>        /// <param name="word">A string representing the word for the class to learn.</param>        [iOSVersion(3.2)]        [Export("learnWord")]        public virtual static void LearnWord(string word) {  }                /// <summary>        /// Tells the text checker to unlearn the specified word        /// </summary>        /// <param name="word">A string representing the word for the class to unlearn.</param>        [iOSVersion(3.2)]        [Export("unlearnWord")]        public virtual static void UnlearnWord(string word) {  }                /// <summary>        /// Returns whether the text checker has learned the specified word.        /// </summary>        /// <param name="word">A string representing a word.</param>        [iOSVersion(3.2)]        [Export("hasLearnedWord")]        public virtual static bool HasLearnedWord(string word) { return default(bool); }                /// <summary>        /// Returns the languages for which the text checkerâ€™s class can perform spell-checking.        /// </summary>        [iOSVersion(3.2)]        [Export("availableLanguages")]        public virtual static AnyObject[] AvailableLanguages() { return default(AnyObject[]); }    }}