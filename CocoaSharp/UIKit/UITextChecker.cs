using ObjectiveC;using System;using SwiftSharp.Attributes;using Foundation;namespace UIKit{	//https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UITextChecker_Class/index.html#//apple_ref/occ/cl/UITextChecker	/// <summary>	/// You use instances of the UITextChecker class to check a string (usually the text of a document) for misspelled words.	/// </summary>	[iOSVersion(3.2)]	public class UITextChecker : NSObject	{		/// <summary>		/// Initiates a search of a range of a string for a misspelled word.		/// </summary>		/// <param name="stringToCheck">The string to check for misspelled words.</param>		/// <param name="range">The range of stringToCheck to check for a misspelled word.</param>		/// <param name="startingAt">The offset within range of stringToCheck to begin checking for misspelled words.</param>		/// <param name="wrap">true to continue checking from the beginning of range if no misspelled word is found between startingOffset and the end of range. Specify false to have spell-checking end at the end of range.</param>		/// <param name="language">The language of the of words to be checked for correct spelling. This string is a ISO 639-1 language code or a combined ISO 639-1 language code and ISO 3166-1 regional code (for example, fr_FR).</param>		/// <returns>The range of the first misspelled word encountered or {NSNotFound, 0} if none is found.</returns>		[iOSVersion(3.2)]		[Export("rangeOfMisspelledWordInString")]		public NSRange RangeOfMisspelledWordInString(string stringToCheck, NSRange range, int startingAt, bool wrap, string language) { return new NSRange(); }				/// <summary>		/// Returns a list of words that are possible valid replacements for a misspelled word.		/// </summary>		/// <param name="range">The range of a misspelled word in string.</param>		/// <param name="inString">A string in which there is a misspelled word, as located by range.</param>		/// <param name="language">The language of the of the words that are possible corrections. This string is from the ISO 639-1 standard, for example es (Spanish).</param>		/// <returns>An array of strings each of which might be a correct substitute (that is, a guess) for a misspelled word in the given range of the string. If no possible guesses are found, the method returns an empty array.</returns>		[iOSVersion(3.2)]		[Export("guessesForWordRange")]		public AnyObject[] GuessesForWordRange(NSRange range, string inString, string language) { return null; }				/// <summary>		/// Returns an array of strings that are possible completions for a partially entered word.		/// </summary>		/// <param name="range">The range of a partially entered word in string.</param>		/// <param name="inString">A string in which there is a partially entered word, as located by range.</param>		/// <param name="language">The language of the of the words that are possible corrections. This string is a ISO 639-1 language code or a combined ISO 639-1 language code and ISO 3166-1 regional code (for example, fr_CA).</param>		/// <returns>An array of strings, each of which is a completion of a partially entered word represented by range in string. If no possible completions are found, the method returns an empty array.</returns>		[iOSVersion(3.2)]		[Export("completionsForPartialWordRange")]		public AnyObject[] CompletionsForPartialWordRange(NSRange range, string inString, string language) { return null; }				/// <summary>		/// Tells the receiver to ignore the specified word when spell-checking.		/// </summary>		/// <param name="wordToIgnore">A string that is a word the receiver should ignore when it is spell-checking a document.</param>		[iOSVersion(3.2)]		[Export("ignoreWord")]		public void IgnoreWord(string wordToIgnore) { }				/// <summary>		/// Returns the words that the receiver ignores when spell-checking.		/// </summary>		/// <returns>An array of strings, each of which specifies a word the receiver ignores when it is spell-checking a document.</returns>		[iOSVersion(3.2)]		[Export("ignoredWords")]		public AnyObject[] IgnoredWords() { return null; }				/// <summary>		/// Sets the list of words that the receiver should ignore when it is spell-checking a document.		/// </summary>		/// <param name="words">An array of strings, each of which specifies a word the receiver should ignore when it is spell-checking a document.</param>		[iOSVersion(3.2)]		[Export("setIgnoredWords")]		public void SetIgnoredWords(AnyObject[] words) { }				/// <summary>		/// Tells the text checker to learn the specified word so that it is not evaluated as misspelled.		/// </summary>		/// <param name="word">A string representing the word for the class to learn.</param>		[iOSVersion(3.2)]		[Export("learnWord")]		public static void LearnWord(string word) { }				/// <summary>		/// Tells the text checker to unlearn the specified word		/// </summary>		/// <param name="word">A string representing the word for the class to unlearn.</param>		[iOSVersion(3.2)]		[Export("unlearnWord")]		public static void UnlearnWord(string word) { }				/// <summary>		/// Returns whether the text checker has learned the specified word.		/// </summary>		/// <param name="word">A string representing a word.</param>		/// <returns>true if the class has learned the word, otherwise false.</returns>		[iOSVersion(3.2)]		[Export("hasLearnedWord")]		public static bool HasLearnedWord(string word) { return false; }				/// <summary>		/// Returns the languages for which the text checkerâ€™s class can perform spell-checking.		/// </summary>		/// <returns>An array of strings representing ISO 639-1 language codes or combined ISO 639-1 language codes and ISO 3166-1 regional codes (for example, en_US).</returns>		[iOSVersion(3.2)]		[Export("availableLanguages")]		public static AnyObject[] AvailableLanguages() { return null; }	}}