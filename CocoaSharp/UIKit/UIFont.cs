using ObjectiveC;using System;using SwiftSharp.Attributes;using Foundation;namespace UIKit{	//https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIFont_Class/index.html#//apple_ref/occ/cl/UIFont	/// <summary>	/// The UIFont class provides the interface for getting and setting font information. The class provides you with access to the font’s characteristics and also provides the system with access to the font’s glyph information, which is used during layout. You use font objects by passing them to methods that accept them as a parameter.	/// </summary>	[iOSVersion(2)]	public class UIFont : NSObject	{		/// <summary>		/// Returns an instance of the font associated with the text style and scaled appropriately for the user's selected content size category.		/// </summary>		/// <param name="style">The text style for which to return a font. See &quot;Text Styles” in UIFontDescriptor Class Reference for recognized values.</param>		/// <returns>The font associated with the specified text style.</returns>		[iOSVersion(7)]		[Export("preferredFontForTextStyle")]		public static UIFont PreferredFontForTextStyle(string style) { return null; }				/// <summary>		/// Creates and returns a font object for the specified font name and size.		/// </summary>		/// <param name="name">The fully specified name of the font. This name incorporates both the font family name and the specific style information for the font.</param>		/// <param name="size">The size (in points) to which the font is scaled. This value must be greater than 0.0.</param>		/// <returns>A font object of the specified name and size.</returns>		[iOSVersion(2)]		public UIFont Init(string name, CGFloat size) { }				/// <summary>		/// Returns a font object that is the same as the receiver but which has the specified size instead.		/// </summary>		/// <param name="fontSize">The desired size (in points) of the new font object. This value must be greater than 0.0.</param>		/// <returns>A font object of the specified size.</returns>		[iOSVersion(2)]		[Export("fontWithSize")]		public UIFont FontWithSize(CGFloat fontSize) { return null; }				/// <summary>		/// Returns the font object used for standard interface items in the specified size.		/// </summary>		/// <param name="fontSize">The size (in points) to which the font is scaled. This value must be greater than 0.0.</param>		/// <returns>A font object of the specified size.</returns>		[iOSVersion(2)]		[Export("systemFontOfSize")]		public static UIFont SystemFontOfSize(CGFloat fontSize) { return null; }				/// <summary>		/// Returns the font object used for standard interface items that are rendered in boldface type in the specified size.		/// </summary>		/// <param name="fontSize">The size (in points) to which the font is scaled. This value must be greater than 0.0.</param>		/// <returns>A font object of the specified size.</returns>		[iOSVersion(2)]		[Export("boldSystemFontOfSize")]		public static UIFont BoldSystemFontOfSize(CGFloat fontSize) { return null; }				/// <summary>		/// Returns the font object used for standard interface items that are rendered in italic type in the specified size.		/// </summary>		/// <param name="fontSize">The size (in points) to which the font is scaled. This value must be greater than 0.0.</param>		/// <returns>A font object of the specified size.</returns>		[iOSVersion(2)]		[Export("italicSystemFontOfSize")]		public static UIFont ItalicSystemFontOfSize(CGFloat fontSize) { return null; }				/// <summary>		/// Returns an array of font family names available on the system.		/// </summary>		/// <returns>An array of NSString objects, each of which contains the name of a font family.</returns>		[iOSVersion(2)]		[Export("familyNames")]		public static AnyObject[] FamilyNames() { return null; }				/// <summary>		/// Returns an array of font names available in a particular font family.		/// </summary>		/// <param name="familyName">The name of the font family. Use the familyNames method to get an array of the available font family names on the system.</param>		/// <returns>An array of NSString objects, each of which contains a font name associated with the specified family.</returns>		[iOSVersion(2)]		[Export("fontNamesForFamilyName")]		public static AnyObject[] FontNamesForFamilyName(string familyName) { return null; }				/// <summary>		/// The font family name. (read-only)		/// </summary>		[iOSVersion(2)]		[Export("familyName")]		public string FamilyName { get; private set; }				/// <summary>		/// The font face name. (read-only)		/// </summary>		[iOSVersion(2)]		[Export("fontName")]		public string FontName { get; private set; }				/// <summary>		/// The receiver’s point size, or the effective vertical point size for a font with a nonstandard matrix. (read-only)		/// </summary>		[iOSVersion(2)]		[Export("pointSize")]		public CGFloat PointSize { get; private set; }				/// <summary>		/// The top y-coordinate, offset from the baseline, of the receiver’s longest ascender. (read-only)		/// </summary>		[iOSVersion(2)]		[Export("ascender")]		public CGFloat Ascender { get; private set; }				/// <summary>		/// The bottom y-coordinate, offset from the baseline, of the receiver’s longest descender. (read-only)		/// </summary>		[iOSVersion(2)]		[Export("descender")]		public CGFloat Descender { get; private set; }				/// <summary>		/// The receiver’s leading information. (read-only)						   Use the lineHeight property instead.		/// </summary>		[iOSVersion(2)]		[Export("leading")]		public CGFloat Leading { get; private set; }				/// <summary>		/// The receiver’s cap height information. (read-only)		/// </summary>		[iOSVersion(2)]		[Export("capHeight")]		public CGFloat CapHeight { get; private set; }				/// <summary>		/// The x-height of the receiver. (read-only)		/// </summary>		[iOSVersion(2)]		[Export("xHeight")]		public CGFloat XHeight { get; private set; }				/// <summary>		/// The height of text lines (measured in points). (read-only)		/// </summary>		[iOSVersion(4)]		[Export("lineHeight")]		public CGFloat LineHeight { get; private set; }				/// <summary>		/// Returns the standard font size used for labels.		/// </summary>		/// <returns>The standard label font size in points.</returns>		[iOSVersion(2)]		[Export("labelFontSize")]		public static CGFloat LabelFontSize() { return null; }				/// <summary>		/// Returns the standard font size used for buttons.		/// </summary>		/// <returns>The standard button font size in points.</returns>		[iOSVersion(2)]		[Export("buttonFontSize")]		public static CGFloat ButtonFontSize() { return null; }				/// <summary>		/// Returns the size of the standard small system font.		/// </summary>		/// <returns>The standard small system font size in points.</returns>		[iOSVersion(2)]		[Export("smallSystemFontSize")]		public static CGFloat SmallSystemFontSize() { return null; }				/// <summary>		/// Returns the size of the standard system font.		/// </summary>		/// <returns>The standard system font size in points.</returns>		[iOSVersion(2)]		[Export("systemFontSize")]		public static CGFloat SystemFontSize() { return null; }				/// <summary>		/// Returns a font descriptor that describes the font.		/// </summary>		/// <returns>A font descriptor that describes the font.</returns>		[iOSVersion(7)]		[Export("fontDescriptor")]		public UIFontDescriptor FontDescriptor() { return null; }				/// <summary>		/// Returns a font matching the given font descriptor.		/// </summary>		/// <param name="descriptor">The font descriptor to match.</param>		/// <param name="size">The size in points to which the font is scaled. If greater than 0.0, it has precedence over UIFontDescriptorSizeAttribute in descriptor.</param>		/// <returns>A font object for the specified descriptor and size.</returns>		[iOSVersion(7)]		public UIFont Init(UIFontDescriptor descriptor, CGFloat size) { }	}}