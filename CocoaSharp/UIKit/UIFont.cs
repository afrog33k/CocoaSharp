using ObjectiveC;using System;using SharpSwift.Attributes;using System.Collections.Generic;using Foundation;using CoreGraphics;namespace UIKit{    /// <summary>    /// The UIFont class provides the interface for getting and setting font information. The class provides you with access to the font’s characteristics and also provides the system with access to the font’s glyph information, which is used during layout. You use font objects by passing them to methods that accept them as a parameter.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIFont_Class/index.html#//apple_ref/occ/cl/UIFont"/>    [iOSVersion(2)]    public class UIFont : NSObject//, AnyObject, NSCopying, NSObjectProtocol    {        public UIFont() { }        /// <summary>        /// Returns an instance of the font associated with the text style and scaled appropriately for the user's selected content size category.        /// </summary>        /// <param name="style">The text style for which to return a font. See &quot;Text Styles” in UIFontDescriptor Class Reference for recognized values.</param>        [iOSVersion(7)]        [Export("preferredFontForTextStyle")]        public virtual static UIFont PreferredFontForTextStyle(string style) { return default(UIFont); }                /// <summary>        /// Creates and returns a font object for the specified font name and size.        /// </summary>        /// <param name="name">The fully specified name of the font. This name incorporates both the font family name and the specific style information for the font.</param>        /// <param name="size">The size (in points) to which the font is scaled. This value must be greater than 0.0.</param>        [iOSVersion(2)]        public UIFont(string name, CGFloat size) { }                /// <summary>        /// Returns a font object that is the same as the receiver but which has the specified size instead.        /// </summary>        /// <param name="fontSize">The desired size (in points) of the new font object. This value must be greater than 0.0.</param>        [iOSVersion(2)]        [Export("fontWithSize")]        public virtual UIFont FontWithSize(CGFloat fontSize) { return default(UIFont); }                /// <summary>        /// Returns the font object used for standard interface items in the specified size.        /// </summary>        /// <param name="fontSize">The size (in points) to which the font is scaled. This value must be greater than 0.0.</param>        [iOSVersion(2)]        [Export("systemFontOfSize")]        public virtual static UIFont SystemFontOfSize(CGFloat fontSize) { return default(UIFont); }                /// <summary>        /// Returns the font object used for standard interface items that are rendered in boldface type in the specified size.        /// </summary>        /// <param name="fontSize">The size (in points) to which the font is scaled. This value must be greater than 0.0.</param>        [iOSVersion(2)]        [Export("boldSystemFontOfSize")]        public virtual static UIFont BoldSystemFontOfSize(CGFloat fontSize) { return default(UIFont); }                /// <summary>        /// Returns the font object used for standard interface items that are rendered in italic type in the specified size.        /// </summary>        /// <param name="fontSize">The size (in points) to which the font is scaled. This value must be greater than 0.0.</param>        [iOSVersion(2)]        [Export("italicSystemFontOfSize")]        public virtual static UIFont ItalicSystemFontOfSize(CGFloat fontSize) { return default(UIFont); }                /// <summary>        /// Returns an array of font family names available on the system.        /// </summary>        [iOSVersion(2)]        [Export("familyNames")]        public virtual static AnyObject[] FamilyNames() { return default(AnyObject[]); }                /// <summary>        /// Returns an array of font names available in a particular font family.        /// </summary>        /// <param name="familyName">The name of the font family. Use the familyNames method to get an array of the available font family names on the system.</param>        [iOSVersion(2)]        [Export("fontNamesForFamilyName")]        public virtual static AnyObject[] FontNamesForFamilyName(string familyName) { return default(AnyObject[]); }                /// <summary>        /// Returns the standard font size used for labels.        /// </summary>        [iOSVersion(2)]        [Export("labelFontSize")]        public virtual static CGFloat LabelFontSize() { return default(CGFloat); }                /// <summary>        /// Returns the standard font size used for buttons.        /// </summary>        [iOSVersion(2)]        [Export("buttonFontSize")]        public virtual static CGFloat ButtonFontSize() { return default(CGFloat); }                /// <summary>        /// Returns the size of the standard small system font.        /// </summary>        [iOSVersion(2)]        [Export("smallSystemFontSize")]        public virtual static CGFloat SmallSystemFontSize() { return default(CGFloat); }                /// <summary>        /// Returns the size of the standard system font.        /// </summary>        [iOSVersion(2)]        [Export("systemFontSize")]        public virtual static CGFloat SystemFontSize() { return default(CGFloat); }                /// <summary>        /// Returns a font descriptor that describes the font.        /// </summary>        [iOSVersion(7)]        [Export("fontDescriptor")]        public virtual UIFontDescriptor FontDescriptor() { return default(UIFontDescriptor); }                /// <summary>        /// Returns a font matching the given font descriptor.        /// </summary>        /// <param name="descriptor">The font descriptor to match.</param>        /// <param name="size">The size in points to which the font is scaled. If greater than 0.0, it has precedence over UIFontDescriptorSizeAttribute in descriptor.</param>        [iOSVersion(7)]        public UIFont(UIFontDescriptor descriptor, CGFloat size) { }                /// <summary>        /// The font family name. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("familyName")]        public string FamilyName { get; private set; }                /// <summary>        /// The font face name. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("fontName")]        public string FontName { get; private set; }                /// <summary>        /// The receiver’s point size, or the effective vertical point size for a font with a nonstandard matrix. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("pointSize")]        public CGFloat PointSize { get; private set; }                /// <summary>        /// The top y-coordinate, offset from the baseline, of the receiver’s longest ascender. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("ascender")]        public CGFloat Ascender { get; private set; }                /// <summary>        /// The bottom y-coordinate, offset from the baseline, of the receiver’s longest descender. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("descender")]        public CGFloat Descender { get; private set; }                /// <summary>        /// The receiver’s leading information. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("leading")]        public CGFloat Leading { get; private set; }                /// <summary>        /// The receiver’s cap height information. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("capHeight")]        public CGFloat CapHeight { get; private set; }                /// <summary>        /// The x-height of the receiver. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("xHeight")]        public CGFloat XHeight { get; private set; }                /// <summary>        /// The height of text lines (measured in points). (read-only)        /// </summary>        [iOSVersion(4)]        [Export("lineHeight")]        public CGFloat LineHeight { get; private set; }    }}