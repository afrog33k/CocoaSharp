using CoreGraphics;
using ObjectiveC;using System;using SwiftSharp.Attributes;using Foundation;namespace UIKit{    //https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIFontDescriptor_Class/index.html#//apple_ref/occ/cl/UIFontDescriptor    /// <summary>    /// UIFontDescriptor objects provide a mechanism to describe a font with a dictionary of attributes. This font descriptor can be used later to create or modify a UIFont object. Font descriptors can be archived and unarchived. Font descriptors have a font matching capability, so that you can partially describe a font by creating a font descriptor with, for example, just a family name. You can then find all the available fonts on the system with a matching family name using matchingFontDescriptorsWithMandatoryKeys:.    /// </summary>    [iOSVersion(7)]    public class UIFontDescriptor : NSObject    {        /// <summary>        /// Returns a font descriptor containing the given text style and the user's selected content size category.        /// </summary>        /// <param name="style">The text style for which to return a font descriptor. See Text Styles for valid values.</param>        /// <returns>The new font descriptor.</returns>        [iOSVersion(7)]        [Export("preferredFontDescriptorWithTextStyle")]        public static UIFontDescriptor PreferredFontDescriptorWithTextStyle(string style) { return null; }                /// <summary>        /// Returns a font descriptor with the UIFontDescriptorNameAttribute and UIFontDescriptorMatrixAttribute dictionary attributes set to the given values.        /// </summary>        /// <param name="name">The value for UIFontDescriptorNameAttribute.</param>        /// <param name="matrix">The value for UIFontDescriptorMatrixAttribute.</param>        /// <returns>The new font descriptor.</returns>        [iOSVersion(7)]        public UIFontDescriptor Init(string name, CGAffineTransform matrix) { return new UIFontDescriptor(null); }                /// <summary>        /// Returns a font descriptor with the UIFontDescriptorNameAttribute and UIFontDescriptorSizeAttribute dictionary attributes set to the given values.        /// </summary>        /// <param name="name">The value for UIFontDescriptorNameAttribute.</param>        /// <param name="size">The value for UIFontDescriptorSizeAttribute.</param>        /// <returns>The new font descriptor.</returns>        [iOSVersion(7)]
        public UIFontDescriptor Init(string name, CGFloat size) { return new UIFontDescriptor(null); }                /// <summary>        /// Returns a new font descriptor that is the same as the receiver but with the specified attributes taking precedence over the existing ones.        /// </summary>        /// <param name="attributes">The new attributes.</param>        /// <returns>The new font descriptor.</returns>        [iOSVersion(7)]        [Export("fontDescriptorByAddingAttributes")]        public UIFontDescriptor FontDescriptorByAddingAttributes(NSDictionary attributes) { return null; }                /// <summary>        /// Returns a new font descriptor that is the same as the receiver but with the specified face.        /// </summary>        /// <param name="newFace">The new font face.</param>        /// <returns>The new font descriptor.</returns>        [iOSVersion(7)]        [Export("fontDescriptorWithFace")]        public UIFontDescriptor FontDescriptorWithFace(string newFace) { return null; }                /// <summary>        /// Returns a new font descriptor whose attributes are the same as the receiver but from the specified family.        /// </summary>        /// <param name="newFamily">The new font family.</param>        /// <returns>The new font descriptor.</returns>        [iOSVersion(7)]        [Export("fontDescriptorWithFamily")]        public UIFontDescriptor FontDescriptorWithFamily(string newFamily) { return null; }                /// <summary>        /// Returns a new font descriptor that is the same as the receiver but with the specified matrix.        /// </summary>        /// <param name="matrix">The new font matrix.</param>        /// <returns>The new font descriptor.</returns>        [iOSVersion(7)]        [Export("fontDescriptorWithMatrix")]        public UIFontDescriptor FontDescriptorWithMatrix(CGAffineTransform matrix) { return null; }                /// <summary>        /// Returns a new font descriptor that is the same as the receiver but with the specified point size.        /// </summary>        /// <param name="newPointSize">The new point size.</param>        /// <returns>The new font descriptor.</returns>        [iOSVersion(7)]        [Export("fontDescriptorWithSize")]        public UIFontDescriptor FontDescriptorWithSize(CGFloat newPointSize) { return null; }                /// <summary>        /// Returns a new font descriptor that is the same as the receiver but with the specified symbolic traits taking precedence over the existing ones.        /// </summary>        /// <param name="symbolicTraits">The new symbolic traits.</param>        /// <returns>The new font descriptor.</returns>        [iOSVersion(7)]        [Export("fontDescriptorWithSymbolicTraits")]        public UIFontDescriptor FontDescriptorWithSymbolicTraits(UIFontDescriptorSymbolicTraits symbolicTraits) { return null; }                /// <summary>        /// Initializes and returns a new font descriptor with the specified attributes.        /// </summary>        /// <param name="fontAttributes">The attributes for the new font descriptor. If nil, the font descriptor’s attribute dictionary will be empty.</param>        /// <returns>The new font descriptor.</returns>        [iOSVersion(7)]        public UIFontDescriptor(NSDictionary fontAttributes) { }                /// <summary>        /// Returns all the fonts available on the system whose specified attributes match those of the receiver.        /// </summary>        /// <param name="mandatoryKeys">Keys that must be identical to be matched. Can be nil.</param>        /// <returns>The matching font descriptors. If the attribute value specified does not exist in the input dictionary or if there is no font that matches the given mandatory key values, an empty array is returned.</returns>        [iOSVersion(7)]        [Export("matchingFontDescriptorsWithMandatoryKeys")]        public AnyObject[] MatchingFontDescriptorsWithMandatoryKeys(NSSet mandatoryKeys) { return null; }                /// <summary>        /// Returns the receiver’s dictionary of attributes.        /// </summary>        /// <returns>The attribute dictionary.</returns>        [iOSVersion(7)]        [Export("fontAttributes")]        public NSDictionary FontAttributes() { return null; }                /// <summary>        /// The current transform matrix of the receiver. (read-only)        /// </summary>        [iOSVersion(7)]        [Export("matrix")]        public CGAffineTransform Matrix { get; private set; }                /// <summary>        /// Returns the font attribute specified by the given key.        /// </summary>        /// <param name="anAttribute">The font attribute key.</param>        /// <returns>The font attribute corresponding to anAttribute. For valid values of anAttribute, see Font Attributes.</returns>        [iOSVersion(7)]        [Export("objectForKey")]        public AnyObject ObjectForKey(string anAttribute) { return null; }                /// <summary>        /// The point size of the receiver. (read-only)        /// </summary>        [iOSVersion(7)]        [Export("pointSize")]        public CGFloat PointSize { get; private set; }                /// <summary>        /// The PostScript name of the receiver. (read-only)        /// </summary>        [iOSVersion(7)]        [Export("postscriptName")]        public string PostscriptName { get; private set; }                /// <summary>        /// A bit mask that describes the traits of the receiver. (read-only)        /// </summary>        [iOSVersion(7)]        [Export("symbolicTraits")]        public UIFontDescriptorSymbolicTraits SymbolicTraits { get; private set; }                /// <summary>        /// These constants provide semantic descriptions of the intended use for a font returned by the UIFont class method preferredFontForTextStyle: or a font descriptor returned by preferredFontDescriptorWithTextStyle:.        /// </summary>                /// <summary>        /// The font used for headings.        /// </summary>        [iOSVersion(7)]        public string UIFontTextStyleHeadline { get; private set; }                /// <summary>        /// The font used for subheadings.        /// </summary>        [iOSVersion(7)]        public string UIFontTextStyleSubheadline { get; private set; }                /// <summary>        /// The font used for body text.        /// </summary>        [iOSVersion(7)]        public string UIFontTextStyleBody { get; private set; }                /// <summary>        /// The font used in footnotes.        /// </summary>        [iOSVersion(7)]        public string UIFontTextStyleFootnote { get; private set; }                /// <summary>        /// The font used for standard captions.        /// </summary>        [iOSVersion(7)]        public string UIFontTextStyleCaption1 { get; private set; }                /// <summary>        /// The font used for alternate captions.        /// </summary>        [iOSVersion(7)]        public string UIFontTextStyleCaption2 { get; private set; }        /// <summary>        /// These font attributes are defined by UIFontDescriptor.        /// </summary>                /// <summary>        /// An optional NSString object that specifies the font family.        /// </summary>        [iOSVersion(7)]        public string UIFontDescriptorFamilyAttribute { get; private set; }                /// <summary>        /// An optional NSString object that specifies the font name.        /// </summary>        [iOSVersion(7)]        public string UIFontDescriptorNameAttribute { get; private set; }                /// <summary>        /// An optional NSString object that specifies the font face.        /// </summary>        [iOSVersion(7)]        public string UIFontDescriptorFaceAttribute { get; private set; }                /// <summary>        /// An optional NSNumber object, containing a float value, that specifies the font size.        /// </summary>        [iOSVersion(7)]        public string UIFontDescriptorSizeAttribute { get; private set; }                /// <summary>        /// An optional NSString object that specifies the font’s visible name.        /// </summary>        [iOSVersion(7)]        public string UIFontDescriptorVisibleNameAttribute { get; private set; }                /// <summary>        /// A CGAffineTransform instance that specifies the font’s transformation matrix. The default value is the identity matrix.        /// </summary>        [iOSVersion(7)]        public string UIFontDescriptorMatrixAttribute { get; private set; }                /// <summary>        /// An NSCharacterSet instance that represents the set of Unicode characters covered by the font. The default value is supplied by the font.        /// </summary>        [iOSVersion(7)]        public string UIFontDescriptorCharacterSetAttribute { get; private set; }                /// <summary>        /// An NSArray instance—each member of the array is a sub-descriptor. The default value is the system default cascading list for user's locale.        /// </summary>        [iOSVersion(7)]        public string UIFontDescriptorCascadeListAttribute { get; private set; }                /// <summary>        /// An NSDictionary instance instance fully describing font traits. The default value is supplied by the font. See Font Traits Dictionary Keys for dictionary keys.        /// </summary>        [iOSVersion(7)]        public string UIFontDescriptorTraitsAttribute { get; private set; }                /// <summary>        /// An NSNumber instance containing a float value that overrides the glyph advancement specified by the font. The default value is 0.0.        /// </summary>        [iOSVersion(7)]        public string UIFontDescriptorFixedAdvanceAttribute { get; private set; }                /// <summary>        /// An array of dictionaries representing non-default font feature settings. Each dictionary contains UIFontFeatureTypeIdentifierKey and UIFontFeatureSelectorIdentifierKey.        /// </summary>        [iOSVersion(7)]        public string UIFontDescriptorFeatureSettingsAttribute { get; private set; }                /// <summary>        /// An NSString instance containing the desired text style.        /// </summary>        [iOSVersion(7)]        public string UIFontDescriptorTextStyleAttribute { get; private set; }                /// <summary>        /// The following constants can be used as keys to retrieve information about a font descriptor from its trait dictionary.        /// </summary>                /// <summary>        /// Used with a trait dictionary to get the symbolic traits value as an NSNumber object.        /// </summary>        [iOSVersion(7)]        public string UIFontSymbolicTrait { get; private set; }                /// <summary>        /// The normalized weight value as an NSNumber object. The valid value range is from -1.0 to 1.0. The value of 0.0 corresponds to the regular or medium font weight.        /// </summary>        [iOSVersion(7)]        public string UIFontWeightTrait { get; private set; }                /// <summary>        /// The relative inter-glyph spacing value as an NSNumber object. The valid value range is from -1.0 to 1.0. The value of 0.0 corresponds to the regular glyph spacing.        /// </summary>        [iOSVersion(7)]        public string UIFontWidthTrait { get; private set; }                /// <summary>        /// The relative slant angle value as an NSNumber object. The valid value range is from -1.0 to 1.0. The value of 0.0 corresponds to 0 degree clockwise rotation from the vertical and 1.0 corresponds to 30 degrees clockwise rotation.        /// </summary>        [iOSVersion(7)]        public string UIFontSlantTrait { get; private set; }                /// <summary>        /// The following constants can be used as keys to retrieve information about a font descriptor from its feature dictionary.        /// </summary>                /// <summary>        /// An NSNumber object specifying a font feature type such as ligature, character shape, and so on.        /// </summary>        [iOSVersion(7)]        public string UIFontFeatureTypeIdentifierKey { get; private set; }                /// <summary>        /// An NSNumber object specifying a font feature selector such as common ligature off, traditional character shape, and so on.        /// </summary>        [iOSVersion(7)]        public string UIFontFeatureSelectorIdentifierKey { get; private set; }    }            /// <summary>    /// UIFontDescriptorSymbolicTraits symbolically describes stylistic aspects of a font. The lower 16 bits represent the typeface, and the upper 16 bits describe appearance of the font.    /// </summary>    public enum UIFontDescriptorSymbolicTraits    {        /// <summary>        /// The font’s typestyle is italic.        /// </summary>        [iOSVersion(7)]        TraitItalic,                    /// <summary>        /// The font’s typestyle is boldface.        /// </summary>        [iOSVersion(7)]        TraitBold,                    /// <summary>        /// The font’s typestyle is expanded. Expanded and condensed traits are mutually exclusive.        /// </summary>        [iOSVersion(7)]        TraitExpanded,                    /// <summary>        /// The font’s typestyle is condensed. Expanded and condensed traits are mutually exclusive.        /// </summary>        [iOSVersion(7)]        TraitCondensed,                    /// <summary>        /// The font uses fixed-pitch glyphs if available. The font may have multiple glyph advances (many CJK glyphs contain two spaces).        /// </summary>        [iOSVersion(7)]        TraitMonoSpace,                    /// <summary>        /// The font uses vertical glyph variants and metrics.        /// </summary>        [iOSVersion(7)]        TraitVertical,                    /// <summary>        /// The font synthesizes appropriate attributes for user interface rendering, such as control titles, if necessary.        /// </summary>        [iOSVersion(7)]        TraitUIOptimized,                    /// <summary>        /// The font uses tighter leading values.        /// </summary>        [iOSVersion(7)]        TraitTightLeading,                    /// <summary>        /// The font uses looser leading values.        /// </summary>        [iOSVersion(7)]        TraitLooseLeading,                    /// <summary>        /// The font family class mask used to access UIFontDescriptorClass values.        /// </summary>        [iOSVersion(7)]        ClassMask,                    /// <summary>        /// The font has no design classification.        /// </summary>        [iOSVersion(7)]        ClassUnknown,                    /// <summary>        /// The font’s style is based on the Latin printing style of the 15th to 17th century.        /// </summary>        [iOSVersion(7)]        ClassOldStyleSerifs,                    /// <summary>        /// The font’s style is based on the Latin printing style of the 18th to 19th century.        /// </summary>        [iOSVersion(7)]        ClassTransitionalSerifs,                    /// <summary>        /// The font’s style is based on the Latin printing style of the 20th century.        /// </summary>        [iOSVersion(7)]        ClassModernSerifs,                    /// <summary>        /// The font’s style is a variation of the Oldstyle Serifs and the Transitional Serifs.        /// </summary>        [iOSVersion(7)]        ClassClarendonSerifs,                    /// <summary>        /// The font’s style is characterized by serifs with a square transition between the strokes and the serifs (no brackets).        /// </summary>        [iOSVersion(7)]        ClassSlabSerifs,                    /// <summary>        /// The font’s style includes serifs, but it expresses a design freedom that does not generally fit within the other serif design classifications.        /// </summary>        [iOSVersion(7)]        ClassFreeformSerifs,                    /// <summary>        /// The font’s style includes most basic letter forms (excluding Scripts and Ornamentals) that do not have serifs on the strokes.        /// </summary>        [iOSVersion(7)]        ClassSansSerif,                    /// <summary>        /// The font’s style includes highly decorated or stylized character shapes such as those typically used in headlines.        /// </summary>        [iOSVersion(7)]        ClassOrnamentals,                    /// <summary>        /// The font’s style is among those typefaces designed to simulate handwriting.        /// </summary>        [iOSVersion(7)]        ClassScripts,                    /// <summary>        /// The font’s style is generally design independent, making it suitable for special characters (icons, dingbats, technical symbols, and so on) that may be used equally well with any font.        /// </summary>        [iOSVersion(7)]        ClassSymbolic,    }}