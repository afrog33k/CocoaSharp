using ObjectiveC;using System;using SwiftSharp.Attributes;using System.Collections.Generic;using Foundation;using CoreGraphics;namespace UIKit{    /// <summary>    /// The UICollectionViewTransitionLayout class is a special type of layout object that lets you implement behaviors when changing from one layout to another in your collection view. You can use this class as-is or subclass it to provide specialized behavior for your app. A common use for transition layouts is to create interactive transitions, such as those that are driven by gesture recognizers or touch events.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UICollectionViewTransitionLayout_class/index.html#//apple_ref/occ/cl/UICollectionViewTransitionLayout"/>    [iOSVersion(7)]    public class UICollectionViewTransitionLayout : UICollectionViewLayout//, AnyObject, NSCoding, NSObjectProtocol    {        /// <summary>        /// Initializes and returns a transition layout object.        /// </summary>        /// <param name="currentLayout">The layout object currently in use by the collection view.</param>        /// <param name="nextLayout">The new layout object that is being installed into the collection view.</param>        [iOSVersion(7)]        public UICollectionViewTransitionLayout(UICollectionViewLayout currentLayout, UICollectionViewLayout nextLayout) { }                /// <summary>        /// Sets the value for an animatable key.        /// </summary>        /// <param name="value">The value you want to store for the specified key.</param>        /// <param name="forAnimatedKey">A key that you define for your custom transition layout.</param>        [iOSVersion(7)]        [Export("updateValue")]        public void UpdateValue(CGFloat value, string forAnimatedKey) {  }                /// <summary>        /// Returns the most recently set value for the specified key.        /// </summary>        /// <param name="key">A key whose value you set using the updateValue:forAnimatedKey: method.</param>        [iOSVersion(7)]        [Export("valueForAnimatedKey")]        public CGFloat ValueForAnimatedKey(string key) { return default(CGFloat); }                /// <summary>        /// The completion percentage of the transition.        /// </summary>        [iOSVersion(7)]        [Export("transitionProgress")]        public CGFloat TransitionProgress { get; set; }                /// <summary>        /// The collection view’s current layout object. (read-only)        /// </summary>        [iOSVersion(7)]        [Export("currentLayout")]        public UICollectionViewLayout CurrentLayout { get; private set; }                /// <summary>        /// The collection view’s new layout object. (read-only)        /// </summary>        [iOSVersion(7)]        [Export("nextLayout")]        public UICollectionViewLayout NextLayout { get; private set; }    }}