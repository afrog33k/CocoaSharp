using ObjectiveC;using System;using SharpSwift.Attributes;using System.Collections.Generic;using Foundation;using CoreGraphics;namespace UIKit{    /// <summary>    /// UIManagedDocument is a concrete subclass of UIDocument that integrates with Core Data. When you initialize a managed document, you specify the URL for the document location. The document object then creates a Core Data stack to use to access the document’s persistent store using a managed object model from the application’s main bundle. See Supporting Document-Based Apps in iCloud in iCloud Programming Guide for Core Data for implementation strategies and troubleshooting steps.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIManagedDocument_Class/index.html#//apple_ref/occ/cl/UIManagedDocument"/>    [iOSVersion(5)]    [Export("")]    public class UIManagedDocument : UIDocument//, AnyObject, CVarArgType, Equatable, Hashable, NSFilePresenter, NSObjectProtocol, Printable    {        public UIManagedDocument() { }        /// <summary>        /// Creates or loads the document’s persistent store.        /// </summary>        /// <param name="storeURL">The URL for the persistent store.</param>        /// <param name="ofType">The document’s file type.</param>        /// <param name="modelConfiguration">The managed object model configuration to use.</param>        /// <param name="storeOptions">The options used to configure the persistent store coordinator.</param>        /// <param name="error">Upon return, if a problem occurs, contains an error object that describes the problem.</param>        [iOSVersion(5)]        [Export("configurePersistentStoreCoordinatorForURL")]        public virtual bool ConfigurePersistentStoreCoordinatorForURL([Unwrapped] NSURL storeURL, [Unwrapped] string ofType, [Optional] string modelConfiguration, Dictionary<NSObject, AnyObject> storeOptions, NSErrorPointer error) { return default(bool); }                /// <summary>        /// Returns the Core Data store type for a given document file type.        /// </summary>        /// <param name="fileType">The document file type.</param>        [iOSVersion(5)]        [Export("persistentStoreTypeForFileType")]        [return:Unwrapped]        public virtual string PersistentStoreTypeForFileType([Unwrapped] string fileType) { return default(string); }                /// <summary>        /// Handles reading non-Core Data content in the additional content directory in the document’s file package.        /// </summary>        /// <param name="absoluteURL">The URL for the additional content directory in the document’s file package.</param>        /// <param name="error">Upon return, if a problem occurs, contains an error object that describes the problem.</param>        [iOSVersion(5)]        [Export("readAdditionalContentFromURL")]        public virtual bool ReadAdditionalContentFromURL(NSURL absoluteURL, NSErrorPointer error) { return default(bool); }                /// <summary>        /// Handles writing non-Core Data content to the additional content directory in the document’s file package.        /// </summary>        /// <param name="absoluteURL">The URL for the additional content directory in the document’s file package.</param>        /// <param name="error">Upon return, if a problem occurs, contains an error object that describes the problem.</param>        [iOSVersion(5)]        [Export("additionalContentForURL")]        [return:Optional]        public virtual AnyObject AdditionalContentForURL(NSURL absoluteURL, NSErrorPointer error) { return default(AnyObject); }                /// <summary>        /// Handles writing non-Core Data content to the document’s file package.        /// </summary>        /// <param name="content">An object that represents the additional content for the document.        ///   This is the object returned from additionalContentForURL:error:.</param>        /// <param name="toURL">The URL to which to write the additional content.</param>        /// <param name="originalContentsURL">The current URL of the document that is being saved.</param>        /// <param name="error">Upon return, if a problem occurs, contains an error object that describes the problem.</param>        [iOSVersion(5)]        [Export("writeAdditionalContent")]        public virtual bool WriteAdditionalContent([Unwrapped] AnyObject content, [Unwrapped] NSURL toURL, [Unwrapped] NSURL originalContentsURL, NSErrorPointer error) { return default(bool); }                /// <summary>        /// Returns the name for the persistent store file inside the document’s file package.        /// </summary>        [iOSVersion(5)]        [Export("persistentStoreName")]        public static string PersistentStoreName() { return default(string); }                /// <summary>        /// The document’s managed object context. (read-only)        /// </summary>        [iOSVersion(5)]        [Export("managedObjectContext")]        [Unwrapped]        public NSManagedObjectContext ManagedObjectContext { get; private set; }                /// <summary>        /// The document’s managed object model. (read-only)        /// </summary>        [iOSVersion(5)]        [Export("managedObjectModel")]        [Unwrapped]        public NSManagedObjectModel ManagedObjectModel { get; private set; }                /// <summary>        /// Options used when creating the document’s persistent store.        /// </summary>        [iOSVersion(5)]        [Export("persistentStoreOptions")]        public Dictionary<NSObject, AnyObject> PersistentStoreOptions { get; set; }                /// <summary>        /// A model configuration name to be passed when configuring the persistent store.        /// </summary>        [iOSVersion(5)]        [Export("modelConfiguration")]        [Optional]        public string ModelConfiguration { get; set; }    }}