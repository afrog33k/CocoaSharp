using ObjectiveC;using System;using SharpSwift.Attributes;using System.Collections.Generic;using Foundation;using CoreGraphics;namespace UIKit{    /// <summary>    /// A UISlider object is a visual control used to select a single value from a continuous range of values. Sliders are always displayed as horizontal bars. An indicator, or thumb, notes the current value of the slider and can be moved by the user to change the setting.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UISlider_Class/index.html#//apple_ref/occ/cl/UISlider"/>    [iOSVersion(2)]    public class UISlider : UIControl//, AnyObject, NSCoding, NSObjectProtocol, Reflectable, UIAccessibilityIdentification, UIAppearance, UIAppearanceContainer, UICoordinateSpace, UIDynamicItem, UITraitEnvironment    {        public UISlider() { }        /// <summary>        /// Sets the receiver’s current value, allowing you to animate the change visually.        /// </summary>        /// <param name="value">The new value to assign to the value property</param>        /// <param name="animated">Specify true to animate the change in value when the receiver is redrawn; otherwise, specify false to draw the receiver with the new value only. Animations are performed asynchronously and do not block the calling thread.</param>        [iOSVersion(2)]        [Export("setValue")]        public virtual void SetValue(float value, bool animated) {  }                /// <summary>        /// Returns the minimum track image associated with the specified control state.        /// </summary>        /// <param name="state">The control state whose minimum track image you want. You should specify only one control state value for this parameter.</param>        [iOSVersion(2)]        [Export("minimumTrackImageForState")]        public virtual UIImage MinimumTrackImageForState(UIControlState state) { return default(UIImage); }                /// <summary>        /// Assigns a minimum track image to the specified control states.        /// </summary>        /// <param name="image">The minimum track image to associate with the specified states.</param>        /// <param name="forState">The control state with which to associate the image.</param>        [iOSVersion(2)]        [Export("setMinimumTrackImage")]        public virtual void SetMinimumTrackImage(UIImage image, UIControlState forState) {  }                /// <summary>        /// Returns the maximum track image associated with the specified control state.        /// </summary>        /// <param name="state">The control state whose maximum track image you want. You should specify only one control state value for this parameter.</param>        [iOSVersion(2)]        [Export("maximumTrackImageForState")]        public virtual UIImage MaximumTrackImageForState(UIControlState state) { return default(UIImage); }                /// <summary>        /// Assigns a maximum track image to the specified control states.        /// </summary>        /// <param name="image">The maximum track image to associate with the specified states.</param>        /// <param name="forState">The control state with which to associate the image.</param>        [iOSVersion(2)]        [Export("setMaximumTrackImage")]        public virtual void SetMaximumTrackImage(UIImage image, UIControlState forState) {  }                /// <summary>        /// Returns the thumb image associated with the specified control state.        /// </summary>        /// <param name="state">The control state whose thumb image you want. You should specify only one control state value for this parameter.</param>        [iOSVersion(2)]        [Export("thumbImageForState")]        public virtual UIImage ThumbImageForState(UIControlState state) { return default(UIImage); }                /// <summary>        /// Assigns a thumb image to the specified control states.        /// </summary>        /// <param name="image">The thumb image to associate with the specified states.</param>        /// <param name="forState">The control state with which to associate the image.</param>        [iOSVersion(2)]        [Export("setThumbImage")]        public virtual void SetThumbImage(UIImage image, UIControlState forState) {  }                /// <summary>        /// Returns the drawing rectangle for the maximum value image.        /// </summary>        /// <param name="bounds">The bounding rectangle of the receiver.</param>        [iOSVersion(2)]        [Export("maximumValueImageRectForBounds")]        public virtual CGRect MaximumValueImageRectForBounds(CGRect bounds) { return default(CGRect); }                /// <summary>        /// Returns the drawing rectangle for the minimum value image.        /// </summary>        /// <param name="bounds">The bounding rectangle of the receiver.</param>        [iOSVersion(2)]        [Export("minimumValueImageRectForBounds")]        public virtual CGRect MinimumValueImageRectForBounds(CGRect bounds) { return default(CGRect); }                /// <summary>        /// Returns the drawing rectangle for the slider’s track.        /// </summary>        /// <param name="bounds">The bounding rectangle of the receiver.</param>        [iOSVersion(2)]        [Export("trackRectForBounds")]        public virtual CGRect TrackRectForBounds(CGRect bounds) { return default(CGRect); }                /// <summary>        /// Returns the drawing rectangle for the slider’s thumb image.        /// </summary>        /// <param name="bounds">The bounding rectangle of the receiver.</param>        /// <param name="trackRect">The drawing rectangle for the receiver’s track, as returned by the trackRectForBounds: method.</param>        /// <param name="value">The current value of the slider.</param>        [iOSVersion(2)]        [Export("thumbRectForBounds")]        public virtual CGRect ThumbRectForBounds(CGRect bounds, CGRect trackRect, float value) { return default(CGRect); }                /// <summary>        /// Contains the receiver’s current value.        /// </summary>        [iOSVersion(2)]        [Export("value")]        public float Value { get; set; }                /// <summary>        /// Contains the minimum value of the receiver.        /// </summary>        [iOSVersion(2)]        [Export("minimumValue")]        public float MinimumValue { get; set; }                /// <summary>        /// Contains the maximum value of the receiver.        /// </summary>        [iOSVersion(2)]        [Export("maximumValue")]        public float MaximumValue { get; set; }                /// <summary>        /// Contains a Boolean value indicating whether changes in the sliders value generate continuous update events.        /// </summary>        [iOSVersion(2)]        [Export("continuous")]        public bool Continuous { get; set; }                /// <summary>        /// Contains the image that is drawn on the side of the slider representing the minimum value.        /// </summary>        [iOSVersion(2)]        [Export("minimumValueImage")]        public UIImage MinimumValueImage { get; set; }                /// <summary>        /// Contains the image that is drawn on the side of the slider representing the maximum value.        /// </summary>        [iOSVersion(2)]        [Export("maximumValueImage")]        public UIImage MaximumValueImage { get; set; }                /// <summary>        /// The color used to tint the standard minimum track images.        /// </summary>        [iOSVersion(5)]        [Export("minimumTrackTintColor")]        public UIColor MinimumTrackTintColor { get; set; }                /// <summary>        /// Contains the minimum track image currently being used to render the receiver. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("currentMinimumTrackImage")]        public UIImage CurrentMinimumTrackImage { get; private set; }                /// <summary>        /// The color used to tint the standard maximum track images.        /// </summary>        [iOSVersion(5)]        [Export("maximumTrackTintColor")]        public UIColor MaximumTrackTintColor { get; set; }                /// <summary>        /// Contains the maximum track image currently being used to render the receiver. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("currentMaximumTrackImage")]        public UIImage CurrentMaximumTrackImage { get; private set; }                /// <summary>        /// The color used to tint the standard thumb images.        /// </summary>        [iOSVersion(5)]        [Export("thumbTintColor")]        public UIColor ThumbTintColor { get; set; }                /// <summary>        /// Contains the thumb image currently being used to render the receiver. (read-only)        /// </summary>        [iOSVersion(2)]        [Export("currentThumbImage")]        public UIImage CurrentThumbImage { get; private set; }    }}