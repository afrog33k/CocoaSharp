using CoreGraphics;
using ObjectiveC;using System;using SwiftSharp.Attributes;using Foundation;namespace UIKit{	//https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIImageView_Class/index.html#//apple_ref/occ/cl/UIImageView	/// <summary>	/// An image view object provides a view-based container for displaying either a single image or for animating a series of images. For animating the images, the UIImageView class provides controls to set the duration and frequency of the animation. You can also start and stop the animation freely.	/// </summary>	[iOSVersion(2)]	public class UIImageView : UIView	{		/// <summary>		/// Returns an image view initialized with the specified image.		/// </summary>		/// <param name="image">The initial image to display in the image view.</param>		/// <returns>An initialized image view object.</returns>		[iOSVersion(2)]		public UIImageView(UIImage image) : base(new CGRect()) { }				/// <summary>		/// Returns an image view initialized with the specified regular and highlighted images.		/// </summary>		/// <param name="image">The initial image to display in the image view.</param>		/// <param name="highlightedImage">The image to display if the image view is highlighted.</param>		/// <returns>An initialized image view object.</returns>		[iOSVersion(3)]		public UIImageView(UIImage image, UIImage highlightedImage) : base(new CGRect()) { }				/// <summary>		/// The image displayed in the image view.		/// </summary>		[iOSVersion(2)]		[Export("image")]		public UIImage Image { get; set; }				/// <summary>		/// The highlighted image displayed in the image view.		/// </summary>		[iOSVersion(3)]		[Export("highlightedImage")]		public UIImage HighlightedImage { get; set; }				/// <summary>		/// An array of UIImage objects to use for an animation.		/// </summary>		[iOSVersion(2)]		[Export("animationImages")]		public AnyObject[] AnimationImages { get; set; }				/// <summary>		/// An array of UIImage objects to use for an animation when the view is highlighted.		/// </summary>		[iOSVersion(3)]		[Export("highlightedAnimationImages")]		public AnyObject[] HighlightedAnimationImages { get; set; }				/// <summary>		/// The amount of time it takes to go through one cycle of the images.		/// </summary>		[iOSVersion(2)]		[Export("animationDuration")]		public NSTimeinterval AnimationDuration { get; set; }				/// <summary>		/// Specifies the number of times to repeat the animation.		/// </summary>		[iOSVersion(2)]		[Export("animationRepeatCount")]		public int AnimationRepeatCount { get; set; }				/// <summary>		/// Starts animating the images in the receiver.		/// </summary>		[iOSVersion(2)]		[Export("startAnimating")]		public void StartAnimating() { }				/// <summary>		/// Stops animating the images in the receiver.		/// </summary>		[iOSVersion(2)]		[Export("stopAnimating")]		public void StopAnimating() { }				/// <summary>		/// Returns a Boolean value indicating whether the animation is running.		/// </summary>		/// <returns>true if the animation is running; otherwise, false.</returns>		[iOSVersion(2)]		[Export("isAnimating")]		public bool IsAnimating() { return false; }				/// <summary>		/// A Boolean value that determines whether user events are ignored and removed from the event queue.		/// </summary>		[iOSVersion(2)]		[Export("userinteractionEnabled")]		public bool UserinteractionEnabled { get; set; }				/// <summary>		/// A Boolean value that determines whether the image is highlighted.		/// </summary>		[iOSVersion(3)]		[Export("highlighted")]		public bool Highlighted { get; set; }				/// <summary>		/// A color used to tint template images in the view hierarchy.		/// </summary>		[iOSVersion(7)]		[Export("tintColor")]		public UIColor TintColor { get; set; }	}}