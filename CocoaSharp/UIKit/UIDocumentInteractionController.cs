using ObjectiveC;using System;using SwiftSharp.Attributes;using System.Collections.Generic;namespace UIKit{    /// <summary>    /// A document interaction controller, along with a delegate object, provides in-app support for managing user interactions with files in the local system. For example, an email program might use this class to allow the user to preview attachments and open them in other apps. Use this class to present an appropriate user interface for previewing, opening, copying, or printing a specified file.    /// </summary>    /// <see cref="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIDocumentInteractionController_class/index.html#//apple_ref/occ/cl/UIDocumentInteractionController"/>    [iOSVersion(3.2)]    public class UIDocumentInteractionController : NSObject//, AnyObject, NSObjectProtocol, UIActionSheetDelegate    {        /// <summary>        /// Creates and returns a new UIDocumentationInteractionController object initialized with the specified URL.        /// </summary>        /// <param name="URL">A URL that specifies the location of the desired document. This parameter is retained. It can be changed later by modifying the URL property.</param>        [iOSVersion(3.2)]        public UIDocumentInteractionController(NSURL URL) { }                /// <summary>        /// Displays a full-screen preview of the target document.        /// </summary>        /// <param name="animated">Specify true to animate the appearance of the document preview or false to display it immediately.</param>        [iOSVersion(3.2)]        [Export("presentPreviewAnimated")]        public bool PresentPreviewAnimated(bool animated) { return default(bool); }                /// <summary>        /// Dismisses the currently active document preview.        /// </summary>        /// <param name="animated">Specify true to animate the dismissal of the document preview or false to dismiss it immediately.</param>        [iOSVersion(3.2)]        [Export("dismissPreviewAnimated")]        public void DismissPreviewAnimated(bool animated) {  }                /// <summary>        /// Displays an options menu and anchors it to the specified location in the view.        /// </summary>        /// <param name="rect">The location (in the coordinate system of view) at which to anchor the menu.</param>        /// <param name="inView">The view from which to display the options menu.</param>        /// <param name="animated">Specify true to animate the appearance of the menu or false to display it immediately.</param>        [iOSVersion(3.2)]        [Export("presentOptionsMenuFromRect")]        public bool PresentOptionsMenuFromRect(CGRect rect, UIView inView, bool animated) { return default(bool); }                /// <summary>        /// Displays an options menu and anchors it to the specified bar button item.        /// </summary>        /// <param name="item">The bar button item to which to anchor the menu.</param>        /// <param name="animated">Specify true to animate the appearance of the menu or false to display it immediately.</param>        [iOSVersion(3.2)]        [Export("presentOptionsMenuFromBarButtonItem")]        public bool PresentOptionsMenuFromBarButtonItem(UIBarButtonItem item, bool animated) { return default(bool); }                /// <summary>        /// Displays a menu for opening the document and anchors that menu to the specified view.        /// </summary>        /// <param name="rect">The location (in the coordinate system of view) at which to anchor the menu.</param>        /// <param name="inView">The view from which to display the menu.</param>        /// <param name="animated">Specify true to animate the appearance of the menu or false to display it immediately.</param>        [iOSVersion(3.2)]        [Export("presentOpenInMenuFromRect")]        public bool PresentOpenInMenuFromRect(CGRect rect, UIView inView, bool animated) { return default(bool); }                /// <summary>        /// Displays a menu for opening the document and anchors that menu to the specified bar button item.        /// </summary>        /// <param name="item">The bar button item to which to anchor the menu.</param>        /// <param name="animated">Specify true to animate the appearance of the menu or false to display it immediately.</param>        [iOSVersion(3.2)]        [Export("presentOpenInMenuFromBarButtonItem")]        public bool PresentOpenInMenuFromBarButtonItem(UIBarButtonItem item, bool animated) { return default(bool); }                /// <summary>        /// Dismisses the currently active menu.        /// </summary>        /// <param name="animated">Specify true to animate the dismissal of the currently active menu or false to dismiss it immediately.</param>        [iOSVersion(3.2)]        [Export("dismissMenuAnimated")]        public void DismissMenuAnimated(bool animated) {  }                /// <summary>        /// The URL identifying the target file on the local filesystem.        /// </summary>        [iOSVersion(3.2)]        public NSURL URL { get; set; }                /// <summary>        /// The type of the target file.        /// </summary>        [iOSVersion(3.2)]        public string UTI { get; set; }                /// <summary>        /// The name of the target file.        /// </summary>        [iOSVersion(3.2)]        [Export("name")]        public string Name { get; set; }                /// <summary>        /// The images associated with the target file. (read-only)        /// </summary>        [iOSVersion(3.2)]        [Export("icons")]        public AnyObject[] Icons { get; private set; }                /// <summary>        /// Custom property list information for the target file.        /// </summary>        [iOSVersion(3.2)]        [Export("annotation")]        public AnyObject Annotation { get; set; }                /// <summary>        /// The system-supplied gesture recognizers for presenting a document interaction controller. (read-only)        /// </summary>        [iOSVersion(3.2)]        [Export("gestureRecognizers")]        public AnyObject[] GestureRecognizers { get; private set; }                /// <summary>        /// The delegate you want to receive document interaction notifications.        /// </summary>        [iOSVersion(3.2)]        [Export("delegate")]        public UIDocumentInteractionControllerDelegate Delegate { get; set; }    }}